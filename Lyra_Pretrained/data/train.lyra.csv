id,code,comm_zh,comm_en
11541,"def main(conn, destination):
	information = conn.execute(""SELECT * FROM flights WHERE destination = :destination"", {""destination"": destination}).fetchall()
	for flight in information:
		print(flight)",使用$conn$查询flights表中destination为$destination$的所有列，并获取所有数据，通过for循环遍历查询结果，并打印所有查询结果。,"Use $conn$ to query all columns in the flights table with destination as $destination$ and get all data, use for loop iterate through the query results and print all the results."
11196,"from flask import jsonify
def trainers(db,result):
	try:
		conn = db.connection()
		result_data=conn.execute(""SELECT * FROM trainers WHERE result=:result"",{""result"":result}).fetchall()
		return jsonify(result_data)
	except Exception as e:
		return jsonify(str(e))",尝试性使用$db$连接数据库，查询trainers表中result为$result$的所有列，并获取全部数据，以jsonify形式返回查询结果。如果出现Exception异常，则通过jsonify返回字符串形式的异常信息,"Try to use $db$ to connect to the database, query all columns in the trainers where result is $result$, and get all the data, return the query result in jsonify form. If an Exception occurs, the Exception information in the form of a string is returned by jsonify."
13714,"def setup_class(conn,id):
	foo = conn.execute(""SELECT * FROM metadata WHERE id = :id"", {""id"": id}).fetchone()
	print(foo)
	return foo",使用$conn$执行SQL（根据$id$查询metadata表中的所有列）并获取第一条数据。打印查询结果并返回。,Use $conn$ to execute SQL (query all columns in the metadata table based on $id$) and get the first piece of data. Print the query results and return.
13207,"def select_urls(sess, urls, url):
	ex_url = sess.execute(urls.select().where(urls.c.url == url)).fetchone()
	if ex_url:
		return ex_url[""id""]
	else:
		return None","使用$sess$执行python表达式（根据$url$查询$urls$表中的所有列）并获取第一条数据。如果有查询结果则返回查询结果的""id""项，否则返回None。","Use $sess$to execute a python expression (query all the columns in the $urls$ where url is $url$) and get the first data. Returns the ""id"" item of the query result if there is one, otherwise return None."
14135,"import sqlalchemy
def getAll(url, id):
	con = sqlalchemy.create_engine(url)
	res = con.execute(""select * from person where id =:id "", {""id"":id} ).fetchall()
	for i in res:
		print(i)",通过$url$获取数据库引擎。根据$id$查询person表中的所有列，并获取所有数据，for循环遍历查询结果并将其打印。,Get the database engine via $url$. Query all the columns in the person table based on $id$ and get all the data. For loop iterates through the query results and prints.
13953,"from sqlalchemy.sql import select
from sqlalchemy import create_engine
def get_source(cookies1, cookies):
	engine = create_engine(cookies1)
	connection = engine.connect()
	sql = select([cookies])
	cookies = connection.execute(sql).fetchall()
	return cookies",通过$cookies1$获取数据库引擎并建立连接。使用Python表达式的方式设置SQL语句（查询$cookies$表中的所有数据），执行SQL获取所有数据并返回。,"Get the database engine and establish a connection through $cookies1$. Use the Python expression to set the SQL statement (query all the data in the $cookies$ table), execute SQL, get all the data and return."
13440,"import logging
def select_cols(conn, type):
	cols_sql = ""SELECT column FROM table WHERE type =: type""
	results = conn.execute(cols_sql,{""type"":type}).fetchall()
	logging.info(results)
	return results",使用$conn$执行SQL（根据$type$获取table表中的column列）并获取所有数据，再使用信息方法处理查询结果，最后返回查询结果,Use $conn$ to execute SQL (get 'column' column in the 'table' table based on $type$) and get all the data. Then use information method to process the query results and finally return the query results.
11032,"from flask import render_template
def select_res(conn,passengers,flight_id):
	values = conn.query(passengers).filter(passengers.flight_id == flight_id).first()
	if values is None:
		return render_template(""error.html"", message=""No such flights"")
	return render_template(""fligh.thtml"", passengers=values)","在ORM方式下使用$conn$执行SQL：根据$flight_id$查询$passengers$表中的第一条数据信息。如果查询的结果为None，则返回渲染后的""error.html""页面并给message参数传入""No such flights""。否则返回渲染后的""fligh.thtml""页面，并将查询结果传入给passengers参数。","Using $conn$ to execute SQL in ORM mode: Query the first piece of data information in the $passengers$ table based on $flight_id$. If the result of the query is None, return the rendered ""error.html"" page and pass ""No such flights"" to the message parameter. Otherwise, return to the rendered ""fligh.thtml"" page and pass the query result to the passengers parameter."
11381,"from sqlalchemy import create_engine
from flask import jsonify
def getDirectionsForDestination(db_file,directionID):
	engine = create_engine(db_file, echo=True)
	connection = engine.connect()
	steps = connection.execute(""SELECT * FROM Directions where directionID=:directionID"", {""directionID"": directionID}).fetchall()
	connection.close()
	return jsonify(steps=steps)",通过$db_file$获取数据库引擎，参数echo设置为True，并建立连接。执行SQL语句（根据$directionID$查询Directions表中所有列），并获取所有数据，关闭连接，将查询结果作为参数steps的值，以json格式返回。,"Get the database engine through $db_file$, set the parameter echo to True, and establish a connection. Execute the SQL statement (query all the columns in the Directions table according to $directionID$), get all the data, close the connection, take the query result as the value of the parameter steps and return in json format."
14150,"def yearCall(conn, title):
	resultData = conn.execute(""SELECT year FROM movies where title =:title"",{""title"":title}).fetchall()
	print(resultData)
	return resultData",通过$conn$查询movies表中title为$title$的所有year，打印查询结果并将其返回。,"Query all 'year' with 'title': $title$ in the movies table via $conn$, print the query result and return."
11016,"from flask import render_template
def user(conn,title,author):
	books = conn.execute(""SELECT isbn FROM books WHERE low_title=:title AND low_author=:author"",{""title"":title,""author"":author})
	if books.rowcount == 0:
		return render_template(""error.html"", message=""Sorry"")
	else:
		return render_template('books.html', books=books)","使用$conn$执行SQL：当low_title为$title$和low_author为$author$时，查询books表中的isbn。如果查询结果的行数为0，则渲染""error.html""页面，并在message字段传入“Sorry”。如果行数不是0，则传入查询信息并渲染'books.html'页面，并将查询结果传给books参数。","Execute SQL with $conn$: Query isbn in the books table where low_title is $title$ and low_author is $author$. If the number of query results rows is 0, render the ""error.html"" page and input ""Sorry"" in the message field. If the number of rows is not 0, input the query message, render the ""books.html"" page, and pass the query result to the books parameter."
11450,"def select_res(session,cls,id):
	values = session.query(cls).filter(cls.id == id).all()
	return values",使用ORM的方式，利用$session$执行SQL（根据$id$查询$cls$表中全部信息），获取查询到的所有数据，并返回,"Use ORM and $session$ to execute SQL (query all information in $cls$ table based on $id$), get all the queried data and return."
11072,"def get_table_names(conn,type):
	if type is not None:
		names=conn.execute(""SELECT name FROM master_table WHERE type=:type"",{""type"":type})
		return names
	else:
		return None",如果$type$不是None，使用$conn$执行SQL（根据$type$查询master_table表中的name），并返回执行结果。否则返回None。,"If $type$ is not None, use $conn$ to execute SQL (query the name in the master_table table based on $type$) and return the execution result. Otherwise, retutn None."
13779,"def get_user_id_from_session(conn, session_hash):
	query = ""SELECT user_id from ic_user_session WHERE session_hash = :session_hash""
	res = conn.execute(query,{""session_hash"":session_hash})
	if not res:
		return None
	res = res.fetchone()
	return res[0]","设置sql（根据$session_hash$查询ic_user_session表中user_id列）,使用$conn$执行SQL，如果没有查询结果，返回None，最后返回获取到的第一条查询结果的第0个元素。","Set sql (query the user_id column in the ic_user_session table according to $session_hash$) and use $conn$ to execute SQL. If there is no query result, return None, and finally return the obtained 0th element of the first query result."
13572,"def mysql_select(conn,wildcards):
	insert_statement = ""select * from db_table where wildcards=:wildcards""
	rslt = conn.execute(insert_statement, {""wildcards"": wildcards}).fetchall()
	print(rslt)
	return rslt","设置sql（根据$wildcards$查询db_table表中全部信息）,使用$conn$执行SQL并获取所有查询结果，打印并返回执行结果。","Set up sql (query all the information in the db_table table based on $wildcards$), execute SQL with $conn$, get all the query results, print and return the execution results."
13321,"def textSql(db,user_id,age):
	with db.connect() as conn:
		s = conn.execute(""SELECT user_id FROM users WHERE user_id=:user_id AND age<:age"",{""user_id"":user_id,""age"":age}).fetchall()
		for x in s:
			print(x)
			print(dict(x))",使用with语句根据$db$连接数据库。执行SQL（根据$user_id$与age小于$age$的条件，查询users表中user_id列），并获取所有查询结果，使用for循环打印每一条查询结果，与每一条转化为dict的查询结果,"Use the with statement to connect the database according to $db$. Execute SQL (query the user_id column in the users table with the condition that $user_id$ and age is less than $age$), get all the query results, use for loop to print each query result and each query result converted to dict."
13419,"def select_value(conn, schema_name, name):
	if not schema_name:
		return False
	else:
		sql = ""SELECT table_name FROM all_tables WHERE table_name = :name AND owner =: schema_name""
		rs = conn.execute(sql,{""name"":name}, {""schema_name"", schema_name}).fetchall()
		return rs",如果$schema_name$取反，则返回False，否则使用$conn$执行SQL（根据table_name为$name$和owner为$schema_name$获取all_tables表中的table_name列）并获取所有数据并返回查询结果,"If $schema_name$ is reversed, return False; otherwise use $conn$ to execute SQL (get table_name column in all_tables table with table_name as $name$ and owner as $schema_name$), get all the data and return query result."
14112,"from flask import render_template, request
def review(conn, author_id, book_isbn):
	if request.method == ""POST"":
		reviews = conn.execute(""SELECT * FROM reviews WHERE author_id= :author_id AND book_isbn= :book_isbn"", {""author_id"": author_id, ""book_isbn"": book_isbn}).fetchone()
		if reviews is None:
			return render_template(""error.html"")
		else:
			return render_template(""review.html"", reviews=reviews)","如果request模块使用post方式发送请求，通过$conn$执行SQL：根据$author_id$和$book_isbn$查询reviews表中的所有列，并获取第一条数据。如果查询结果为空，渲染并返回""error.html""；否则渲染并返回""review.html"", 其中reviews参数为查询结果。","If the request module uses post to send a request, execute SQL via $conn$: Query all columns in the reviews table based on $author_id$ and $book_isbn$, and get the first piece of data. If the query result is empty, render and return ""error.html""; otherwise render and return ""review.html"", where the reviews parameter is the query result."
14006,"def test(conn):
	try:
		records = conn.execute(""SELECT * FROM pg_stat_activity"").fetchall()
		return records
	except Exception as e:
		print(e)",尝试通过$conn$执行SQL语句（获取pg_stat_activity表中的全部列）并获取全部数据，返回查询结果。当出现Exception时，打印异常信息。,"Try to execute the SQL statement (get all the columns in the pg_stat_activity table) through $conn$, get all the data and return the query results. Print exception information when Exception appears."
14205,"from sqlalchemy.sql import select
def list_tag_by_code_no(conn,taglist,code_no):
	s = select(taglist).where(taglist.c.code_no==code_no)
	r = conn.execute(s).fetchall()
	for row in r:
		print(row)",设置SQL语句：根据$code_no$查询$taglist$表中的数据，通过$conn$执行SQL获取所有数据。for循环遍历执行结果并将其打印。,Set the SQL statement: Query the data in the $taglist$ table based on $code_no$ and execute SQL through $conn$ to get all the data. For loop iterates through the execution result and prints.
11083,"def getUser(session,User,login_email):
	user = session.query(User).filter(User.email== login_email).first()
	if user:
		return True
	else:
		return False",在ORM方式下，使用$session$执行SQL（查询当email为$login_email$时$User$表中的信息）并获取第一条数据。如果查询结果存在，则返回True，否则返回False。,"In ORM mode, use $session$ to execute SQL (query the information in the $User$ table when email is $login_email$) and get the first piece of data. Return True, if the query result exists. Otherwise, return False."
13487,"from flask import render_template, jsonify
def api(db, id, isbn):
	book = db.execute(""SELECT * FROM books WHERE isbn = :isbn"", {""isbn"": isbn}).fetchone()
	if book is None:
		return render_template(""error.html"")
	review_count = db.execute(""SELECT COUNT(*) FROM reviews WHERE book_id = :book_id"", {""book_id"": id}).fetchone()[0]
	data = {""title"": book.title,""author"": book.author,""review_count"": review_count}
	return jsonify(data)","使用$db$执行SQL（根据$isbn$获取books表中的所有列）并获取第一条数据，如果查询结果是None，则返回渲染后的""error.html""，然后再使用$db$执行SQL（根据book_id为$id$获取reviews表中的所有列的次数）并获取所有数据的第0个元素，最后返回由jsonify处理的title、author和review_count三列内容","Use $db$ to execute SQL (get all columns in the books table based on $isbn$) and get the first piece of data. If the query result is None, then return the rendered ""error.html"", then use $db$ to execute SQL (get the number of all columns in the reviews table with book_id as $id$) and get the 0th element of all the data. Finally return the three columns processed by jsonify: title, author and review_count."
11148,"from flask import jsonify
def query_page(conn,input_id):
	sql = ""SELECT otu_id FROM samples WHERE input_id={}"".format(input_id)
	infor = conn.execute(sql).fetchall()
	return jsonify(infor)","设置SQL语句（使用format()函数格式化输出字符串,通过字符串$input_id$查询samples表中的otu_id）,通过$conn$连接执行SQL语句获取所有数据，并使用jsonify返回所获取的数据。","Set the SQL statement(Format the output string with the format () function, query the otu_id in the samples where the id of input is $input_id$）, execute the SQL statement with the $conn$ connection to get all the data and use jsonify to return the retrieved data."
13465,"def get_book_by_isbn(conn, isbn):
	sql = ""SELECT * FROM books WHERE isbn =: isbn""
	book = conn.execute(sql,{""isbn"":isbn}).fetchone()
	return list(book)",通过$conn$执行SQL（根据$isbn$获取books表中的所有列）并获取第一条数据，再把查询结果转化为list并返回list内容,Execute SQL through $conn$ (get all columns in the books table based on $isbn$) and get the first piece of data. Then convert the query results into list and return the contents of the list.
11022,"def create_engine(conn,database_uri, database_name):
	if database_name == ""sqlite"":
		papers = conn.execute(""SELECT paper FROM database_name WHERE database_uri=:database_uri"",{""database_uri"":database_uri}).fetchall()
		return papers
	else:
		return False","如果$database_name$的内容为""sqlite""，则使用$conn$执行SQL（根据$database_uri$查询database中的paper信息）并获取所有数据，返回查询结果。如果$database_name$为其他内容则返回False。","If the content of $database_name$ is ""sqlite"", then use $conn$ to execute SQL (query the paper information in database based on $database_uri$), get all the data, and return the query result. Return False if $database_name$ is something else."
13244,"from sqlalchemy import create_engine
def select_value(db_string, senha):
	db = create_engine(db_string)
	try:
		sql = ""SELECT * FROM tb_user WHERE senha =: senha""
		res = db.execute(sql,{""senha"":senha}).fetchall()
		return res
	except Exception as e:
		print(e)
		res = False
	return res",通过$db_string$创建数据库引擎。尝试设置SQL（根据$senha$查询tb_user中的所有列），执行SQL获取所有数据并返回。如果发生Exception错误则打印具体异常信息，将查询结果赋值为False。最后返回查询结果。,"Creating a database engine with $db_string$. Try to set up SQL (query all columns in tb_user where senha is $senha$) , execute SQL to get all the data and return it. If an Exception error occurs, the specific Exception information is printed and the query result is assigned to False. Finally, the query results are returned."
11098,"from sqlalchemy.sql import select
def test_inserted(conn,testtable,id):
	s = select(testtable.c.values).where(testtable.c.id == id)
	result = conn.execute(s).fetchall()
	assert len(result) > 0",使用python表达式的方式设置SQL（根据$id$查询$testtable$表中的values）。使用$conn$执行SQL并获取所有数据。设置断言判断查询数据长度大于0。,Use an python expression to set SQL (query the values in the $testtable$ table based on $id$). Use $conn$ to execute the SQL and get all the data. Set the assertion to determine that the query data length is greater than 0.
13446,"def select_count(e, Origin):
	conn = e.connect()
	count_sql = ""SELECT count(*) from ontime_data where Origin =: Origin""
	result = conn.execute(count_sql,{""Origin"":Origin}).fetchall()
	return result",利用$e$连接数据库并执行SQL（根据$Origin$获取ontime_data表中的被计数方法处理的所有列）并获取所有数据，最后返回查询结果,Use $e$ to connect to the database and execute the SQL (get all the columns in the ontime_data table processed by the counting method based on $Origin$) and get all the data. Finally return the query results.
13458,"def test_async_cursor_server_side(conn, value):
	sql = ""SELECT name FROM tb1 WHERE value =: value""
	names = conn.execute(sql,{""value"":value}).fetchall()
	assert len(names) > 0
	return names[0]",利用$conn$执行SQL（根据$value$获取tb1表中的name列）并获取所有数据。然后设置断言查询结果的长度大于0，最后返回查询结果的第0个元素,Use $conn$ to execute the SQL (get the name column in the tb1 table based on $value$) and get all the data. Then set the assertion that the length of the query result is greater than 0. Finally return the 0th element of the query result.
11568,"from flask import jsonify
def isbn_api(conn, isbn):
	values = conn.execute(""SELECT * FROM reviews WHERE isbn = :isbn"", {""isbn"": isbn}).fetchall()
	if values is None:
		return jsonify({""Erro, reviews not found""})
	return jsonify(values)","使用$conn$连接执行SQL（根据$isbn$查询reviews表中的全部列）并获取所有数据。若查询结果为空，则使用jsonify返回""Erro, reviews not found""；否则，使用jsonify返回所有查询结果。","Use the $conn$ connection to execute the SQL (query all columns in the reviews table based on $isbn$) and get all the data. If the query result is empty, use jsonify to return ""Erro, reviews not found""; otherwise, use jsonify to return all the results of the query."
13525,"def select_db(conn,name):
	users = conn.execute(""SELECT * FROM user where name=:name"",{""name"":name}).fetchall()
	for user in users:
		print(f'{user.id}  | {user.name}')",利用$conn$执行SQL（根据$name$查询user表中所有列），并获取所有查询结果，用for循环遍历获取的所有查询结果，打印格式化字符串，即每条数据的id与name字段，并以|分隔。,"Execute SQL with $conn$ (query all columns in the user table according to $name$), get all the query results, use for loop to traverse all obtained query results, print the format string, that is the id and name fields of each piece of data, and separate them with '|'."
14088,"from flask import render_template
def book(db, isbn):
	name = db.execute(""SELECT title FROM books WHERE isbn=:isbn"",{""isbn"":isbn}).fetchone()[0]
	author = db.execute(""SELECT author FROM books WHERE isbn=:isbn"",{""isbn"":isbn}).fetchone()[0]
	published = db.execute(""SELECT year FROM books WHERE isbn=:isbn"",{""isbn"":isbn}).fetchone()[0]
	return render_template(""book.html"", name=name, author=author, published=published)","step1： 通过$db$执行SQL：根据$isbn$查询books表中第一条title的第0个元素；step2： 通过$db$执行SQL：根据$isbn$查询books表中第一条author的第0个元素；step3： 通过$db$执行SQL：根据$isbn$查询books表中第一条year的第0个元素；渲染并返回""book.html""，其中name参数为step1的查询结果, author参数为step2的查询结果, published参数为step3的查询结果。","Step 1: Execute SQL through $db$: Query the 0th element of the first 'title' in the books table according to $isbn$; step 2: Executes SQL through $db$: Query the 0th element of the first 'author' in the books table according to $isbn$; step 3: Executes SQL through $db$: Query the 0th element of the first 'year' in the books table according to $isbn$. Render and return ""book.html"", where the name parameter is the query result of step1, the author parameter is the query result of step2, and the published parameter is the query result of step3."
13397,"def find_beers(engine,name):
	with engine.connect() as con:
		result=con.execute(""SELECT manufacturer FROM items WHERE name=:name"",{""name"":name}).fetchall()
		if result is None:
			return None
		result = dict(result)
		return result",使用with语句根据$engine$连接数据库。执行SQL（根据$name$查询items表中manufacturer列），并获取所有查询结果，如果查询结果为空，返回None，否则将查询结果转化为dict并返回。,"Use the with statement to connect the database according to $engine$. Execute SQL (query the manufacturer column in the items table according to $name$) and get all the query results. If the query results are empty, return None; otherwise, convert the query results to dict and return."
13049,"from sqlalchemy.sql import select
def logout(conn,users,username):
	selectUser = select([users]).where(users.c.username == username)
	user = conn.execute(selectUser).first()
	return user",使用python表达式方式设置SQL：根据$username$查询$users$表中的所有内容。使用$conn$执行SQL并获取第一条数据。最后返回查询结果。,"Use python expressions to set up SQL: Query everything in the $users$ table based on $username$. Use $conn$ to execute SQL and get the first piece of data. Finally, return the query result."
11677,"def get_modes(db,id):
	modes = db.execute(""select name from contact_mode where id=:id"",{""id"":id})
	for row in modes.fetchall():
		print(row)",利用$db$执行SQL（根据$id$获取contact_mode表中的name列），使用for循环打印获取所有数据的每一项,"Execute SQL with $db$ (get the name column in the contact_mode table according to $id$), and use for loop to print every item of all data."
11325,"from sqlalchemy.sql import select
def authenticate_rfid(engine,User,KartenID):
	connection = engine.connect()
	sql = select(User).where(User.c.KartenID == KartenID)
	mou = connection.execute(sql).fetchall()
	connection.close()
	if len(mou)!=0:
		print(""success"")
		return True
	else:
		print(""fail"")
		return False",设置sql（根据$KartenID$查询$User$表中所有列），使用$engine$执行python表达式并获取所有数据，关闭连接，如果查询数据长度不为0，则输出success，返回True；否则输出fail，返回False,"Set sql (query all columns in the $User$ table according to $KartenID$), use $engine$ to execute the python expression, get all the data and close the connection. If the query data length is not 0, output success and return True; otherwise, output fail and return False."
13689,"from flask import jsonify
def get_records(conn, classid, studentid):
	sql = ""select * from assignments where course_id=:classid and student_id = studentid""
	data = conn.execute(sql,{""classid"":classid,""studentid"":studentid}).fetchall()
	records = {'records': [dict(r) for r in data]}
	return jsonify(records)",设置SQL（当course_id等于$classid$和student_id等于$studentid$时查询assignments 表中的所有列）。使用$conn$执行SQL并获取所有数据。将查询结果中每一项转化为dict类型，并将结果存为字典中records对应的值。最后返回序列化后的字典。,"Set SQL (query all columns in the assignments table where course_id is $classid$ and student_id is $studentid$). Execute SQL with $conn$ and get all the data. Convert each item in the query results to the dict type and store the results as values for the records in the dictionary. Finally, return the serialized dictionary."
11470,"from flask import request,render_template
def index(conn, bookname):
	if request.method == ""GET"":
		return render_template('index.html')
	if request.method == ""POST"":
		book_sql = ""SELECT isbn FROM booktable WHERE bookname =: bookname""
		books = conn.execute(book_sql,{""bookname"":bookname}).fetchall()
		return render_template('index.html', books=books)","如果请求方式为""GET""，返回渲染后的'index.html'页面。如果请求方式为""POST""，设置sql（根据$bookname$查询booktable表中isbn列）,使用$conn$执行SQL并获取所有查询结果，返回渲染后的'index.html'页面，参数books为查询结果。","If the request method is ""GET"", return the rendered 'index.html' page. If the request method is ""POST"", set the SQL (query the isbn column in the booktable table based on $bookname$), use $conn$ to execute the SQL and get all the query results. Return the rendered 'index.html' page with the books parameter as the query result."
13513,"def main(conn,flight_id):
	passengers = conn.execute(""SELECT name FROM passengers WHERE flight_id = :flight_id"",{""flight_id"": flight_id}).fetchall()
	for p in passengers:
		print(p.name)
	if len(passengers) == 0:
		print(""No passengers."")
		return
	return passengers","利用$conn$执行SQL（根据$flight_id$查询passengers表中name列），并获取所有查询结果，用for循环遍历获取的所有查询结果，打印每条数据的name字段，如果查询结果的长度为0，打印""No passengers.""，并返回空，否则将查询结果返回。","Use $conn$ to execute SQL (query the name column in the passengers table according to $flight_id$), get all the query results, use for loop to traverse all the query results obtained, print the name field of each piece of date. If the length of the query result is 0, print ""No passengers."" and return 'empty'; otherwise, return the query result."
11262,"def insert_image_url(conn, image_url):
	sql='select * from users where image_url=:image_url'
	result = conn.execute(sql,{""image_url"":image_url}).fetchall()
	return result",使用$conn$执行SQL（根据$image_url$获取users中的所有列）并获取所有数据，最后返回获取的结果数据,"Use $conn$ to execute SQL (get all the columns in users based on $image_url$), get all the data, and finally return the obtained result data."
14183,"def getquery(conn):
	rows = conn.execute(""select schema from table"").fetchall()
	for row in rows:
		print(row)
	return rows",通过$conn$执行SQL：查询table中的所有schema数据。for循环遍历所有查询结果并打印，返回所有的查询结果。,Execute SQL via $conn$: Query all schema data in 'table'. For loop iterates through all query results and prints and returns all query results.
11596,"import csv
def main(conn):
	f=open('books.csv')
	reader=csv.reader(f)
	next(reader)
	for isbn in reader:
		values = conn.execute(""SELECT * FROM books WHERE isbn = :isbn"", {""isbn"": isbn}).fetchall()
		assert values!=[]
		print(values)",打开books.csv文件并读取。通过next（）方法迭代读取的文件内容。for循环遍历读取的文件内容，通过$conn$查询books表中isbn为$isbn$的全部列，并获取所有数据。设置断言判断返回结果不为空list，并返回查询结果。,"Open the books.csv file and read it. Iterate the contents of the file through the next () method. Use for loop traverse the contents of the read file, query all the columns in the books table where isbn is $isbn$ through $conn$, and get all the data. Set the assertion to determine that the returned result is not empty list, and return the query result."
14249,"def bookApi(con, isbn):
	if isbn is None:
		return False
	data = con.execute('SELECT author FROM books WHERE isbn = :isbn', {""isbn"": isbn}).fetchone()
	print(data)
	return data",如果$isbn$为空，返回False。通过$con$执行SQL语句，内容为：根据$isbn$查询books表中的第一条author，打印查询结果并将其返回。,"If $isbn$ is empty, return False. Execute the SQL statement through $con$, which reads: Query the first 'author' in books table beased on the $isbn$, print the query result and return it."
13997,"def get_player_for_username(conn, username):
	sql = ""SELECT is_admin FROM users WHERE username =: username""
	result = conn.execute(sql,{""username"":username}).fetchall()
	return result",设置SQL语句为：通过$username$查询users表中的is_admin。使用$conn$执行SQL获取所有数据并返回。,Set the SQL statement: Query the is_admin in the users table through $username$. Use $conn$ to execute SQL to get all the data and return.
13673,"from flask import render_template
def get_flight(conn, origin, duration):
	query = ""select destination from flights where origin=:origin and duration=:duration""
	res = conn.execute(query,{""origin"":origin,""duration"":duration}).fetchone()
	return render_template(""added.html"",res=res)","设置SQL：根据$origin$和$duration$查询flights表中的destination信息。使用$conn$执行SQL并获取第一条数据。返回渲染后的""added.html""页面，并将查询结果传给res参数。","Set SQL: query destination information in the flights where origin is $origin$ and duration is $duration$. Use $conn$ to execute the SQL and get the first data. Return the rendered ""added.html"" page and passe the query result to the RES parameter."
14128,"from sqlalchemy import create_engine
def getdata(db_conn_uri_default, name):
	engine_default = create_engine(db_conn_uri_default)
	conn = engine_default.connect()
	rec = conn.execute(""select uri from database where name =:name"",{""name"":name}).fetchone()
	conn.close()
	return rec",通过$db_conn_uri_default$获取数据库引擎并建立连接。执行SQL语句（根据$name$获取database中的第一条uri），关闭数据库连接，将获取的所有数据返回。,"Get the database engine via $db_conn_uri_default$ and establish a connection. Execute the SQL statement (get the first uri in the database based on $name$), close the database connection, and return all the obtained data."
13394,"from sqlalchemy import create_engine
def get_company_id_by_name(call_center,name_company):
	engine = create_engine(call_center, echo=True)
	conn = engine.connect()
	result=conn.execute(""SELECT * FROM companies WHERE name_company=:name_company"",{""name_company"":name_company}).fetchall()
	ids = []
	for i in result:
		ids.append(i[0])
	return ids[0]",通过$call_center$获取数据库引擎，其中echo参数设置为True，并建立连接。执行SQL语句（根据$name_company$查询companies表中所有列），并获取所有数据，用for循环遍历获取的所有查询结果，将每条数据的第0个元素插入一个list中，并返回这个list的第0个元素。,"Get the database engine through $call_center$, where the echo parameter is set to True, and a connection is established. Execute the SQL statement (query all the columns in the companies table according to $name_company$), get all the data, use for loop to traverse all obtained query results, insert the 0th element of each piece of data into a list, and return the 0th element of the list."
13998,"from flask import jsonify
def isbn_check(conn, isbn):
	sql = ""SELECT average_score FROM books WHERE isbn =: isbn""
	api_return = conn.execute(sql,{""isbn"":isbn}).fetchall()
	return jsonify(api_return)",将SQL语句设置为：通过$isbn$查询books表中的average_score，使用$conn$执行SQL获取所有数据，使用jsonify返回获取到的数据。,"Set the SQL statement: Query the average_score in the books table through $isbn$, use $conn$ to execute SQL to get all the data, and use jsonify to return the obtained data."
11696,"def get_indetify(conn,name):
	result = conn.execute(""select id from POLYNOME_CORRECTION where name=:name"",{""name"":name}).fetchall()
	instruments = []
	for ele in result: 
		instruments.append(ele[0])
	return instruments",利用$conn$执行SQL（根据$name$获取POLYNOME_CORRECTION表中的id列）并获取所有数据，然后使用for循环对查询结果的每一项的第0个元素转化为list，最后返回list内容,"Execute SQL with $conn$ (get the id column in the POLYNOME_CORRECTION table according to $name$), get all the data, then use for loop to convert the 0th element of each item of the query result into list, and finally return the list content."
11513,"from sqlalchemy import create_engine
def get_mistakes(stock_base, tick):
	engine = create_engine(stock_base) 
	query = ""SELECT * FROM mistakes WHERE tick = :tick""
	item = engine.execute(query, {""tick"": tick}).fetchall()
	return item",通过$stock_base$获取数据库引擎。设置SQL语句为：根据$tick$查询mistakes表中的所有列，执行SQL语句获取所有数据并返回查询到的所有信息。,"Get the database engine through $stock_base$. Set the SQL statement to: Query all columns in the mistakes table based on $tick$, execute the SQL statement to get all the data and return all the queried information."
13390,"from sqlalchemy.sql import select
def questionsTo(con,QuestionAnswer,answer):
	res=[]
	clause = select(QuestionAnswer).where(QuestionAnswer.c.answer == answer)
	for row in con.execute(clause):
		res.append(row['question'])
	return res",根据python表达式设置SQL：（根据$answer$查询$QuestionAnswer$表中所有列）。通过$con$执行SQL并获取所有数据，使用for循环遍历每一项查询结果的'question'字段，并存储为list，最后返回这个list。,"Set SQL based on the python expression (query all columns in the $QuestionAnswer$ table based on $answer$). Execute SQL with $con$, get all the data, use for loop to traverse the 'question' field of each query result, store it as list, and return the list."
13735,"def index(conn,id):
	flights = conn.execute(""select * from flights where id = :id"",{""id"":id}).fecthall()
	st = []
	for i in flights:
		st.append(i[0])
	print(st)",使用$conn$执行SQL（根据$id$查询flights表中所有列），并获取所有查询结果，用for循环遍历获取的所有查询结果，将每条数据的第0个元素插入一个list中，并输出这个list。,"Use $conn$ to execute SQL (query all columns in the flights table based on $id$), get all the query results, use for loop to traverse all the obtained query results, insert the 0th element of each piece of data into a list, and output the list."
13659,"from flask import render_template, request, redirect, url_for
def check_login(db,name,pws):
	if request.method == 'POST':
		sqlsection = ""SELECT * FROM users WHERE name = :name AND password = :password""
		row = db.execute(sqlsection, {""name"": name,""password"":pws}).fetchall()
		if row:
			return redirect(url_for(""search""))
	elif request.method == 'GET':
		return render_template(""login.html"")","如果request的请求方法为POST，则执行如下代码：设置SQL（当name为$name$，且password为$pws$时查询users表中的所有列）；使用$db$执行SQL并获取所有数据；如果查询数据存在，则使用redirect和url_for重定向到""search""。否则如果request请求方法为GET则返回渲染后的""login.html""。","If the request method is POST, execute the following code: set SQL (query all columns in the users table where name is $name$ and password is $pws$) ; execute SQL with $db$ and get all the data; if the query data exists, redirect and url_for to ""search"". Otherwise, if the request method is GET, the rendered ""login.html"" is returned."
13175,"import sqlalchemy
def drop_db(email_settings,number):
	engine = sqlalchemy.create_engine(email_settings)
	res=engine.execute('select INDEX from akamaiCache where number=:number',{""number"":number}).fetchall()
	return res",使用$email_settings$获取数据库引擎并执行SQL（根据$number$获取akamaiCache表中的INDEX列）并获取所有数据，最后返回查询结果,"Get the database engine using $email_settings$, execute the SQL (get the INDEX column in the akamaiCache where number is $number$) , get all the data, and return the query results."
13040,"from flask import request,render_template
def result_title(conn,title):
	if request.method==""POST"":
		cur = conn.cursor()
		books = cur.execute(""SELECT * FROM book WHERE title=:title"", {""title"": title}).fetchall()
		cur.close()
		if list(books) is not None:
			return render_template('search_results.html',books=list(books))","如果request请求方法为""POST""，则执行如下代码：使用$conn$获取游标；使用游标执行SQL（根据$title$查询book表中的所有列）并获取所有数据；关闭游标；如果查询结果的list类型不为None，则返回渲染后的'search_results.html'，并将查询结果传递给books参数。","If the request method of request is ""POST"", execute the following code: Use $conn$ to get the cursor; use the cursor to execute SQL (query all columns in the book table based on $title$) and get all the data; close the cursor; if the list type of the query result is not None, return the rendered 'search_results.html', and pass the query result to the books parameter."
13218,"def get_user(db):
	connection = db.connect()
	user_results = connection.execute(""SELECT * FROM query_users"").fetchall()
	assert len(user_results) != 0
	connection.close()
	return user_results",使用$db$连接数据库，执行SQL语句（查询query_users的所有列），并获取所有数据。设置断言判断返回结果长度不等于0。关闭数据库连接，最后返回所有数据。,"Connect to the database using $db$, execute the SQL statement (query all columns in query_users) , and get all the data. Set the assertion that the length of the return result is not equal to 0. Close the database connection and finally return all data."
13667,"from sqlalchemy.sql import select
def get_product(session, E_product, id_product):
	try:
		product = session.execute(select([E_product.name]).where(E_product.id_product==id_product)).fetchone()
		session.close()
		return product
	except:
		return False",尝试性使用$session$执行python表达式方式的SQL（根据$id_product$查询$E_product$表中的name）并获取第一条数据。关闭$session$并返回查询结果。如果出现异常则返回False。,Try using $session$ to execute the python expression SQL (query the name in the $E_product$ by where id_product is $id_product$) and get the first data. Close $session$ and return the query result. Return False if an exception occurs.
13327,"def get_page(conn,label):
	if label:
		comment = conn.execute(""SELECT * FROM data_table WHERE label=:label"",{""label"":label}).fetchall()
		print(comment)
		return comment",如果label不为空，使用$conn$执行SQL（根据$label$查询data_table表中所有列），并获取所有查询结果，将查询结果打印并返回。,"If label is not empty, use $conn$ to execute SQL (query all columns in the 'data_table' table based on $label$), get all the query results, print them and return."
11409,"def loginC(conn, username):
	sql = ""SELECT password FROM manager WHERE username =: username""
	passwords = conn.execute(sql,{""username"":username}).fetchall()
	if len(passwords)>0:
		return passwords
	else:
		print('Username does not exists, please sign up')
		return '/signup'","设置SQL（根据$username$查询manager表中password列），根据$conn$执行SQL并获取所有查询结果，如果查询结果的长度大于0，将数据返回。否则打印'Username does not exists, please sign up'，返回'/signup'。","Set SQL (query the password column in the manager table based on $username$), execute SQL based on $conn$ and get all the query results. if the length of the query result is greater than 0, return the data. Otherwise print 'Username does not exists, please signup' and return '/signup'."
13330,"from flask import request
def login(db,usuario,password):
	if request.method == ""POST"":
		cuenta = db.execute(""SELECT * FROM usuarios WHERE usuario=:usuario AND password=:password"",{""usuario"": usuario, ""password"": password}).fetchone()
		db.close()
		return cuenta","如果请求方式为""POST""，使用$db$执行SQL（根据$usuario$和$password$查询usuarios表中所有列），并获取第一行数据，关闭连接，将查询结果返回。","If the request method is ""POST"", use $db$ to execute SQL (query all columns in the usuarios table based on $usuario$ and $password$), get the first row of data, close the connection, and return the query results."
13901,"from flask import render_template, request, redirect
def search(conn, username):
	if request.method == ""GET"":
		return render_template(""login.html"")
	elif request.method == ""POST"":
		user = conn.execute(""SELECT * FROM users WHERE username = :username"", {""username"":username}).fetchone()
		if user == None:
			return render_template(""error.html"")
		return redirect(""/search"")","如果request模块发送请求的方式为GET，则渲染并返回""login.html""。如果request模块发送请求的方式为POST，通过$conn$执行SQL（通过$username$查询users中的所有列）获取第一条数据，若执行结果为空，渲染并返回""error.html""；否则使用redirect返回""/search""。","If the request module sends the request in a GET method, return the rendered ""login.html"". If the request module sends the request in a POST method, use $conn$ to execute SQL (query all columns in the users table through $username$) and get the first piece of data. If the execution result is empty, render and return ""error.html""; otherwise, use redirect to return ""/ search""."
13013,"def getTeams(conn,limit):
	request = ""SELECT * FROM teams where rownum < {}"".format(limit)
	result = conn.execute(request).fetchall()
	return result",使用字符串format的方法设置SQL（查询当rownum为$limit$时teams表中的所有列）。使用$conn$执行SQL并获取所有数据。最后返回查询结果。,"Use the method of the string format to set SQL(query all columns in the teams table when rownum is $limit$). Use $conn$ to execute SQL and get all the data. Finally, return the query result."
13445,"from flask import render_template,request
def review(db, isbn):
	if request.method ==""GET"":
		row = db.execute(""SELECT title FROM books WHERE isbn = :isbn"", {""isbn"":isbn}).fetchone()
		return(render_template(""review.html"",isbn=isbn,title=row.title))
	else:
		return False","如果请求的方法为""GET""，则使用$db$执行SQL（根据$isbn$获取books表中的title列）并获取第一条数据，返回渲染后的""review.html""，其中isbn参数为$isbn$列，titile参数为查询结果的title列，否则返回False","If the requested method is ""GET"", then use $db$ to execute the SQL (get the title column in the books table based on $isbn$), get the first piece of data and return the rendered ""review.html"", where the isbn parameter is the $isbn$ column and the titile parameter is the title column of the query results; otherwise return False."
11106,"def query_record(conn,template_id,email_address):
	record = conn.execute(""SELECT email_id FROM sent_backfill WHERE template_id=:template_id AND email_address=:email_address"",{""template_id"":template_id,""email_address"":email_address}).fetchall()
	return record",运用$conn$执行SQL（根据$template_id$和$email_address$查询sent_backfill表中的email_id）并获取所有数据。最后返回查询结果。,"Execute SQL (query the email_id in the sent_backfill where the id of template is $template_id$ and the address of email is $email_address$) with $conn$ and get all the data. Finally, the query results are returned."
13704,"from sqlalchemy import create_engine
def get_data(uri, date, market, schema):
	conn = create_engine(uri)
	result = conn.execute(""SELECT * FROM table where date = :date and market = :market and schema = :schema"",{""date"":date,""market"":market,""schema"":schema}).fetchall()
	return result",根据$uri$创建数据库引擎。执行SQL（根据$date$，$market$和$schema$查询table中的所有列）并获取所有数据。最后返回查询结果。,"Create a database engine based on $uri$. Execute SQL (query all columns in 'table' table based on $date$, $market$ and $schema$), get all the data, and finally return the query results."
13462,"def select_isbn(conn, title):
	sql_isbn = ""SELECT isbn FROM books_table WHERE title =: title""
	results = conn.execute(sql_isbn,{""title"":title}).fetchall()
	isbns = []
	for isbn in results:
		isbns.append(isbn)
	return isbns",通过$conn$执行SQL（根据$title$获取books_table表中的isbn列）并获取所有数据，然后使用for循环对查询结果的每一项存储为list，最后返回list内容,Execute the SQL through $conn$ (get the isbn column in the 'books_table' table based on $title$) and get all the data. Use for loop to store each item of the query results as list and finally return the contents of the list.
13827,"from flask import request
def login(conn, email,psd):
	if request.method == ""POST"":
		result = conn.execute(""SELECT * FROM users WHERE email = :email AND psd = :psd"", {""email"": email, ""psd"": psd}).fetchone()
		if result == None:
			return False
		return result",如果request模块通过post方式发送请求，则使用$conn$连接执行SQL（通过$email$和$psd$查询users中的列，并获取第一条数据。如果查询结果为空，返回False；否则返回查询结果。,"If the request module sends a request by post, use the $conn$ connection to execute the SQL (query the columns in users through $email$ and $psd$ and get the first piece of data. If the query result is empty, return False; otherwise return the query result."
11424,"from sqlalchemy.sql import select
def get_source(conn, cookies, mac):
	sql = select([cookies.c.baseDomain]).where(cookies.c.client_mac == mac)
	domains = conn.execute(sql).fetchall()
	results = [t[0] for t in domains]
	for cookie in results:
		print(cookie)",根据python表达式设置SQL：（根据client_mac为$mac$查询$cookies$表中baseDomain列）。通过$conn$执行SQL并获取所有数据，使用for循环遍历，并将每一项查询结果的第0个元素存储为list，最后使用for循环打印这个list。,"Set SQL based on the Python expression (query the baseDomain column in the $cookies$ table based on 'client_mac': $mac$). Execute SQL with $conn$ and get all the data, and use for loop to iterate through it and store the 0th element of each query result as list. Finally use for loop to print the list."
11272,"from sqlalchemy.sql import select
def getEmail(words,pkid,conn):
	query_word = select([words.c.word]).where(words.c.id == pkid)
	found_word = conn.execute(query_word)
	result_word = found_word.fetchone()
	return result_word[0]",使用$conn$，根据python表达式的方式执行SQL（获取$words$表中id为$pkid$的word列）并获取第一行数据，最后返回查询结果的第0个元素,"Use $conn$ to execute SQL based on the Python expression (get the word column with 'id': $pkid$ in $words$ table), get the first row of data, and finally return the 0th element of the query result."
11600,"from sqlalchemy.sql import select
def get_info(conn,contract_table,conId):
	s = select(contract_table.c.name).where(contract_table.c.conId == conId)
	result = conn.execute(s).fetchall()
	return [dict(row) for row in result]",使用Python表达式的方式设置SQL语句，其内容为：通过$conId$获取$contract_table$中的全部name，使用$conn$执行SQL语句获取数据，将查询结果每一项转化为dict存储为list并返回。,"Use the Python expression to set the SQL statement: Get all the name in the $contract_table$ through $conId$, use the $conn$ to execute the SQL statement to get the data, convert each item of the query result to dict, store it as list, and return."
11357,"from sqlalchemy import create_engine
def db_connect(TimeTable,summary):
	engine = create_engine(TimeTable)
	laten = engine.execute('SELECT time FROM Comments WHERE summary =:summary', {""summary"": summary}).fetchone()
	return laten",通过$TimeTable$获取数据库引擎并建立连接。执行SQL语句（根据$summary$查询Comments表中time列的第一条数据），将查询结果返回。,Get the database engine and establish a connection through $TimeTable$. Execute the SQL statement (query the first piece of data in the time column of the Comments table based on $summary$) and return the query results.
13103,"from flask import request
from flask import render_template
def index(conn,isbn):
	if request.method == ""GET"":
		return render_template(""search.html"")
	else:
		results = conn.execute(""SELECT * FROM books WHERE isbn = :isbn"", {""isbn"": isbn}).fetchall()
		return render_template(""search-results.html"",results=results)","如果请求的方法为""GET""，则返回渲染后的""search.html""，否则使用$conn$执行SQL（根据$isbn$获取books表中的所有信息）并获取所有数据，返回渲染后的""search-results.html""，其中results参数为查询结果","If the requested method is ""GET"", return ""search.html"" after rendering, otherwise execute SQL with $conn$ (to GET all the information in the books where isbn is $isbn$) and GET all the data, return ""search-results.html"" after rendering, where the results parameter is the result of the query."
13365,"def get_schema(conn,schema):
	query = ""SELECT table_name FROM tables WHERE schema={}"".format(schema)
	cursor = conn.cursor()
	cursor.execute(query)
	tables = []
	for table in cursor.fetchall():
		tables.append(table[0])
	return tables","使用format字符串匹配方法设置sql（根据$schema$查询tables表中table_name列）,使用$conn$获取游标并执行SQL，用for循环遍历获取的所有查询结果，将每条数据的第0个元素插入一个list中，并返回这个list。","Use the format string matching method to set the sql (query the table_name column in the 'tables' table based on $schema$), use $conn$ to get a cursor and execute SQL, use for loop to traverse all the obtained query result, insert the 0th element of each piece of data into a list, and return the list."
11611,"from sqlalchemy import create_engine
def get_target(conn_string,id,name):
	print(conn_string)
	engine = create_engine(conn_string)
	target = engine.execute(""select * from flowbot_requests where id=:id and name=:name"",{""id"":id,""name"":name}).fetchall()
	if target!=None:
		return target",打印$conn_string$，再使用$conn_string$获取数据库引擎，执行SQL（根据$id$和$name$获取flowbot_requests表中的所有列）并获取所有数据，如果查询结果不为空，则返回查询结果,"Print $conn_string$, and then use $conn_string$ to get the database engine, execute SQL (get all the columns in the flowbot_requests table based on $id$ and $name$) and get all the data. If the query result is not empty, return the query result."
14098,"def main(conn, title):
	rs = conn.execute(""select year from books where title =:title"",{""title"": title}).fetchone()
	conn.close()
	return rs",使用$conn$执行SQL语句：根据$title$查询books表中的第一条year数据，确保$conn$关闭，返回查询结果。,"Use $conn$ to execute the SQL statement: Query the first piece of year data in the books table based on $title$, make sure that $conn$ is turned off and return the query results."
13495,"def select_fullname(engine, id):
	conn = engine.connect()
	fullname_sql = ""SELECT fullname FROM users WHERE id =: id""
	result = conn.execute(fullname_sql,{""id"":id}).fetchall()
	print(result)",通过$engine$连接数据库并执行SQL（根据$id$获取users表中的fullname列）并获取所有数据，最后打印查询结果,Connect to the database through $engine$ and execute the SQL (get the fullname column in the users table based on $id$) and get all the data. Finally print the query results.
11438,"from flask import request,render_template
def getteacher(conn, teacher):
	if request.method==""POST"":
		sql = ""SELECT * FROM stu_essay WHERE teacher =: teacher""
		rows = conn.execute(sql,{""teacher"":teacher}).fetchall()
		for row in rows:
			print(row)
		return render_template(""evaluate.html"", essays=rows)
	return render_template(""teacher.html"")","如果请求方式为""POST""，设置SQL（根据$teacher$查询stu_essay表中所有列），根据$conn$执行SQL并获取所有查询结果，用for循环遍历获取的所有查询结果，并打印每一条数据。返回渲染后的""evaluate.html""页面，参数essays设置为查询结果。否则返回渲染后的""teacher.html""页面。","If the request method is ""POST"", set SQL (query all columns in the stu_essay based on $teacher$), execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all the obtained query results, and print each piece of data. Return the rendered ""evaluate.html"" page with the 'essays' parameter setting as the query result. Otherwise, return the rendered ""teacher.html"" page."
11100,"from flask import request,render_template
def get_login(conn,email):
	if request.method == ""POST"":
		data=conn.execute(""SELECT * FROM user_info WHERE email=:email"",{""email"":email}).fetchall()
		for d in data:
			passw = d.password
			userid = d.user_id
			print(passw,userid)
	return render_template(""login.html"")","如果request请求方法为""POST""，则使用$conn$执行SQL（根据$email$查询user_info表中的所有列）并获取所有数据。对于查询结果中的每一项，打印其中的password和user_id属性。最终在request请求方法判断之外返回渲染后的""login.html""","If the request method of request is ""POST"", use $conn$ to execute SQL (query all columns in the user_info table based on $email$) and get all the data. For each item in the query result, print the password and user_id properties. Finally, return the rendered ""login.html"" in addition to the judgment of the request method of request."
13234,"def select_value(conn, aid):
	if aid is None:
		return None
	try:
		sql = ""SELECT * FROM tattributes WHERE id =: aid""
		results = conn.execute(sql,{""aid"":aid}).fetchall()
		return results
	except:
		return None",如果$aid$为None，则返回None。尝试设置SQL语句（查询当id等于$aid$时，tattributes表中的的所有列）。使用$conn$执行SQL语句，获取所有数据并返回。如果出现异常，则返回None。,"If $aid$ is None, then return None. Try to set up the SQL statement (query all columns in the tattributes when id equals $aid$) . Execute the SQL statement with $conn$, get all the data and return. If an exception occurs, return None."
11609,"from sqlalchemy import create_engine
def get_models(host,num):
	engine = create_engine(host)
	models = engine.execute(""select * from availability2 where stationNUM=:num"",{""num"":num}).fetchall()
	print(models)",通过$host$获取数据库引擎，执行SQL（根据stationNUM为$num$获取availability2表中所有列）并获取所有数据，最后打印查询结果,"Get the database engine through $host$, execute SQL (get all the columns in the availability2 table when stationNUM is $num$), get all the data, and finally print the query result."
13023,"from sqlalchemy import create_engine
def getAbstract(mssql,PageNo,PageSize):
	engine = create_engine(mssql)
	con = engine.connect()
	sql = ""SELECT * FROM mytable WHERE PageNo =:PageNo AND PageSize =:PageSize""
	rows = con.execute(sql,{""PageNo"":PageNo,""PageSize"":PageSize}).fetchall()
	con.close()
	return rows",使用$mssql$创建数据库引擎并获取连接。设置SQL（根据$PageNo$和$PageSize$查询mytable表中的所有列）并获取所有数据。使用数据库连接执行SQL并获取所有数据。最后关闭连接并返回查询结果。,"Use $mssql$ to create the database engine and get the connection. Set up SQL (query all columns in the mytable table based on $PageNo$ and $PageSize$) and get all the data. Use the database connection to perform the SQL and get all the data. Finally, close the connection and return the query results."
11036,"from flask import jsonify
def book_api(conn,isbn):
	result = conn.execute(""SELECT AVG(rate) FROM reviews WHERE isbn=:isbn"",{""isbn"":isbn}).fetchone()
	if result is None:
		return jsonify({""error"":""Invalid ISBN""})
	else:
		return result","使用$conn$执行SQL（根据$isbn$查询reviews表中rate的平均值）并获取第一条数据。如果查询的结果为None，用jsonify返回{""error"":""Invalid ISBN""}信息，否则直接返回查询结果。","Use $conn$ to execute SQL (query the average of rate in the reviews table based on $isbn$) and get the first piece of data. If the result of the query is None, return {""error"": ""Invalid ISBN""} information with jsonify. Otherwise, directly return the query result."
11204,"import pandas as pd
from sqlalchemy import create_engine
def execute_inquery(conn_string,name):
	engine = create_engine(conn_string, echo=False)
	with engine.connect() as conn:
		sql=""select goods from shop where name=:name""
		res = conn.execute(sql,{""name"":name})
		res = pd.DataFrame(data=res.fetchall(),columns=[key.upper() for key in res.keys()])
		return res",通过$conn_string$获取数据库引擎并设置echo参数为False，使用with语句获取连接，执行SQL（通过$name$查询shop表中的goods列数据），将查询后的结果存储为DataFrame的data参数，设置columns参数为执行SQL后的keys中的每一项元素，并且每一项元素的字母采用大写形式，最后并返回数据。,"Get the database engine via $conn_string$ and set the echo parameter to False, use the with statement to get the connection, execute SQL (query the goods column data in the shop table via $name$), store the query result as the data parameter of DataFrame, set 'columns' parameter as every element in 'keys' after excecuting SQL, capitalize the letters of each element, and finally return the data."
11087,"def test_row_overload(connection,property):
	res_item =connection.execute(""SELECT item FROM item_property WHERE property=:property"",{""property"":property}).fetchall()
	assert len(res_item)!=0
	for row in res_item:
		print(row)",使用$connection$执行SQL（根据$property$查询item_property表中的item信息）并获取所有数据。设置断言判断查询结果长度不为0。使用for循环打印查询结果中的每一项元素。,Use $connection$ to execute SQL (query the item information in the item_property table based on $property$) and get all the data. Set the assertion to determine that the query result length is not 0. Use for loop to print each element in the query result.
13088,"from flask import jsonify
def getstatecode(conn,city):
	rows = conn.execute(""SELECT statecode FROM cities WHERE city=:city"", {""city"": city}).fetchall()
	results = []
	for row in rows:
		city = dict(row)
		results.append(city)
	return jsonify(results)",使用$conn$执行SQL（根据$city$查询cities表中的statecode）并获取所有数据。使用for循环的方式将查询结果中每一项转化为dict并存入list，最后返回jsonify处理后的list。,Use $conn$ to execute SQL (query the statecode in the cities table based on $city$) and get all the data. Use for loop to convert each item in the query result to dict and store it in list and finally return the list after being processed by jsonify.
13441,"def get_student(conn, x):
	stmt = ""SELECT * FROM student WHERE name =: x""
	result = conn.execute(stmt,{""x"":x})
	if result.rowcount > 0:
		row =result.fetchone()
		return row
	else:
		return None",通过$conn$执行SQL（根据name为$x$获取student表中的所有列），如果查询结果的行数大于0，则获取第一条数据，返回这条数据，否则返回None,"Execute SQL through $conn$ (get all columns in the student table with name as $x$). If the number of rows of the query results is greater than 0, then get the first piece of data and return it; otherwise return None."
13666,"from sqlalchemy import create_engine
from flask import jsonify
def getyears(postgres,date):
	engine = create_engine(postgres)
	years = engine.execute(""select year from stock_data where date=:date"",{""date"":date}).fetchall()
	return jsonify(years)",根据$postgres$创建数据库引擎，并根据该引擎执行SQL（根据$date$查询stock_data表中的year信息）并获取所有数据。返回序列化后的查询结果。,Create the database engine from $postgres$ and execute the SQL (query the year information in the stock_data where date is $date$) from that engine and get all the data. Return the result of a serialized query.
11040,"def tearDown(engine,heat):
	conn = engine.connect()
	heats = conn.execute(""SELECT db_uri FROM DATABASE_NAME WHERE heat=:heat"",{""heat"":heat}).fetchall()
	conn.close()
	return [heat[0] for heat in heats]",使用$engine$获取连接。执行SQL（根据$heat$查询DATABASE_NAME表中所有的db_uri信息）。关闭连接，将查询结果用list分开，存储每一项的第0个元素并返回。,"Use $engine$ to get the connection. Execute SQL (query all the db_uri information in the DATABASE_NAME table based on $heat$). Close the connection, separate the query results with list, store the 0th  element of each item and return."
13124,"def get_orders(conn, kwargs):
	request_orders =""SELECT * FROM FRC_ORDERS where kwargs=:kwargs""
	result_orders = conn.execute(request_orders,{""kwargs"":kwargs}).fetchall()
	if result_orders:
		return result_orders",使用$conn$执行SQL（根据$kwargs$获取FRC_ORDERS表中的所有列）并获取所有数据，如果查询结果为真，则返回查询结果,"Execute SQL (get all columns in the FRC_ORDERS where kwargs is $kwargs$) with $conn$ and get all the data, and return the query results if they are true."
11093,"from flask import jsonify
def book_get(conn,iduser):
	again_res=conn.execute(""SELECT * FROM users WHERE id=:iduser"",{""iduser"":iduser}).fetchall()
	return jsonify(again_res)",使用$conn$执行SQL（查询当id为$iduser$时，users表中的所有信息）并获取所有数据。最后使用jsonify返回查询结果。,"Use $conn$ to execute SQL (query all information in the users table when id is $iduser$) and get all the data. Finally, use jsonify to return the query result."
13512,"from sqlalchemy import create_engine
def teardownDb(db_root_url,sms):
	connection = create_engine(db_root_url).raw_connection()
	cursor = connection.cursor()
	res=cursor.execute('select * from SCHEMA where sms=:sms',{""sms"":sms}).fetchall()
	connection.close()
	return res",通过$db_root_url$获取数据库引擎并建立连接。执行SQL语句（根据$sms$查询SCHEMA表中所有列），并获取所有数据，关闭连接，将查询结果返回。,"Get the database engine and establish a connection through $db_root_url$. Execute the SQL statement (query all the columns in the SCHEMA table according to $sms$), get all the data, close the connection, and return the query results."
14131,"from sqlalchemy.sql import select
from sqlalchemy import create_engine
def getUserIntoDatabase(URI,user,stringUserName):
	engine = create_engine(URI)
	connection = engine.connect()
	stm = select([user.c.userID]).where(user.c.userName==stringUserName)
	res = connection.execute(stm).fetchall()
	return res",运用$URI$获取数据库引擎并建立连接。使用Python表达式的方式设置SQL语句（查询$user$表中userName为$stringUserName$的userID信息）。执行SQL获取全部信息并将其返回。,Use $URI$ to get the database engine and establish a connection. Use the Python expression to set up the SQL statement (query the userID information in the $user$ table where userName is $stringUserName$). Execute SQL to get all the information and return.
14148,"def get_price(conn):
	sql_query = 'SELECT * FROM m_table'
	res = conn.execute(sql_query).fetchone()
	return res",设置SQL语句：查询m_table表中的所有列，通过$conn$执行SQL获取第一条数据并将其返回。,"Set up SQL statement: Query all columns in m_table table, execute SQL by $conn$ to get the first piece of data and return."
14052,"from flask import render_template
def confirm(conn,name):
	res = conn.execute(""select f_id from passengers where name=:name"",{""name"":name}).fetchall()
	conn.close()
	return render_template(""confirm.html"", res=res)","通过$conn$查询passengers表中name为$name$的所有f_id，确保$conn$关闭，渲染并返回""confirm.html"", 其中res参数为查询结果。","Query all f_id in the passengers table that the 'name' is $name$ through $conn$, make sure that $conn$ is turned off, render and return ""confirm.html"", where the res parameter is the query result."
13841,"from flask import jsonify
def get_posts_byid(conn, classid):
	query = ""SELECT * FROM posts WHERE classid ={}"".format(classid)
	res = conn.execute(query).fetchall()
	posts = [dict(row) for row in res]
	return jsonify(posts)","设置SQL语句（使用format()函数格式化输出字符串,通过字符串$classid$查询posts表中的所有列），使用$conn$连接执行SQL语句获取全部数据，将查询结果每一项转化为dict存储为list，使用jsonify将list内容返回。","Set up SQL statement (use format() function to format the output string, query all columns in the posts table by string $classid$) and use $conn$ connection to execute SQL statement to get all the data. Convert each item of query results into dict and store it as list. Use jsonify to return the contents of the list."
13083,"def create_db(conn):
	texts = conn.execute(""SELECT test FROM test_table"").fetchall()
	return [dict(row) for row in texts]",使用$conn$执行SQL（查询test_table中的test）并获取所有数据。将查询结果中的每一项转化为dict并返回。,Use $conn$ to execute SQL (query test in test_table) and get all of data. Convert each item in the query result to dict and return.
11448,"def select_value(conn, name):
	try:
		sql = ""SELECT * FROM stockdata WHERE name =: name""
		results = conn.execute(sql,{""name"":name}).fetchall()
		return results
	except:
		print(""fail"")","尝试设置SQL（根据$name$查询stockdata表中所有列），使用$conn$执行sql并获取所有数据，返回查询数据。如果执行时出现异常，则打印""fail""。","Try to set up SQL (query all columns in the stockdata table based on $name$), use $conn$ to execute sql, get all the data, and return the query data. If an exception occurs during execution, print ""fail"". "
11418,"from sqlalchemy.sql import select
def getUndefModMassesFromTopResults(conn, fraction_id, results):
	stmt = select([results.c.mods]).where(results.c.fraction_id == fraction_id)
	response = conn.execute(stmt)
	undef_mods = [] 
	for row in response:
		undef_mods.append(row[0])
	return undef_mods",根据python表达式设置SQL：（根据$fraction_id$查询$results$表中mods列）。通过$conn$执行SQL并获取所有数据，使用for循环遍历每一项查询结果，并将每条数据的第0个元素存储为list，最后返回这个list。,"Set SQL based on the Python expression: (query mods column in $results$ table based on $fraction_id$). Execute the SQL with $conn$ and get all the data. Use for loop to iterate through each query result and store the 0th element of each data as list, and finally return the list."
11680,"def get_duration(db,origin,dest):
	sql = ""select duration from flights where origin=:origin and destination=:dest""
	dur = db.execute(sql,{""origin"":origin,""dest"":dest}).fetchone()
	return dur",使用$db$执行SQL(获取flights表中origin为$origin$和destination为$dest$的duration列)并获取第一条数据，最后返回查询结果,"Use $db$ to execute SQL (get the duration column in the flights table where origin is $origin$ and destination is $dest$), get the first piece of data, and finally return the query result."
13367,"def get_colleges(engine,id):
	sql = ""SELECT college FROM players WHERE id=%s""%id
	with engine.begin() as conn:
		res=conn.execute(sql).fetchall()
		l = [each[0] for each in res]
		return l","使用f字符串匹配方法设置sql（根据$id$查询players表中college列）,使用$engine$的begin方法执行SQL并获取所有查询结果，使用for循环将查询结果每一条的第0个元素存储为list并返回。","Use the f string matching method to set sql (query the college column in the players table according to $id$), use the begin method of $engine$ to execute SQL, get all the query results, use for loop to store the 0th element of each item of the query results as list and return."
13700,"def get_service(conn,name,duration):
	query = ""select service from spann where name=:name and duration=:duration""
	services = conn.execute(query,{""name"":name,""dura"":duration}).fetchall()
	assert len(services)>0
	return [dict(s) for s in services]",设置SQL：根据$name$和$duration$查询spann表中的service。使用$conn$执行SQL并获取梭鱼哦数据。设置断言判断查询结果长度大于0。最后将查询结果中每一项转化为dict并返回。,"Set SQL: query the service in the spann where name is $name$ and duration is $duration$. Execute SQL with $conn$ and get barracuda data. Set assertion to determine that the length of the query result is greater than 0. Finally, each item in the query result is converted to dict and returned."
13015,"def query_dish(conn,dishid):
	try:
		sql = ""SELECT DISH_DESCRIPTION FROM dish WHERE DISH_ID =:dishid""
		description = conn.execute(sql,{""dishid"":dishid}).fetchone()
		return description
	except:
		print('failed')",尝试性执行如下代码：设置SQL（查询当DISH_ID为$dishid$时dish表中的DISH_DESCRIPTION信息）；使用$conn$执行SQL并获取第一条数据；最后返回查询结果。如果出现异常，则打印'failed'信息。,"Try to execute the following code: Set up SQL (query the DISH_DESCRIPTION information in the dish table when DISH_ID is $dishid$); use $conn$ to execute SQL and get the first piece of data; and finally return the query result. If an exception occurs, the 'failed' information is printed."
11598,"from flask import render_template
def showHome(conn, username):
	categories = conn.execute(""SELECT * FROM Category WHERE username = :username"", {""username"": username}).fetchall()
	if categories is not None:
		return render_template('home.html', categories=categories)",使用$conn$连接执行SQL（通过$username$查询Category表中的全部列）并获取所有数据。如果查询结果不为空，渲染并返回'home.html'，其中categories参数为查询结果。,"Use the $conn$ connection to execute SQL (query all columns in the Category table through $username$) and get all the data. If the query result is not empty, render and return 'home.html', where the categories parameter is the query result."
14005,"from sqlalchemy.sql import select
def actualizar(session, E_cuenta,obj_cuenta):
	u = select(E_cuenta).where(E_cuenta.c.id_cuenta == obj_cuenta)
	res = session.execute(u).fetchall()
	session.close()
	return res",使用Python表达式的方式设置SQL语句，其内容为：查询$E_cuenta$表中id_cuenta为$obj_cuenta$的数据，通过$session$执行SQL语句并获取全部数据，确保$session$关闭，返回所有的查询结果。,"Use the Python expression to set up the SQL statement, which contains: Query the data in the $E_cuenta$ table where id_cuenta is $obj_cuenta$, execute the SQL statement through $session$ and get all the data, make sure that $session$ is closed and return all the query results."
11060,"def aggregate(conn,UsageMetric,service_id):
	values = conn.query(UsageMetric).filter(UsageMetric.service_id == service_id).all()
	conn.close()
	service_list=[]
	for i in values:
		service_list.append(i[0])
	return service_list",在ORM方式下，使用$conn$执行SQL（根据$service_id$查询$UsageMetric$表中所有信息）并获取所有数据，关闭连接。使用for循环将查询结果中每一项的第0号元素存入list中并返回。,"In ORM mode, use $conn$ to execute SQL (query all the information in the $UsageMetric$ table based on $service_id$), get all the data, and close the connection. Use for loop to store 0th element of each item in the query result into list and return."
13784,"def index(conn,type,posts):
	sql = conn.execute(""SELECT name FROM sqlite_master WHERE type = :type AND posts = :posts"",{""type"":type,""posts"":posts}).fetchall()
	for x in sql:
		print(x[0])
	return sql",利用$conn$执行SQL（根据$type$和$posts$查询sqlite_master表中name列），并获取所有查询结果，用for循环遍历获取的所有查询结果，将每条数据的第0个元素打印。返回查询结果。,"Execute SQL with $conn$ (query the name column in the sqlite_master table based on $type$ and $posts$), get all the query results, use for loop to traverse all the obtained query results, print the 0th element of each piece of data and return the query results."
11687,"def find_register(engine,fname,lname):
	query = ""select id from test_users where firstname=:fname and lastname=:lname""
	regs = engine.connect().execute(query,{""fname"":fname,""lname"":lname}).fetchall()
	return regs",利用$engine$连接数据库并执行SQL（根据firstname为$fname$和lastname为$lname$获取test_users表中的id列）并获取所有数据，最后返回查询结果,"Use $engine$ to connect the database and execute SQL (get the id column in the test_users table where firstname is $fname$ and lastname is $lname$), get all the data, and finally return the query result."
14154,"def main(con):
	books = con.execute(""select * from books"").fetchall()
	if not books:
		return None
	return books",通过$con$执行SQL语句：查询books表的所有列，并获取所有数据。如果没有获取到数据，返回None；否则返回获取的所有数据,"Execute SQL statement via $con$: Query all columns of books table and get all the data. If no data is obtained, return None; otherwise return all the obtained data."
11427,"from flask import render_template
def select_value(connection, callid):
	cur = connection.cursor()
	sql = ""SELECT * FROM call_list WHERE callid =: callid""
	result = cur.execute(sql,{""callid"":callid})
	call_lists = cur.fetchall()
	cur.close()
	if result > 0:
		return render_template('calllists.html', articles=call_lists)
	else:
		msg = 'No Call lists Found'
		return render_template('calllists.html', msg=msg)","通过$connection$建立游标，设置sql（根据$callid$查询call_list表中全部信息），执行SQL并获取所有查询结果，关闭连接，如果执行语句大于0，返回渲染后的'calllists.html',参数articles为查询结果。否则返回渲染后的'calllists.html',参数msg为'No Call lists Found'。","Create cursor by $connection$, set SQL (query all information in call_list table based on $callid$), execute SQL, get all the query results and close the connection. Uf execution statement is greater than 0, return rendered 'calllists.html' and the 'articles' parameter is the query result. Otherwise return the rendered 'calllists.html' and the msg parameter is 'No Call lists Found'."
13106,"def main(conn):
	flights = conn.execute(""SELECT origin, destination, duration FROM flights"").fetchall()
	if flights is None:
		print(""Error"")
		return
	for flight in flights:
		print(f""{flight.origin}  to {flight.destination}  lasting {flight.duration}  mintues"")","使用$conn$执行SQL（获取flights表中的origin, destination, duration三列信息）并获取所有数据，如果查询结果是None,则打印""Error""并直接返回，然后使用for循环对查询结果中的每一项打印，格式为查询结果的origin列到destination列持续duration列分钟","Use $conn$ to execute SQL (get the three columns of origin, destination, and duration in the flights) and get all the data, print ""Error"" and return directly if the query result is None, and then use the for loop to print each item in the query result. The origin column, formatted as the result of the query, continues for minutes in the duration column to the destination column"
13087,"from sqlalchemy.sql import select
def select_print(conn,table,my_all):
	try:
		table_result = conn.execute(select([table]).where(table.c.my_all == my_all)).fetchone()
		return table_result
	except Exception as e:
		print(e)
		return",尝试性执行如下代码：在python表达式方式下，使用$conn$执行SQL（根据$my_all$查询$table$中的所有信息）并获取第一条数据；返回查询结果。如果出现异常，则打印具体信息并直接返回。,"Try to execute the following code: use $conn$ to execute SQL (query all the information in $table$ based on $my_all$) under python expressions, get the first piece of data and return the query results. If an exception occurs, print the specific information and return it directly."
13364,"def main(conn,textsid):
	c=conn.execute(""SELECT * FROM lace_texts WHERE textsid=:textsid"",{""textsid"":textsid})
	for i in c.fetchall():
		print(i)",使用$conn$执行SQL（根据$textsid$查询lace_texts表中所有列），用for循环遍历获取的所有查询结果，并输出。,"Use $conn$ to execute SQL (query all columns in the lace_texts table based on $textsid$), use for loop to traverse all obtained query results, and output them."
11453,"def search(conn):
	query = ""SELECT max(orderid) FROM orders""
	db_result = conn.execute(query).fetchall()
	return list(db_result)[0]","设置sql（查询orders表中orderid列的最大值）,使用$conn$执行SQL并获取所有查询结果，返回转化为list格式的查询结果中的第0个元素。","Set SQL (query the maximum value of the orderid column in the orders table), use $conn$ to execute the SQL and get all the query results, and return the 0th element of the query results which is converted to list format."
14186,"def get_drinkers(engine):
	with engine.connect() as con:
		rs = con.execute('SELECT name, email, address, state FROM drinkers').fetchall()
		return [dict(row) for row in rs]","使用with语句根据$engine$连接数据库。查询drinkers表中的全部name,email,address和state数据，将查询结果每一项转化为dict存储为list并返回。","Use the with statement to connect to the database based on $engine$. Query all the name, email, address and state data in the drinkers table, convert each item of the query result to dict, store as list and return."
13100,"from sqlalchemy.sql import select
def test_quoted(connection,table,scorecolumn):
	s = select(table).where(table.c.scorecolumn == scorecolumn)
	result = connection.execute(s).all()
	return result",在python表达式方式下设置SQL：根据$scorecolumn$查询$table$中的所有信息。使用$connection$执行SQL并获取所有数据，最后返回查询结果。,"Set SQL in python expressions: Query all information in $table$ based on $scorecolumn$. Use $connection$ to execute the SQL and get all the data, and finally return the query results."
13190,"def get_show_id(conn,link):
	row = conn.execute(""SELECT id FROM show WHERE link= :link"",{""link"": link}).fetchone()
	return row[0][""id""]","使用$conn$执行SQL（根据$link$获取show表中的id列）并获取第一条数据，最后返回查询结果的第0个元素且列为""id""的内容","Execute the SQL with $conn$ (get the id column in the show where link is $link$) and get the first piece of data, then return the tenth element of the query result and list it as ""id""."
13648,"def select_professors(db, id):
	professors = db.execute(""SELECT * FROM professors WHERE id = :id"",{""id"":id}).fetchall()
	for p in professors:
		print(p)",使用$db$执行SQL（根据$id$查询professors表中的所有列）并获取所有数据。使用for循环打印查询结果中每一项数据。,Execute the SQL (query all columns in the professors table where id is $id$) using $db$ and get all the data. Use the for loop to print each item of data in the query results.
13293,"def select_origin(conn, destination):
	origin_sql = ""SELECT origin FROM TABLE WHERE destination =: destination""
	origin_results = conn.execute(origin_sql,{""destination"":destination}).fetchall()
	print(origin_results)
	return origin_results",使用$conn$执行SQL（根据$destination$获取TABLE表中origin列）获取所有数据后打印并返回,Execute the SQL (get the origin column in the TABLE where destination is $destination$) with $conn$ to get all the data printed and return.
11521,"from flask import jsonify
def api(conn, zipcode):
	zipcode = conn.execute(""SELECT * FROM zips WHERE zipcode = :zipcode"", {""zipcode"": zipcode}).fetchall()
	if zipcode == None:
		return jsonify({""error"": ""invalid zipcode""})
	else:
		return jsonify({""zip"": zipcode.zipcode,""place_name"": zipcode.city,""state"": zipcode.state})","使用$conn$连接执行SQL（通过$zipcode$查询zips表中的所有列）并获取所有数据。如果zipcode为空，则使用jsonify返回error信息:""invalid zipcode""。否则，使用jsonify返回zip信息：zipcode的zipcode属性，place_name信息：zipcode的city属性，state信息：zipcode的state属性。","Use $conn$ connection to execute SQL (query all columns in zips table through $zipcode$) and get all data. If zipcode is empty, use jsonify to return error message: ""invalid zipcode"". Otherwise, use jsonify to return zip information: zipcode attribute of zipcode, place_name information: city attribute of zipcode, state information: state attribute of zipcode."
13436,"from flask import render_template
def index(conn, id):
	sql = ""SELECT * FROM happiness WHERE id =: id""
	data = conn.execute(sql,{""id"":id}).fetchall()
	return render_template(""index.html"", data=data)","使用$conn$执行SQL（根据$id$获取happiness表中的所有列）并获取所有数据，最后返回渲染后的""index.html"",其中data参数为查询结果","Use $conn$ to execute the SQL (get all columns in the happiness table based on $id$) and get all the data. Finally return the rendered ""index.html"", where the data parameter is the query result."
13011,"from sqlalchemy import exc
def test_connection(db_api_connection):
	cursor = db_api_connection.cursor()
	try:
		data = cursor.execute(""SELECT * FROM mytables"").fetchall()
		cursor.close()
		return data
	except:
		raise exc.DisconnectionError()",使用$db_api_connection$获取游标。尝试用执行如下代码：根据游标查询mytables表中的所有列，并获取所有数据；关闭游标并返回查询结果。如果出现异常，则抛出DisconnectionError异常。,"Use $db_api_connection$ to get the cursor. Try executing the following code: query all columns in the mytables table based on the cursor and get all the data; close the cursor and return the query results. If an exception occurs, a DisconnectionError exception is thrown."
11606,"from flask import render_template
def personal_page(db,uname,pwd):
	users = db.execute(""SELECT * FROM users WHERE username=:uname AND password=:pwd"",{""uname"":uname,""pwd"":pwd})
	if users.rowcount == 0:
		return render_template(""error.html"", message=""No such user."")
	return render_template(""personal_page.html"", users=users)","使用$db$执行SQL（获取users表中username为$uname$和password为$pwd$的所有列），如果查询结果的行数为0，则返回渲染后的""error.html""，传入message参数为""No such user.""，最后返回渲染后的""personal_page.html""，其中users参数为查询结果","Use $db$ to execute SQL (get all the columns in the users table whose username is $uname$ and password is $pwd$). If the number of row of the query result is 0, return the rendered ""error.html"", the input message parameter is ""No such user."", and finally return the rendered ""personal_page.html"", where the users parameter is the query result."
13850,"def get_value(session,ProfilesData,gid):
	pdata = session.query(ProfilesData).filter(ProfilesData.gid == gid).first()
	session.close()
	if pdata:
		return True",通过$session$使用ORM方式查询$ProfilesData$表中gid为$gid$的第一条数据，确保$session$关闭，如果查询结果存在，返回True。,"Use the ORM method to query the first piece of data in the $ProfilesData$ table with gid as $gid$ through $session$. Make sure $session$ is closed. If the query result exists, return True."
13225,"from sqlalchemy.sql import select
def select_file(conn, db_table, Open):
	try:
		res = conn.execute(select([db_table]).where(db_table.c.incident_status == Open)).fetchall()
		return res
	except Exception as e:
		print(e)",尝试性在Python表达式的方式下，使用$conn$执行SQL语句（根据$Open$查询$db_table$表中的所有列），获取所有数据并返回。如果出现Exception异常，则打印具体的异常信息。," Try to execute an SQL statement with $conn$ (query all columns in the $db_table$ where Open is $Open$)  in a Python expression, get all the data, and return it. If an Exception Exception occurs, the specific Exception information is printed."
11683,"def get_consumer_ids(conn,id,pid):
	query = ""select consumer_id from allocation where id=:id and provider_id=:pid""
	cids = conn.execute(query,{""id"":id,""pid"":pid}).fetchall()
	if not cids:
		print(""no allocation records"")
	else:
		return cids","利用$conn$执行SQL（根据id为$id$和provider_id为$pid$获取allocation表中的consumer_id列）并获取所有数据，如果查询结果不为真，则打印""no allocation records""，否则返回查询结果","Execute SQL with $conn$ (get the consumer_id column in the allocation table where id is $id$ and provider_id is $pid$) and get all the data. If the query result is not true, print ""no allocation records""; otherwise, return the query result."
14173,"from flask import render_template,request
def booksreview(conn, isbn):
	if request.method == 'POST':
		all_reviews = conn.execute('select * from books where isbn =:isbn',{""isbn"":isbn}).fetchall()
		return render_template('booksreview.html', all_reviews = all_reviews)",若request模块发送请求的方式为post，则通过$conn$执行SQL：根据$isbn$获取books中的所有列，并获取所有数据，渲染并返回'booksreview.html'，其中all_reviews参数为获取的所有数据。,"If the request module sends the request as post, execute the SQL via $conn$: Get all columns in 'books' based on $isbn$ and get all the data, render and return 'booksreview.html', where the all_reviews parameter is the all obtained data."
13621,"def app_user_logout(conn, atable, uname):
	try:
		query = atable.select([atable.c.user]).where(atable.c.uname == uname)
		res = conn.execute(query).fetchone()
		return res
	except :
		return False",尝试性通过python表达式设置SQL（根据$uname$查询$atable$中的user信息）。使用$conn$执行SQL并获取第一条数据，返回查询结果。如果出现异常，则返回False。,"Try to set the SQL using a python expression (querying the user information in $atable$ where uname is $uname$). Execute the SQL with $conn$ and get the first data and return the query results. If an exception occurs, return False."
13879,"def select_flights(conn, id):
	flights = conn.execute(""SELECT * FROM flights WHERE id = :id"", {""id"": id}).fetchall()
	for flight in flights :
		print(flight[0])",运用$conn$执行SQL语句（根据$id$查询flights表中的所有列）并获取全部数据。for循环遍历所有查询结果，并打印查询结果每行的第0个元素。,Use $conn$ to execute the SQL statement  (query all columns in the flights table based on $id$) and get all the data. Use for loop iterate through all the query results and prints the 0th element of each row of the query results.
11082,"from flask import redirect
def todos_POST(conn,todostable,deleteBtnID,session):
	if not session.get('logged_in'):
		return redirect('/login')
	else:
		values = conn.query(todostable).filter(todostable.id == deleteBtnID).all()
		return [dict(row) for row in values]",如果logged_in不在$session$中，则重定向到'/login'页面。否则在python表达式中使用$conn$查询SQL（查询id为$deleteBtnID$时$todostable$中的所有信息）并获取所有数据。将查询结果每一项转化为dict并返回。,"If logged_in is not in $session$, redirect to the '/ login' page. Otherwise, use $conn$ in the python expression to query SQL (query all the information in $todostable$ when id is $deleteBtnID$) and get all the data. Convert each item of the query result to dict and return."
13362,"def get_students(conn,user_id):
	q = ""SELECT * FROM users_table WHERE user_id={}"".format(user_id)
	students=conn.execute(q).fetchall()
	return [dict(s) for s in students]","用format字符串匹配方法设置sql（根据$user_id$查询users_table表中全部信息）,使用$conn$执行SQL并获取所有查询结果，使用for循环将查询结果的每一条转化为dict,list存储并返回","Use the format string matching method to set sql (query all the information in the 'users_table' table according to $user_id$), use $conn$ to execute SQL, get all the query results, use for loop to convert each item of the query results into dict, store it as list and return."
13173,"from flask import render_template
def search(conn,query):
	rows = conn.execute(""SELECT isbn, title, author FROM books WHERE isbn =:query and title =:query and author=:query"",{""query"": query})
	if rows.rowcount == 0:
		return render_template(""error.html"")
	books = rows.fetchall()
	return render_template(""results.html"", books=books)","使用$conn$执行SQL（根据isbn为$query$、title为$query$何author为$query$获取books表中的isbn, title和author三列），如果查询结果的行数为0，则返回渲染后的""error.html""，否则返回渲染后的""results.html""，其中books参数为查询后获取的所有数据","Execute the SQL using $conn$ (get the isbn, title, and three columns in the books where isbn is $query$, title is $query$ and author is $query$) and return the rendered ""error.html"" if the number of rows in the query results is 0, otherwise, return the rendered ""results.html"", where the books parameter is all the data retrieved after the query."
13046,"import sqlalchemy
def tearDown(db_uri):
	engine = sqlalchemy.create_engine(db_uri)
	conn = engine.connect()
	informa = conn.execute(""SELECT cande FROM drop_DATABASE"").fetchall()
	return informa",使用$db_uri$创建数据库引擎，并根据引擎获取连接。使用连接执行SQL（查询drop_DATABASE中的cande）并获取所有数据。直接返回查询结果。,Use $db_uri$ to create the database engine and get the connection according to the engine. Use the connection to execute SQL (query cande in drop_DATABASE) and get all the data. Return the query results directly.
13546,"def test_explicit_text(testing,moredata):
	conn = testing.connect()
	res=conn.execute(""select * from insert_foo where moredata=:moredata"",{""moredata"":moredata}).fetchall()
	conn.close()
	return res",利用$testing$连接数据库，执行SQL（根据$moredata$查询insert_foo表中所有列），并获取所有查询结果，关闭连接，将查询结果返回。,"Connect the database with $testing$, execute SQL (query all columns in the insert_foo table according to $moredata$), get all the query results, close the connection, and return the query results."
14210,"from flask import render_template, request
def login(conn, email):
	if request.method == 'POST':
		name = conn.execute(""SELECT name FROM users WHERE email=:email"", {""email"": email}).fetchone()
		return name
	return render_template('login.html')",如果request模块通过POST方式发送请求，通过$conn$连接执行SQL语句：根据$email$获取users表中的第一条name数据，返回查询结果；否则渲染并返回'login.html'。,"If the request module sends a request by POST, execute the SQL statement based on the $conn$ connection: Get the first name data in the users table according to $email$ and return the query result; otherwise render and return 'login.html'."
13680,"from flask import jsonify
def samples_id_values(db, sample):
	sample_list = []
	values = db.execute(""SELECT otu_id FROM samples WHERE sample=:sample"",{""sample"":sample}).fetchall()
	for i in values:
		sample_list.append(i[0])
	return jsonify(sample_list)",使用$db$执行SQL（根据$sample$查询samples中的otu_id信息）并获取所有数据。使用for循环将查询结果中每一项的第0个元素存入list中，最后返回使用jsonify处理后的list。,"Execute the SQL using $db$ (query information about otu_id in samples where sample is $sample$) and get all the data. Use for loop to put the 0th element of each item in the query result into a list, and finally return a list that is handled with jsonify."
11605,"def get_iris(conn,id):
	iris_results = conn.execute(""SELECT * FROM iris WHERE id=:id"",{""id"":id})
	row = iris_results.fetchone()
	return row",使用$conn$执行SQL（根据$id$获取iris表中的所有列）并获取第一条数据，最后返回查询结果,"Use $conn$ to execute SQL (get all the columns in the iris table according to $id$), get the first piece of data, and finally return the query result."
11277,"from flask import jsonify
def apiRes(book_isbn,conn):
	book = conn.execute(""SELECT * FROM books WHERE book_isbn = :book_isbn"", {""book_isbn"": book_isbn}).fetchone()
	if book is None:
		return jsonify('No book with that isbn exists')
	return jsonify(book)",使用$conn$执行SQL(根据$book_isbn$获取books中的所有列)并获取第一条数据，如果查询结果不空，则使用jsonify处理'No book with that isbn exists'内容并返回，最后返回jsonify处理查询结果内容,"Use $conn$ to execute SQL (get all the columns in 'books' based on $book_isbn$) and get the first piece of data. If the query result is not empty, use jsonify to process'No book with that isbn exists' content and return, and finally return query result after being processed by jsonify."
13017,"def random_sample(conn,nrows):
	nrows = conn.execute(""SELECT * FROM mytable WHERE rownum < :nrows"",{""nrows"":nrows}).fetchall()
	return nrows",使用$conn$执行SQL（查询当rownum小于$nrows$时，mytable中的所有列）并获取所有数据。最后返回查询结果。,"Use $conn$ to execute SQL (query all columns in mytable when rownum is less than $nrows$) and get all the data. Finally, return the query result."
13833,"def select(conn, flight_id):
	data = conn.execute(""SELECT name FROM passengers WHERE flight_id = :flight_id"", {""flight_id"": flight_id}).fetchall()
	if not data:
		return None
	else:
		for passenger in data:
			print(passenger.name)",通过$conn$查询passengers表中flight_id为$flight_id$的全部name。如果没有查询结果，返回None；否则，循环遍历查询结果，打印查询结果中的name属性信息。,"Query all the name in the passengers table with flight_id as $flight_id$ through $conn$. If there is no query result, return None; otherwise, loop through the query results and print the name attribute information in the query results."
13434,"from flask import render_template
def flight(conn, flight_id):
	flight = conn.execute(""select * from flights where id = :id"", {""id"":flight_id}).fetchone()
	if flight is None:
		return None
	else:
		return render_template(""flight.html"", flight=flight)","使用$conn$执行SQL（根据id为$flight_id$获取flights表中的所有列）并获取第一条数据，如果查询结果是None，则返回None，否则返回渲染后的""flight.html""，其中flight参数为查询结果","Use $conn$ to execute SQL (get all columns in the flights table with id as $flight_id$) and get the first piece of data. If the query result is None, then return None; otherwise return the rendered ""flight.html"", where the flight parameter is the query result."
13259,"def select_value(engine, barId):
	with engine.connect() as con:
		sql = ""SELECT itemId FROM sells WHERE barId =: barId""
		rs = con.execute(sql,{""barId"":barId}).fetchall()
		results = [dict(row) for row in rs]
		return results",在with语句中，使用$engine$建立连接。执行SQL语句（根据$barId$选取sells表中的itemId列）获取所有数据。最后将查询结果中每一项转换为字典类型后以list返回,"In the with statement, make the connection using $engine$. Execute the SQL statement (select the itemId column in the sells where barId is $barId$) to get all the data. Finally, each item in the query result is converted to a dictionary type and returned as a list."
13895,"def upload(conn, filename):
	rows = conn.execute(""SELECT * FROM uploads_content WHERE filename = :filename"", {""filename"": filename}).fetchall()
	for e in rows:
		print(e)
	return [dict(row) for row in rows]",使用$conn$连接执行SQL（通过$filename$查询uploads_content表中的所有列）并获取全部数据，使用for循环遍历查询结果并打印，将查询结果每一项转化为dict存储为list并返回。,Use $conn$ connection to execute SQL (query all columns in uploads_content table through $filename$) and get all the data. Use for loop iterate through query results and print them. Convert each item of query results into dict and store as list and return it.
11255,"def dbu_does_table_exist(conn,goods):
	exec_cmd = ""SELECT * FROM table_name where goods=:goods""
	try:
		conn.execute(exec_cmd,{""goods"":goods}).fetchall()
		return(True)
	except:
		return(False)","设置SQL(根据$goods$获取table_name中的所有列),尝试使用$conn$执行并获取所有数据最后返回真，否则返回假","Set SQL (get all columns in table_name based on $goods$), try to execute with $conn$, get all the data and finally return true, otherwise return false."
13323,"from flask import render_template
def query_flights(conn,id):
	values = conn.execute(""SELECT * FROM flights WHERE flights_id=:id"",{""id"":id}).fetchall()
	res_list=[]
	for i in values:
		res_list.append(i)
	return render_template('flights.html',flights=res_list)",使用$conn$执行SQL（根据flights_id为$id$查询flights表中所有列），并获取所有查询结果，使用for循环将查询结果的每一条插入一个list中，返回渲染后的'flights.html'页面，其中参数flights为储存查询结果的list。,"Use $conn$ to execute SQL (query all the columns in the flights table with the condition that flights_id is $id$) and get all the query results, use for loop to insert each of the query results into a list and return the rendered 'flights.html' page, where the parameter flights is the list where the query results are stored."
13477,"def get_relation(conn, student):
	sql = ""SELECT parent FROM relationship WHERE student =: student""
	parents = conn.execute(sql,{""student"":student}).fetchall()
	for parent in parents:
		print(parent)",通过$conn$执行SQL（根据$student$获取relationship表中的parent列）并获取所有数据，然后使用for循环打印查询结果的每一项,Execute the SQL through $conn$ (get the parent column in the relationship table based on $student$) and get all the data. Then use for loop to print each item of the query results.
11323,"def test_date_parsing(conn,DateCol):
	ery = conn.execute(""SELECT * FROM types_test_data where DateCol=:DateCol"",{""DateCol"":DateCol} ).fetchall()
	assert ery!=[]",通过$conn$执行SQL（根据$DateCol$查询表types_test_data中所有列）并获取所有数据，设置断言判断查询结果是否为空。,"Execute SQL based on $conn$ (query all columns of types_test_data in the $DateCol$ table based on $conn$), get all the data, and set the assertion to determine whether the query result is empty."
11108,"def flights_page(conn,destination):
	texts = conn.execute(""SELECT game FROM flights WHERE destination=:destination"",{""destination"":destination}).fetchall()
	for t in texts:
		print(t)",使用$conn$连接执行SQL（通过$destination$查询flights表中的所有game数据），使用for循环遍历查询结果并打印。,"Execute the SQL (querying all game data in the flights where destination is $destination$) using the $conn$ connection, and use the for loop to traverse the query results and print."
11028,"from sqlalchemy.sql import select
def ship_it(conn,cookies,cookie_id):
	transaction = conn.begin()
	try:
		s = select(cookies.c.quantity).where(cookies.c.cookie_id == cookie_id)
		recs = conn.execute(s).fetchall()
		print(recs)
	except Exception as error:
		transaction.rollback()
		print(error)",利用$conn$开始一次transaction。尝试执行如下代码：利用python表达式执行SQL（根据$cookie_id$查询$cookies$表中的quantity信息）；执行并获取所有查询结果；打印查询结果。如果出现异常，则利用transaction进行rollback并打印错误信息。,"Use $conn$ to start a transaction. Try to execute the following code: Use the python expression to execute SQL (query the quantity information in the $cookies$ table based on $cookie_id$); execute and get all the query results; and print the query results. If an exception occurs, use transaction to rollback and print the error message."
13399,"from flask import request,render_template,redirect,url_for
def login(conn,username,password):
	if request.method == ""GET"":
		return render_template(""login.html"")
	if request.method == ""POST"":
		user_id=conn.execute(""SELECT id FROM users WHERE username = :username AND password = :password"",{""username"": username, ""password"": password}).fetchone()
		if user_id is None:
			return render_template(""error.html"")
		else:
			return redirect(url_for('index'))","如果请求方式为""GET"",返回渲染后的""login.html""页面；如果请求方式为""POST"",使用$conn$执行SQL（根据$username$和$password$查询users表中id列），并获取第一条查询结果。如果未获取到数据，则返回渲染后的'error.html'，否则重定向到'index'页面。","If the request method is ""GET"", return the rendered ""login.html"" page; if the request method is ""POST"", use $conn$ to execute SQL (query the id column in the users table based on $username$ and $password$) and get the first query result. If no data is obtained, return the rendered 'error.html'; otherwise, redirect to the 'index' page."
11516,"def select_value(conn, aname):
	count = conn.execute(""SELECT COUNT(id) FROM table WHERE aname = :aname"", {""aname"": aname})
	return int(count.fetchall()[0][0])",使用$conn$连接执行SQL查询语句，其内容为：根据$aname$查询table表中的id数目，将所有查询结果的第0行第0列数据转换为整型数据返回,"Use $conn$ connection to execute SQL query statement and the content is as follows: query the number of id in the 'table' table based on $aname$, convert row 0 and column 0 data of all query result to integer data and return it."
11011,"from sqlalchemy.sql import select
def get_sample_id(sample_table,value):
	stmt = select(sample_table.c.id).where(sample_table.c.name==value)
	result = stmt.execute()
	x = result.fetchone()
	if x:
		sample_id = x[0]
		return sample_id
	else:
		return -1",利用python表达式设置SQL：当$sample_table$中name列为$value$的时候查询表中的id。SQL调用execute方法执行并获取一条数据。如果获取到的第一个数据存在，则返回第一条数据的第一个元素。否则返回-1。,"Use the python expression to set SQL: Query the id in the table when the name column in $sample_table$ is $value$. SQL calls the execute method to execute and get a piece of data. If the first obtained data exists, return the first element of the first data. Otherwise, return -1."
13326,"from flask import render_template
def book(conn,isbn):
	try:
		book = conn.execute(""SELECT bookpage FROM books WHERE isbn=:isbn"",{""isbn"":isbn}).fetchone()
		if book is None:
			return render_template('error.html')
		else:
			return render_template('book.html', book=book)
	except:
		return render_template('error.html')","尝试使用$conn$执行SQL（根据$isbn$查询books表中bookpage列），并获取第一条查询结果，如果未获取到数据，则返回渲染后的'error.html'，否则返回渲染后的'book.html'页面,其中book参数为查询到的结果。如果捕获到异常，返回渲染后的'error.html'页面。","Try to use $conn$ to execute SQL (query the bookpage column in the books table according to $isbn$) and get the first query result. If no data is obtained, return the rendered 'error.html'; otherwise, return the rendered' book.html' page, where the book parameter is the queried result. If an exception is caught, return the rendered 'error.html' page."
13265,"from sqlalchemy.sql import select
from sqlalchemy import create_engine
def score_list(game, Score):
	engine = create_engine(game)
	conn = engine.connect()
	Scores = conn.execute(select([Score])).fetchall()
	return Scores",使用$game$获取数据库引擎并建立连接。通过连接执行SQL语句（查询$Score$所有数据并返回）。,Use $game$ to get the database engine and establish a connection. Execute the SQL statement by joining(query all $Score$ data and return) .
14080,"def test_transaction(conn):
	number = conn.execute(""select id from nittest_table"").fetchone()[0]
	assert number == 0",使用$conn$执行SQL语句，内容为：查询nittest_table表中的第一条id数据的第0个元素，设置断言判断查询结果为0。,Use $conn$ to execute the SQL statement and the content is as follows: Query the 0th element of the first id data in the nittest_table table and set the assertion to determine that the query result is 0.
13483,"def select_user(conn):
	cursor = conn.cursor()
	names = conn.execute(""SELECT name FROM USER"").fetchall()
	cursor.close()
	conn.close()
	return names",利用$conn$游标的方法执行SQL（获取USER表中的name列）并获取所有数据，然后关闭游标连接再关闭数据库连接，最后返回查询结果,"Use $conn$ cursor method to execute SQL (get the name column in the USER table) and get all the data. Close the cursor connection, then close the database connection and finally return the query results."
13287,"def search_users(conn):
	cursor = conn.cursor()
	users = cursor.execute(""SELECT * FROM users"").fetchall()
	cursor.close()
	conn.close()
	return users",使用$conn$创建并返回游标。执行SQL（选取$users$表中的所有列）并获取所有数据。关闭游标和数据库连接，最后返回查询结果。,"Create and return a cursor using $conn$. Execute SQL (select all columns in the $users$) and get all the data. Close the cursor and database connection, and finally return the result of the query."
13193,"from flask import render_template
def clean_review(conn,token):
	results = conn.execute(""SELECT * FROM reviews where token=:token"",{""token"":token}).fetchall()
	review_words = [result for result in results]
	return render_template(""index.html"", review_words=review_words)","使用$conn$执行SQL（根据$token$获取reviews表中的所有列）并获取所有数据，然后使用for循环对查询结果的每一项都存储为list类型，最后返回渲染后的""index.html""，其中review_words参数为list内容","Use $conn$ to execute the SQL (get all the columns in the reviews where token is $token$) and get all the data, then use the for loop to store each item of the query result as a list type, and finally return the rendered ""index.html"", where the review_words parameter is the list content."
13640,"def get_haslo_uzytk(connection, uzytkownicy, login):
	with connection.begin() as trans:
		sql = uzytkownicy.select([uzytkownicy.c.Haslo]).where(uzytkownicy.c.Login == login)
		result = connection.execute(sql,{""login"":login}).fetchone()
	return result[0]",在with语句中使用$connection$开始一次事物：使用python表达式的方式设置SQL（查询Login为$login$的时候，$uzytkownicy$表中的Haslo）；使用$connection$执行SQL并获取第一条数据。最后返回查询结果的第0号元素。,Start a thing with $connection$ in the with statement: set up the SQL using a Python expression (Query the Haslo in the $uzytkownicy$ when the Login is $login$). Execute the SQL using $connection$ and get the first data. Finally return 0th element of the query result.
13237,"from sqlalchemy.sql import select
def get_source(conn, datapaths, dpid):
	sql = select([datapaths]).where(datapaths.c.dpid == dpid)
	row = conn.execute(sql).fetchall()
	if not row:
		return None
	else:
		return True",使用Python表达式的方式设置SQL（根据$dpid$查询$datapaths$中的所有列），使用$conn$执行SQL并获取所有数据。如果没有获取到的数据则返回None，否则返回True。,"Set the SQL (query all columns in $datapaths$ where dpid is $dpid$) using a Python expression, execute the SQL with $conn$ and get all the data. Return None if the data is not retrieved, otherwise return True."
11487,"from flask import render_template
def get_pass(conn, password):
	password = ""SELECT username FROM users WHERE password =: password""
	usernames = conn.execute(password,{""password"":password}).fetchall()
	return render_template(""regsuccess.html"", username=usernames)","设置SQL（根据$password$查询users表中username列），根据$conn$执行SQL并获取所有查询结果，返回渲染后的""regsuccess.html""页面，参数username设置为查询结果。","Set SQL (query the username column in the users table based on $password$), execute SQL based on $conn$ and get all the query results. Return the rendered ""regsuccess.html"" page with the username parameter being the query results."
11437,"def test_heavy_nesting(conn, user_name):
	sql = ""SELECT * FROM users WHERE name =: name""
	re_user = conn.execute(sql,{""name"":user_name}).fetchall()
	assert len(re_user) != 0
	return re_user","设置sql（根据name的值为$user_name$查询users表中全部信息）,使用$conn$执行SQL并获取所有查询结果，设置断言判断查询结果的长度是否不等于0，最后返回查询结果。","Set SQL (query all the information in the users table based on the value of 'name': $user_name$), use $conn$ to execute SQL and get all the query results. Set assertion to determine whether the length of the query results is not equal to 0, and finally return the query results."
13035,"def test_commit(tlengine):
	external_connection = tlengine.connect()
	try:
		userinf = external_connection.execute(""select * from query_users"").fetchall()
		return userinf
	finally:
		external_connection.close()",使用$tlengine$获取连接。尝试性使用数据库连接执行SQL（查询query_users表中的所有数据）并获取所有查询结果。返回查询结果。最终确保数据库连接关闭。,"Use $tlengine$ to get the connection. Try to use a database connection to execute SQL (query all data in the query_users table) and get all the query results. Return the query results. Finally, make sure that the database connection is closed."
13576,"from sqlalchemy import create_engine
def get_total_request_urls(DB_CONNECT_STRING,id):
	engine = create_engine(DB_CONNECT_STRING, max_overflow=5)
	sql = 'select topics from spider_jam_comment where id=:id'
	results = engine.execute(sql,{""id"":id}).fetchall()
	list_request_urls = []
	for r in results:
		list_request_urls.append(r)
	return list_request_urls",通过$DB_CONNECT_STRING$获取数据库引擎，参数max_overflow为5，设置SQL语句（根据$id$查询spider_jam_comment表中topics列），并获取所有数据，用for循环遍历获取的所有查询结果，将每条数据插入一个list中，并返回这个list。,"Get the database engine through $DB_CONNECT_STRING$ where a parameter max_overflow is 5, set the SQL statement (query the topics column in the spider_jam_comment table based on $id$), get all the data, use for loop to traverse all the obtained query results, insert each piece of data into a list, and return the list."
11314,"def testCommit(conn,machinary,transaction):
	sql = ""select id from bypass where machinary = :machinary and transaction = :transaction""
	results = conn.execute(sql,{""machinary"": machinary, ""transaction"": transaction}).fetchall()
	return results",使用$conn$执行SQL（根据$machinary$和$transaction$查询bypass表中id列的所有数据），并返回查询结果。,Use $conn$ to execute SQL (query all data in the id column of the bypass table based on $machinary$ and $transaction$) and return the query results.
13718,"def get_shows(conn,link):
	row = conn.execute(""SELECT oppose FROM show WHERE link= :link"", {""link"": link}).fetchone()
	if row != None:
		print(row)
	return row",通过$conn$执行SQL（根据$link$查询show表中oppose列），并获取第一行数据，如果查询结果不为空，打印查询结果，最后将查询结果返回。,"Execute SQL through $conn$ (query the oppose column in the show table according to $link$), and get the first row of data. If the query result is not empty, print the query result, and finally return it."
13625,"def get_player_info(engine,pid):
	with engine.connect() as conn:
		res = conn.execute(""select * from players where player_id=:pid"",{""pid"":pid}).fetchall()
		if res is not None:
			return [dict(row) for row in res]
		else:
			return None",在with语句中使用$engine$获取连接，并根据连接执行SQL（查询当player_id为$pid$时players中的内容）并获取所有数据。如果查询结果不为None则将查询结果中每一项元素转化为dict并返回。否则返回None。,"Use $engine$ in the with statement to get the connection, execute the SQL connection (querying the contents of players when player_id is $pid$) and get all the data. If the query result is not None, each element in the query result is converted to dict and return. Otherwise, return None."
13095,"from flask import render_template
def index(conn):
	articles = conn.execute(""SELECT * FROM articles"")
	return render_template(""index.html"", articles=articles)","使用$conn$执行SQL：查询articles表中的所有列。返回渲染后的""index.html""并将查询结果传给articles参数。","Use $conn$ to execute a SQL: Query for all columns in the articles table. Return the rendered ""index.html"" and pass the query results to the articles parameter."
13514,"def deploy(conn,deployment_id):
	try:
		res=conn.execute(""SELECT * FROM session WHERE deployment_id = :deployment_id"",{""deployment_id"": deployment_id}).fetchall()
		return res
	except Exception as e:
		print(e)
	finally:
		conn.close()",尝试利用$conn$执行SQL（根据$deployment_id$查询session表中所有列），并获取所有查询结果，将查询结果返回。如果捕获到Exception异常，打印这个异常，最后关闭连接。,"Try to use $conn$ to execute SQL (query all columns in the session table based on $deployment_id$), get all the query results, and return the query results. If an Exception is caught, print the exception and close the connection."
13301,"from sqlalchemy import create_engine
def start_requests(DB_CONNECT_STRING,body):
	engine = create_engine(DB_CONNECT_STRING)
	results = engine.execute(""SELECT * FROM spider_table WHERE body=:body"", {""body"": body}).fetchall()
	res_list = []
	for item in results:
		res_list.append(item)
	return res_list",通过$DB_CONNECT_STRING$获取数据库引擎并建立连接。执行SQL语句（根据$body$查询spider_table表中所有列），并获取所有数据，使用for循环将查询结果的每一条存储到list中，并返回这个list。,"Get the database engine and establish a connection through $DB_CONNECT_STRING$. Execute the SQL statement (query all the columns in the spider_table according to $body$), get all the data, use for loop to store each item of the query result in list, and return the list."
13708,"def cars(conn,ID):
	df = conn.execute(""SELECT * FROM cars where ID = :ID"",{""ID"":ID}).fecthall()
	assert df != []",使用$conn$执行SQL（根据$ID$查询cars表中的所有列）并获取所有数据。设置断言判断查询结果不为空list。,"Use $conn$ to execute SQL (query all columns in the cars table based on $ID$), get all the data, and set the assertion to determine that the query result is not empty list."
11077,"def get_type_object(session,ProductType,type_name):
	try:
		Product_values = session.query(ProductType).filter(ProductType.short_name == type_name).first()
		return Product_values
	except Exception:
		raise
	finally:
		session.close()",尝试性使用ORM方式，通过$session$执行SQL（根据$type_name$查询$ProductType$表中所有信息）并获取第一条数据，返回查询结果。如果出现异常，则直接抛出。最终确保$sessiong$关闭。,"Try to use the ORM method to execute SQL through $session$ (query all the information in the $ProductType$ table based on $type_name$), get the first piece of data, and return the query result. If an exception occurs, throw it directly. Finally, make sure that $sessiong$ is closed."
13642,"from flask import render_template
def find_user(db,id,password,email):
	query = ""select * from user where id=:id and password=:password and email=:email""
	result = db.execute(query,{""id"":id,""password"":password,""email"":email}).fetchone()
	return render_template('sigin.html', result=result)","设置SQL：根据$id$, $password$和$email$查询user表中的所有列。使用$db$执行SQL并获取第一条数据。返回渲染后的'sigin.html'并将查询结果传给result参数。","Set SQL: query all columns in the user table where ID is $id$, password is $password$, and email is $email$. Execute the SQL using $db$ and get the first data. Return the rendered 'sigin.html' and pass the query result to the result parameter."
13695,"from flask import request, render_template
def register(db,uname,pwd):
	if request.method == ""GET"":
		return render_template(""register.html"")
	else:
		try:
			user = db.execute(""select * from users where username=:uname and password=:pwd"",{""uname"":uname,""pwd"":pwd}).fetchone()
			return user
		except:
			return render_template(""error.html"")","如果request请求方法为GET，则直接返回渲染后的""register.html""。否则尝试性使用$db$执行SQL（当username为$uname$，password为$pwd$时，查询users表中的所有列）并获取第一条数据。最后返回数据。如果出现异常则返回渲染后的""error.html""。","If the request method is GET, return ""register.html"" after rendering directly. Otherwise, try to execute the SQL using $db$ (querying all columns in the users table where the usernameis $uname$ and password is $pwd$) and get the first data. Finally, return the data. If an exception occurs, return the rendered ""error.html""."
11085,"def get_dataset(conn,colname):
	res=conn.execute(""SELECT tbname FROM dbname WHERE colname=:colname"",{""colname"":colname}).fetchall()
	return [dict(row) for row in res]",使用$conn$执行SQL（根据$colname$查询dbname表中的tbname）并获取所有数据。将查询结果中的每一项转化为dict并返回。,Use $conn$ to execute SQL (query the tbname in the dbname table based on $colname$) and get all the data. Convert each item in the query result to dict and return.
13670,"def getAll_Data(conn, creator):
	sql = ""select * from T_Treasure_EvalCustomItem where Creator=:creator""
	res = conn.execute(sql,{""creator"":creator}).fetchall()
	if len(res) > 0:
		return res
	else:
		return False",设置SQL（查询Creator为$creator$时T_Treasure_EvalCustomItem中的所有列）。使用$conn$执行SQL并获取所有数据。如果查询结果长度大于0则返回查询结果。否则返回False。,"Set SQL (query where Creator is $creator$ in T_Treasure_EvalCustomItem). Execute SQL with $conn$ and get all the data. Return query result if the query result length is greater than 0. Otherwise, return False."
13339,"from flask import render_template
def reply_func(pymysql_db,user_id,post_id):
	cursor = pymysql_db.cursor()
	sqlData = cursor.execute(""SELECT * FROM reply WHERE user_id=:user_id AND post_id=:post_id"",{""user_id"":user_id,""post_id"":post_id}).fetchall()
	cursor.close()
	return render_template('reply.html', sqlData)",使用$pymysql_db$建立游标，执行SQL（根据$user_id$和$post_id$查询reply表中所有列），并获取所有查询结果，关闭数据库连接，返回渲染后的'reply.html'页面，传入参数为获取到的数据。,"Use $pymysql_db$ to set up cursors, execute SQL (query all columns in the reply table based on $user_id$ and $post_id$), get all query results, close the database connection, and return the rendered 'reply.html' page, where the input argument is the obtained data."
13382,"def test_opentracing(conn,playersid):
	res=conn.execute(""SELECT * FROM players WHERE playersid=:playersid"",{""playersid"":playersid}).fetchall()
	assert len(res) != 0",使用$conn$执行SQL（根据$playersid$查询players表中所有列），并获取所有查询结果，设置断言判断查询结果的长度是否不为0.,"Use $conn$ to execute SQL (query all columns in the players table according to $playersid$), get all the query results, and set the assertion to determine whether the length of the query result is not 0. "
11090,"from sqlalchemy.sql import select,func
def selectrows(conn,telemetry,timenow):
	s = select([func.count(telemetry.c.id)]).where(telemetry.c.time == timenow)
	recs = conn.execute(s).fetchall()
	return [item[0] for item in recs]",使用python表达式设置SQL（查询time为$timenow$时$telemetry$表中id的数量）。使用$conn$执行SQL并获取所有数据。将查询结果中每一项的第0个元素存入list中并返回。,Use the python expression to set the SQL (the number of id in the $telemetry$ table when the query time is $timenow$). Use $conn$ to execute the SQL and get all the data. Store the 0th element of each item in the query result is stored in list and return.
11411,"def main(conn,author,year):
	item = conn.execute(""SELECT title FROM books WHERE author = :author and year = :year"",{""author"": author, ""year"": year}).fetchall()
	if not item:
		print('No such title')
	else:
		print(item)",利用$conn$执行SQL（根据$author$和$year$查询books表中title列），并获取所有查询结果，如果未获取到数据，打印'No such title'，否则打印查询结果。,"Execute SQL with $conn$ (query the title column in the books table based on $author$ and $year$) and get all the query results. If no data is obtained, print'No such title', otherwise print the query results."
13776,"from sqlalchemy.sql import select
def get_codes_from_base(connection,date,datetime):
	s = select(date).where(date.c.datetime == datetime)
	ans = connection.execute(s).fetchall()
	ans_list = []
	for i in ans:
		ans_list.append(i[0])
	return ans_list",根据python表达式设置SQL：（根据$datetime$查询$date$表中所有列）。通过$connection$执行SQL并获取所有数据，使用for循环遍历每一项查询结果，将每条数据的第0个元素存储为list，返回这个list。,"Set SQL based on the python expression (query all columns in the $date$ table based on $datetime$). Execute SQL with $connection$, get all the data, use for loop to traverse each query result, store the 0th element of each piece of data as list, and return the list."
11227,"def checkPreviousStrategyName(strategy_id,conn):
	sql = ""select strategy_name from strategy where strategy_id=:strategy_id""
	res=conn.execute(sql,{""strategy_id"":strategy_id}).fetchall()
	return res",通过$conn$执行SQL（根据$strategy_id$查询strategy中的strategy_name）并获取所有数据，最后返回获取的结果,"Execute SQL via $conn$ (query the strategy_name in 'strategy' based on $strategy_id$) get all the data, and finally return the obtained result."
11517,"from sqlalchemy import create_engine
def query_info(connection_string, aid):
	engine = create_engine(connection_string, echo=False,convert_unicode=True)
	aout = engine.execute(""SELECT * FROM engine WHERE aid = :aid"", {""aid"": aid}).fetchall()
	return aout","通过$connection_string$获取数据库引擎，其中echo参数为False,convert_unicode参数为True。查询engine表中aid为$aid$的所有数据并将其返回。","Get the database engine through $connection_string$, where echo parameter is False and convert_unicode parameter is True. Query all data with the aid as $aid$ in the engine table and return it."
13593,"from flask import jsonify
def Incident_Map_data(conn,lab):
	results = conn.execute(""SELECT Lat FROM Incidents where lab=:lab"",{""lab"":lab}).fetchall()
	return jsonify(results)",利用$conn$执行SQL（根据$lab$查询Incidents表中Lat列），并获取所有查询结果，将查询结果转化为json并返回。,"Execute SQL with $conn$ (query the Lat column in the Incidents table according to $lab$), get all the query results, convert the query results to json and return."
13260,"from sqlalchemy.sql import select
def show_note(conn, NOTES, note_id):
	sql = select([NOTES]).where(NOTES.c.id == note_id)
	results = conn.execute(sql).fetchall()
	return results",使用Python表达式的方式设置SQL语句，其内容是：查询当id等于$note_id$时，$NOTES$中的所有列。使用$conn$执行SQL语句并获取所有数据，最后返回查询结果。,"Set the SQL statement using a Python expression with the content of querying all columns in $NOTES$ when id is $note_id$. Execute the SQL statement with $conn$ and get all the data, then return the query results."
11249,"def todas(conn,movietitle):
	db_result = conn.execute(""SELECT * FROM imdb_movies where movietitle=:movietitle"",{""movietitle"":movietitle}).fetchall()
	return list(db_result)",使用$conn$执行SQL(根据$movietitle$获取imdb_movies中的所有列)并获取所有数据，最后将结果存储为list返回,"Use $conn$ to execute SQL (get all columns in imdb_movies based on $movietitle$) and get all data, finally store the result as list and return."
13214,"def select_img(connection, imageId):
	sql = ""SELECT * from Images WHERE imageId =: imageId""
	results = connection.execute(sql,{""imageId"":imageId}).fetchall()
	return results",使用$connection$执行SQL语句（根据$imageId$查询Images表中的所有列），获取所有数据并返回。,"Execute the SQL statement using $connection$ (query all columns in the Images where the Id of image is $imageId$) , get all the data, and return."
13345,"def main(conn,isbn,title,author):
	years = conn.execute(""SELECT year FROM books WHERE isbn=:isbn AND title=:title AND author=:author"",{""isbn"":isbn,""title"":title,""author"":author}).fetchone()
	return years",使用$conn$执行SQL（根据$isbn$，$title$和$author$查询books表中year列），并获取第一行数据，将查询结果返回。,"Use $conn$ to execute SQL (query the year column in the books table based on $isbn$, $title$ and $author$), get the first row of data, and return the query results."
13772,"def getName(conn, id):
	sql = conn.execute(""SELECT sequenceno FROM operation_step WHERE id = :id "", {""id"": id})
	return sql.fetchone()",利用$conn$执行SQL（根据$id$查询operation_step表中sequenceno列），返回获取的第一行数据。,Execute SQL with $conn$ (query the sequenceno column in the operation_step table according to $id$) and return the obtained first row of data.
11233,"def testfour(conn,firstname):
	result = conn.execute(""select * from noodles where firstname=:firstname"",{""firstname"":firstname}).fetchall()
	return result",使用$conn$执行SQL（根据$firstname$获取noodles中的所有列）并获取所有数据，最后返回查询结果,"Use $conn$ to execute SQL (get all columns in 'noodles' based on $firstname$), get all the data, finally return the query result."
14026,"def test_categorical(conn):
	res = conn.execute('SELECT * FROM test_categorical').fetchone()
	return res",使用$conn$执行SQL语句：从test_categorical表中查找所有列，获取第一条数据并返回。,"Use $conn$ to execute the SQL statement: Find all the columns from the test_categorical table, get the first piece of data, and return."
13983,"from flask import render_template
def flight(conn, flight_id):
	flight = conn.execute(""SELECT * FROM flights WHERE id = :id"", {""id"":flight_id}).fetchone()
	if flight is None:
		return render_template(""error.html"") 
	return render_template(""flight.html"", flight=flight)","使用$conn$执行SQL语句：查询flights表中id为$flight_id$的所有列，并获取第一条数据。如果获取的数据为空，渲染并返回""error.html""，否则，渲染并返回""flight.html""，其中flight参数为获取的数据。","Use $conn$ to execute the SQL statement: Query all columns in the flights table with 'id': $flight_id$ and get the first piece of data. 
If the data obtained is empty, render and return ""error.html"", otherwise, render and return ""flight.html"", where the flight parameter is the obtained data."
11383,"def create_user(db_connection,distance):
	if distance is not None:
		query = db_connection.execute(""SELECT * FROM user where distance=:distance"", {""distance"": distance}).fetchall()
		return query",如果$distance$不为空，使用$db_connection$执行SQL（根据$distance$查询user表中所有列），并获取所有查询结果，将查询结果返回。,"If $distance$ is not empty, use $db_connection$ to execute SQL (query all columns in the user table based on $distance$), get all the query results, and return the query results."
13209,"from sqlalchemy import create_engine
from sqlalchemy.orm.session import sessionmaker
from flask import render_template
def file(localhost, File, file_id):
	engine = create_engine(localhost)
	Session = sessionmaker(bind=engine)
	session = Session()
	file = session.query(File).filter(File.id==file_id)
	return render_template('file.html', file=file)",使用ORM的方式，利用$localhost$获取数据库引擎，进一步获取Session对象。执行SQL语句（根据$file_id$查询$File$表中所有列），渲染并返回'file.html'，其中file参数为查询结果。,"In ORM, the database engine is fetched using $localhost$, further fetching the Session object. Execute the SQL statement (query all columns in the $File$ where the id of file is $file_id$) , render and return 'file.html', where the file parameter is the result of the query."
14214,"from sqlalchemy.sql import select,func
def max_code_no(conn, codetbl):
	s = select(func.max(codetbl.c.code_no))
	r = conn.execute(s).fetchone()
	if r[0] == None:
		return 0
	else:
		return r[0]",设置SQL语句，内容为：查询$codetbl$表中code_no的最大值，通过$conn$连接执行SQL获取第一条数据。如果执行结果的第0个元素为空，返回0；否则返回执行结果的第0个元素。,"Set the SQL statement: Query the maximum value of code_no in the $codetbl$ table and execute the SQL through the $conn$ connection to get the first piece of data. If the 0th element of the execution result is empty, return 0; otherwise, return the 0th element of the execution result."
13617,"from sqlalchemy import create_engine
from sqlalchemy.orm.session import sessionmaker
def get_tweets_since(conn_string, TweetData, since_datetime):
	engine = create_engine(conn_string, echo=False)
	session = sessionmaker(bind=engine)()
	tweets = session.query(TweetData.tweets).filter(TweetData.since_datetime==since_datetime).all()
	if tweets:
		return tweets
	else:
		return None",根据$conn_string$创建数据库引擎并设置echo参数为False。使用sessionmaker创建session实例。在ORM方式下执行SQL（根据$since_datetime$查询$TweetData$表中的tweets）并获取所有数据。如果查询结果存在则返回，否则返回None。,"Create a database engine where conn_string is $conn_string$ and set the echo parameter to False. Creating session instances using sessionmaker. Execute SQL (Excute tweets in the $TweetData$ where the datetime of science is $since_datetime$) in ORM and get all the data. Return if the query result exists,  return None if the query result does not exists."
13294,"from sqlalchemy.sql import select ,func
def count(conn, table_name):
	s = select([func.count()]).select_from(table_name)
	r = conn.execute(s).fetchall() 
	return r",使用python表达式方式设置SQL（获取$table$表中$table_name$的所有行数），使用$conn$获取该数据并返回,"Set the SQL using a python expression (get all rows of $table_name$ in the $table$), get the data using $conn$ and return."
13466,"def test_null_is_decoded_as_empty_dict(conn, name):
	sql = ""SELECT meta FROM user WHERE name =: name""
	result = conn.execute(sql,{""name"":name}).fetchall()
	row = [x for x in result][0]
	return row",通过$conn$执行SQL（根据$name$获取user表中的meta列）并获取所有数据，然后使用for循环对查询结果的每一项存储为list，最后返回list内容的第0个元素,Execute SQL through $conn$ (get meta column in the user table based on $name$) and get all the data. Then use for loop to store each item of query results as list and finally return the 0th element of the list contents.
13941,"def showTable(conn, name):
	sql = ""SELECT * FROM tables WHERE name =: name""
	table = conn.execute(sql,{""name"":name}).fetchall()
	for data in table:
		print(data)
	if len(table) == 0:
		print(""No data"")","设置SQL语句（查询tables表中name为$name$的所有列），使用$conn$连接执行SQL获取全部数据。for循环遍历执行结果并打印。如果执行结果的长度为0，则打印""No data""。","Set the SQL statement (query all columns in the 'tables' table whose name is $name$), use the $conn$ connection to execute SQL and get all the data. Use for loop to traverse the execution result and print it. If the length of the execution result is 0, print ""No data""."
13762,"def update_destdb(session, table_name, destination):
	sets = session.execute(""SELECT * FROM table WHERE table_name = :table_name and destination = :destination"",{""table_name"": table_name, ""destination"": destination}).fetchall()
	session.close()
	return sets",利用$session$执行SQL（根据$table_name$和$destination$查询table表中所有列），并获取所有数据，关闭连接，将查询结果返回。,"Execute SQL with $session$ (query all columns in the 'table' table based on $table_name$ and $destination$), get all the data, close the connection, and return the query result."
14099,"def sf_query_waybill_normal(conn, order_id, SfWaybillResp):
	record = conn.query(SfWaybillResp).filter_by(SfWaybillResp.order_id==order_id).first()
	return record",使用ORM方式，通过$conn$连接执行SQL语句，其内容是：查询$SfWaybillResp$表中order_id为$order_id$的第一条数据，返回所获取的数据。,"Use the ORM method to execute the SQL statement through the $conn$ connection, which is to query the first piece of data in the $SfWaybillResp$ table whose order_id is $order_id$ and return the obtained data."
11398,"def print_tables(conn,type,name):
	rows = conn.execute(""select * from sqlite_master where type =:type and name=:name"", {""type"": type,""name"":name}).fetchone()
	for item in rows[0]:
		print(item)",使用$conn$执行SQL（根据$type$和$name$查询sqlite_master表中所有列），并获取第一行数据，使用for循环将查询结果中每一条的第0个元素遍历并打印。,"Use $conn$ to execute SQL (query all columns in the sqlite_master table based on $type$ and $name$), get the first row of data, and use  for loop to traverse and print the 0th element of each article in the query result."
11401,"from sqlalchemy.sql import select
import logging
def get_max_id(conn, keyword_id, data):
	try:
		sql = select([data]).where(data.c.id == keyword_id)
		results = conn.execute(sql).fetchall()
		return results
	except Exception as ex:
		logging.error(ex)",尝试根据python表达式设置SQL：（根据id为$keyword_id$查询$data$表中所有列），使用$conn$执行SQL并获取所有数据，返回查询数据。如果执行时出现Exception异常，则输出error日志。,"Try to set SQL based on the Python expression: (query all columns in $data$ table based on 'id': $keyword_id$), execute SQL with $conn$, get all the data, and return query data. If an Exception occurs during execution, output the error log."
11120,"def update_page(conn,id_rate):
	sql = ""SELECT * FROM ratings WHERE id_rate={}"".format(id_rate)
	texts = conn.execute(sql).fetchall()
	return texts","设置SQL语句（使用format()函数格式化输出字符串,通过字符串$id_rate$查询ratings中的所有列）,使用$conn$连接执行SQL语句获取全部数据，返回所有数据。","Set up the SQL statement（Format the output string using the format () function. Query all columns in the ratings where the id of rate is $id_rate$). Execute the SQL statement with the $conn$ connection to get all the data, and return all the data."
13686,"from sqlalchemy.sql import select
from flask import render_template
def get_passengers(db, passengers, id):
	sql = select(passengers).where(passengers.c.flight_id == id)
	passengers = db.execute(sql).fetchall()
	return render_template(""flight.html"", passengers=passengers)","使用python表达式设置SQL：查询当flight_id等于$id$时$passengers$表中的所有信息。使用$db$执行SQL并获取所有数据。返回渲染后的""flight.html""并将查询结果传给passengers参数。","Use a python expression to set up the SQL: query for all the information in the $passengers$  where flight_id is $id$. Execute the SQL using $db$ and get all the data. The rendered""flight.html"" is returned and the query result is passed to the passengers parameter."
13585,"import csv
def main(conn,origin):
	f = open(""flights.csv"")
	reader = csv.reader(f)
	l = []
	for origin in reader:
		res=conn.execute(""select type from flights where origin=:origin"", {""origin"": origin}).fetchall()
		l.append(res)
	return l","打开并读取""flights.csv""文件，使用for循环获取文件中的每一条origin，利用$conn$执行SQL（根据$origin$查询flights表中type列），并获取所有查询结果，将每次循环得到的查询结果存储到list中。返回这个list。","Open and read the ""flights.csv"" file, use for loop to get each origin in the obtained file, execute SQL with $conn$ (query the type column in the flights table based on $origin$), get all the query results, store the query results from each loop in list and return the list."
13959,"from sqlalchemy.sql import select
def get_source(conn, scores, feature_name):
	sql = select([scores]).where(scores.c.feature_name == feature_name)
	score = conn.execute(sql).fetchall()
	if score is not None:
		print(score)
		return score
	else:
		return 0",使用Python表达式的方式设置SQL语句：根据$feature_name$查询$scores$表中的所有数据。使用$conn$执行SQL获取所有数据。如果执行结果不为空，打印执行结果并返回；否则，返回0.,"Use the Python expression to set the SQL statement: Query all the data in the $scores$ table based on $feature_name$. Use $conn$ to execute SQL and get all the data. If the execution result is not empty, print the execution result and return; otherwise, return 0."
13845,"from flask import render_template, request
def browse(conn, title,isbn):
	if request.method == 'POST':
		booksSearch = conn.execute(""SELECT * FROM books WHERE title = :title AND isbn = :isbn"", {""title"": title, ""isbn"": isbn}).fetchone()
		for book in booksSearch:
			print(book.title)
		if len(booksSearch) == 0:
			return False
		return render_template('browse.html', books=booksSearch)
	return render_template('browse.html')",如果request模块发送请求的方式为post，则使用$conn$连接执行SQL（通过$title$和$isbn$查询books中的列）并获取第一条数据）。for循环遍历所有的查询结果并打印查询结果的title属性。如果查询结果的长度为0，则返回False；如果查询结果的长度不为0，则返回'browse.html'，其中books参数为查询结果。如果request模块发送请求的方式不为post，渲染并返回'browse.html'。,"If the request module sends the request as post, use the $conn$ connection to execute the SQL (query the columns in books through $title$ and $isbn$) and get the first piece of data. Use for loop iterate through all the query results and print the title attribute of the query results. If the length of the query results is 0, then return False; if the length of the query results is not 0, then return 'browse.html', where the books parameter is the query results. If the request module sends the request in a way other than post, render and return 'browse.html'."
11111,"from flask import jsonify
def isbn_select(connection,isbn):
	texts = connection.execute(""SELECT content FROM books_again WHERE isbn=:isbn"",{""isbn"":isbn}).fetchall()
	return jsonify(texts)",使用$connection$执行SQL语句（根据$isbn$查询books_again表中的所有content），并使用jsonify返回查询结果。,Execute the SQL statement with $connection$ (query all content in the books_again where isbn is $isbn$) and return the query result using jsonify.
13638,"import sqlalchemy
def tearDown(db_uri,blog_name):
	engine = sqlalchemy.create_engine(db_uri)
	conn = engine.connect()
	database = conn.execute(""SELECT blog FROM DATABASE WHERE blog_name=:blog_name"",{""blog_name"":blog_name}).fetchall()
	conn.close()
	return database",根据$db_uri$创建数据库引擎并获取连接。使用连接执行SQL（根据$blog_name$查询DATABASE表中的blog信息）并获取所有数据。关闭连接并返回查询结果。,Create the database engine from $db_uri$ and get the connection. Execute the SQL using the join (querying the blog information in the DATABASE table where blog_name is $blog_name$) and fetch all the data. Close the connection and return the query results.
13874,"def get_insertEx(conn, r_id, raw_d):
	query = ""SELECT * FROM table WHERE r_id = :r_id AND raw_d = :raw_d""
	ans = conn.execute(query, {""r_id"": r_id, ""raw_d"": raw_d}).fetchall()
	if ans is None:
		return 1
	else:
		return 0","设置SQL语句（通过$r_id$和$raw_d$查询table表中的所有列）,使用$conn$连接执行SQL获取全部数据。如果查询结果为空，返回1；否则返回0.","Set up SQL statement (query all columns in the 'table' table through $r_id$ and $raw_d$). Use $conn$ connection to execute SQL to get all the data. If the query result is empty, return 1; otherwise return 0."
13610,"def count(conn,lastid):
	cursor = conn.cursor()
	res = cursor.execute(""select count(id) from CAPTURE where lastid = :lastid"",{""lastid"":lastid}).fetchone()
	return res",使用$conn$获取索引，并根据索引执行SQL（根据$lastid$查询CAPTURE表中id的数量），然后获取第一条数据。最后返回查询结果。,"Get the index using $conn$ and execute the SQL based on the index (query the number of ids in the CAPTURE table where lastid is $lastid$), then get the first data. Finally,return the query results."
13460,"def select_value(conn, book_id):
	sql = ""SELECT * FROM review WHERE book_id =: book_id""
	reviews = conn.execute(sql,{""book_id"":book_id}).fetchall()
	for review in reviews:
		print(review)",通过$conn$执行SQL（根据$book_id$获取review表中的所有列）并获取所有数据，然后使用for循环打印查询结果中的每一项,Execute the SQL through $conn$ (get all the columns in the review table based on $book_id$) and get all the data. Use for loop to print each item of the query results.
11376,"from flask import jsonify
def stockdata(conn,adj_open,end_val):
	qry = ""select * from stock_data where adj_open = :adj_open and end_val = :end_val""
	data = conn.execute(qry, {""adj_open"": adj_open, ""end_val"": end_val}).fetchall()
	return jsonify(data)","设置sql（根据$adj_open$和$end_val$查询stock_data表中全部信息）,使用$conn$执行SQL并获取所有查询结果，并返回转化为json格式的查询结果。","Set up sql (query all the information in the stock_data table based on $adj_open$ and $end_val$), use $conn$ to execute SQL and get all the query results, and return the query results that converted to json format."
13834,"from sqlalchemy import create_engine
def query_database(url, SCHEMA_NAME):
	engine = create_engine(url)
	res = engine.execute(""SELECT SCHEMA FROM INFORMATION WHERE SCHEMA_NAME =: SCHEMA_NAME"", {""SCHEMA_NAME"": SCHEMA_NAME}).fetchone()
	return res",通过$url$获取数据库引擎。执行SQL语句（查询INFORMATION表中SCHEMA_NAME为$SCHEMA_NAME$的第一条SCHEMA），返回查询结果。,Get the database engine through $url$. Execute SQL statement (query the first piece of SCHEMA with $SCHEMA_NAME$ in the INFORMATION table) and return the query result.
13184,"def run(conn, domain_id):
	ret = []
	sql = ""SELECT MAX(id) FROM documents WHERE domain_id =: domain_id""
	for _id in conn.execute(sql,{""domain_id"":domain_id}).fetchall():
		ret.append (_id)
	return ret",使用$conn$执行SQL（根据$domain_id$获取documents表中的最大id列）并获取所有数据，然后使用for循环对查询结果的每一项存储为list类型，最后返回list内容,"Use $conn$ to execute the SQL (get the maximum ID column in the documents where the id of domain is $domain_id$) and get all the data, then use the for loop to store each item of the query result as a list type, and finally return the list content."
11519,"def query_info(conn, type):
	bout = conn.execute(""SELECT bname FROM pages WHERE type = :type"", {""type"": type}).fetchone()
	print(bout)
	return [item[0] for item in bout]",使用$conn$连接执行SQL语句为根据$type$获取pages中的第一条bname，打印所获取的数据，并将查询结果每一项的第0个元素存储为list并返回。,"Use the $conn$ connection to execute the SQL statement to get the first piece of bname in pages based on $type$, print the obtained data, and store the 0th element of each item of the query result as a list and return it."
13744,"def testDB(conn,testDB):
	result = conn.execute(""select * from dataSST where testDB = :testDB"",{""testDB"":testDB}).fetchall()
	for r in result:
		print(r)",使用$conn$执行SQL（根据$testDB$查询dataSST表中所有列），并获取所有查询结果，用for循环遍历获取的所有查询结果，将每条数据打印。,"Use $conn$ to execute SQL (query all columns in the dataSST table based on $testDB$), get all the query results, use for loop to traverse all the obtained query results, and print each piece of data."
11583,"def database_exists(conn, datname):
	r = ""SELECT * FROM pg_database WHERE datname = %s""%datname
	r = conn.execute(r)
	try:
		ret = r.cursor.fetchall()
		return ret
	finally:
		r.cursor.close()",设置SQL语句，内容为:通过$datname$查询pg_database中的所有列，使用%操作符匹配SQL字符串中的条件。通过$conn$执行SQL语句。尝试使用游标获取全部数据，并返回所有的查询结果。最后确保游标关闭。,"Set the SQL statement and the content: Query all the columns in the pg_database through $datname$ and use the% operator to match the conditions in the SQL string. Execute the SQL statement through $conn$. Try to use the cursor to get all the data, return all the query results, and make sure the cursor is closed."
11403,"import time
def fresh_cache(conn, app_eui):
	while True:
		sql = ""SELECT * FROM app_default_class WHERE app_eui =: app_eui""
		result = conn.execute(sql,{""app_eui"":app_eui}).fetchall()
		for row in result:
			print(row)
		time.sleep(6)","设置sql（根据$app_eui$查询app_default_class表中全部信息）,使用$conn$执行SQL并获取所有查询结果，用for循环遍历并打印获取的所有查询结果，挂起进程6秒。","Set up SQL (query all the information in the app_default_class table based on $app_eui$), execute SQL with $conn$ and get all the query result. Use for loop to iterate through and print all the query result, and hang the process for 6 seconds."
14007,"from flask import render_template
def write_review(conn,isbn):
	book = conn.execute(""SELECT * FROM books WHERE isbn =:isbn"",{""isbn"": isbn}).fetchone()
	return render_template(""review.html"", book=book, logged_in=True)","使用$conn$查询books表中isbn为$isbn$的所有列，并获取第一条信息，渲染并返回""review.html""，其中book参数为查询结果，logged_in参数为True。","Use $conn$ to query all columns in the books table whose isbn is $isbn$, and get the first piece of information. Render and return ""review.html"", where 'book' parameter is the query result and logged_in parameter is True."
13636,"from sqlalchemy.sql import select
def check_link(connection,link_table,target_type,target_id):
	try:
		query = select(link_table).where(link_table.c.target_type==target_type).where(link_table.c.target_id==target_id)
		res = connection.execute(query,{""target_type"":target_type,""target_id"":target_id}).fetchall()
		return [row for row in res]
	finally:
		connection.close()",尝试性执行如下代码：使用python表达式方式设置SQL（根据$target_type$和$target_id$查询$link_table$表中的所有信息）；使用$connection$执行SQL并获取所有数据；使用list返回查询结果。最终确保$connection$关闭。,"Try the following code: set the SQL using a python expression (query all the information in the $link_table$ where target_type is $target_type$ and target_id is $target_id$) ; execute the SQL using $connection $and get all the data; and return the query results using list. Finally, make sure the $connection$ is closed."
14147,"def do_recover_twophase(connection):
	resultset = connection.execute(""SELECT gid FROM pg_prepared_xacts"").fetchall()
	return [row[0] for row in resultset]",通过$connection$从pg_prepared_xacts表中查询所有gid，将查询结果每一项转化为dict存储为list并返回。,"Query all gid from pg_prepared_xacts table via $connection$, convert each item of query result into dict to store as 'list' and return."
13328,"def get_table_columns_info(conn,table_name):
	sql_query = ""SELECT * FROM columns WHERE table_name=%s""%(table_name)
	result = conn.execute(sql_query).fetchall()
	columns = []
	for row in result:
		columns.append((row[0], row[1], row[2]))
	return columns","使用字符串匹配设置sql（根据$table_name$查询columns表中全部信息）,使用$conn$执行SQL并获取所有查询结果，使用for循环将查询结果的每一条的第0个、第1个、第2个元素构成一个元组，并以list形式存储，返回这个list.","Use the string matching to set sql (query all the information in the columns table according to $table_name$), use $conn$ to execute SQL, get all the query results, use for loop to form a tuple of the 0th, 1st and 2nd elements of each article of the query results, store them in the form of list, and return this list."
11639,"from sqlalchemy import create_engine
def get_codes(data,cname):
	engine = create_engine(data)
	connection = engine.connect()
	codes = connection.execute(""select * from Codes where codes_name=:cname"",{""cname"":cname}).fetchall()
	return codes",使用$data$获取数据库引擎并连接数据库，执行SQL（根据codes_name为$cname$获取Codes表中的所有列）并获取所有数据，最后返回查询结果,"Use $data$ to get the database engine and connect the database, execute SQL (get all the columns in the Codes table where codes_name is $cname$), get all the data, and finally return the query result."
13870,"def test_roundtrip(conn, id):
	result = conn.execute(""SELECT * FROM test_frame_roundtrip WHERE id = :id"", {""id"": id}).fetchall()
	assert result != []",使用$conn$连接执行SQL语句（根据$id$查询test_frame_roundtrip表中的所有列）并获取全部数据，设置断言判断返回结果不为空list。,Use $conn$ connection to execute SQL statement (query all columns in test_frame_roundtrip table based on $id$) and get all the data. Set assertion to determine that the returned result is not empty list.
11265,"def test_invalidate_trans(db,call):
	conn = db.connect()
	sql = 'select * from users where call=:call'
	kueridb = conn.execute(sql, {""call"": call}).fetchall()
	return kueridb",使用$db$连接数据库，执行SQL（根据$call$获取users中的所有列）并获取所有数据，最后返回获取的结果数据,"Use $db$ to connect to the database, execute SQL (get all the columns in the users based on $call$), get all the data, and finally return the obtained result data."
14155,"from flask import render_template, request, redirect
def register(conn, uname):
	if request.method == ""POST"":
		check = conn.execute(""SELECT * FROM users WHERE username = :username"",{""username"":uname}).fetchall()
		if len(check.fetchone()) != 0:
			return render_template(""error.html"")
		else: 
			return redirect(""/"")
	if request.method == ""GET"":
		return render_template(""register.html"")","若request模块通过POST方式发送请求，通过$conn$执行SQL（查询users表中username为$uname$的所有列）获取所有数据。如果所获取数据的第一条数据的长度不为0，渲染并返回""error.html""；否则，使用redirect返回""/""。若request模块通过GET方式发送请求，渲染并返回""register.html""。","If the request module sends the request through POST, execute SQL via $conn$ (query all columns in the users table where 'username' is $uname$) to get all the data. If the length of the first piece of data obtained is not 0, render and return ""error.html""; otherwise, use redirect to return ""/"". If the request module sends the request through GET, render and return ""register.html""."
11156,"from flask import request,jsonify
def getdata(conn,shoeid):
	if request.method == 'GET':
		addshoe = ""SELECT * FROM shoe WHERE shoeid={}"".format(shoeid)
		rows=conn.execute(addshoe).fetchall()
		conn.close()
		return jsonify(rows)","如果request模块发送请求的方式为GET，设置SQL语句（使用format()函数格式化输出字符串,通过字符串$shoeid$查询shoe表中的所有列）,使用$conn$连接执行SQL语句获取所有数据,确保数据库连接关闭，以jsonify形式返回所获取的数据。","If the request module sends the request as GET, set the SQL statement (format the output string with the format () function. Query all the columns in the shoe table with the string $shoeid$) , and execute SQL statement with $conn$ connection to GET all the data, make sure the database connection is closed and return the data obtained as jsonify."
13042,"from sqlalchemy import create_engine
def deleteid(sqlite,imageId):
	engine = create_engine(sqlite)
	connection = engine.connect()
	delid = connection.execute(""SELECT image FROM imagesAbout WHERE imageId=:imageId"",{""imageId"":imageId}).fetchone()
	return delid",使用$sqlite$创建数据库引擎，并根据引擎获取数据库连接。使用连接执行SQL（根据$imageId$查询imagesAbout表中的image信息）并获取第一条数据。最后返回查询结果。,"Use $sqlite$ to create the database engine and obtain the database connection according to the engine. Use the connection to perform SQL (query the image information in the imagesAbout table based on $imageId$) and get the first piece of data. Finally, return the query result."
13054,"from sqlalchemy.sql import select
from sqlalchemy import exc
def count_rows(conn,table,table_id):
	try:
		sel = select([table]).where(table.c.id == table_id)
		rows = conn.execute(sel).fetchall()
		return rows
	except exc.SQLAlchemyError as err:
		print(err)
		return False",尝试性执行如下代码：使用python表达式方式设置SQL（查询当id为$table_id$时$table$表中的所有信息）；使用$conn$执行SQL并获取所有数据；最后返回查询结果。如果出现了SQLAlchemyError异常，则打印具体异常信息并返回False。,"Try to execute the following code: Use python expression to set SQL (query all the information in the $table$ table when id is $table_id$); use $conn$ to execute SQL and get all the data and finally return the query results. If a SQLAlchemyError exception occurs, the specific exception information should be printed and return False."
13189,"def GetDates(conn, days):
	cmd = ""SELECT date FROM StockDB WHERE days =:days""
	ft=conn.execute(cmd,{""days"":days}).fetchall()
	date = [elt[0] for elt in ft]
	return date",使用$conn$执行SQL（根据$days$获取StockDB表中的date列）并获取所有数据，然后使用for循环对查询结果的每一项的第0个元素存储为list，最后返回list内容,"Execute the SQL (get the date column in the StockDB where days is $days$) with $conn$ and get all the data, then use the for loop to store the tenth element of each item of the query result as a list and return the list content."
13992,"def main(conn,origin,destination):
	dura = conn.execute(""SELECT duration FROM flights WHERE origin = :origin and destination = :destination"",{""origin"": origin, ""destination"": destination}).fetchone()
	return dura",使用$conn$执行SQL语句：根据$origin$和$destination$查询flights表中第一条duration，返回查询结果。,Use $conn$ to execute the SQL statement: Query the first piece of duration in the flights table based on $origin$ and $destination$ and return the query result.
13763,"from flask import request
def log(conn,username):
	if request.method == ""POST"":
		try:
			ans = conn.execute(""SELECT user FROM logs WHERE username = :username "", {""username"":username}).fetchone()
			return ans
		except Exception:
			return False","如果请求方式为""POST""，尝试使用$conn$执行SQL（根据$username$查询logs表中user列），并获取第一条数据，返回查询数据，如果执行时出现Exception异常，则返回False。","If the request method is ""POST"", try to use $conn$ to execute SQL (query the user column in the logs table based on $username$), get the first piece of data, return the query data. Return False if an Exception occurs during execution."
13113,"import sqlalchemy
def test_parameter(conn,cat):
	query = sqlalchemy.sql.text(""SELECT col_string FROM one_row_complex WHERE cat =:cat"")
	result = conn.execute(query, {""cat"":cat}).fetchall()
	return result",使用text方法设置SQL（根据$cat$获取one_row_complex表中的col_string列），然后使用$conn$执行SQL语句并获取所有数据，最后返回查询结果,"Set up the SQL using the text method (get the col_string in one_row_complex where cat is $cat$) , then execute the SQL statement using $conn$ to get all the data and return the query results."
14022,"from sqlalchemy import create_engine
from flask import jsonify
def counties(sqlite, state):
	engine = create_engine(sqlite)
	connection = engine.connect()
	result = connection.execute(""SELECT us_county FROM tblByCountyAndYear WHERE us_state = :state"",{""state"":state}).fetchall()
	connection.close()
	counties = []
	for row in result:
		counties.append(row[0])
	return jsonify(counties)",通过$sqlite$获取数据库引擎并建立连接。执行SQL语句（当us_state等于$state$时获取tblByCountyAndYear表中的所有us_county数据），关闭数据库连接。使用for循环将查询结果中的每一项元素都存储到list中并将list内容返回。,Get the database engine and establish a connection through $sqlite$. Execute the SQL statement (get all the us_county data in the tblByCountyAndYear table where us_state is $state$) and close the database connection. Use for loop to store each element in the query result into list and return the list content.
13950,"import sqlalchemy
def tearDown(db_uri, value):
	engine = sqlalchemy.create_engine(db_uri)
	conn = engine.connect()
	query_sql = ""SELECT * FROM database WHERE value =: value""
	data = conn.execute(query_sql,{""value"":value}).fetchall()
	conn.close()
	return data",运用$db_uri$获取数据库引擎并建立连接。设置SQL语句（根据$value$查询database表中的所有列）。执行SQL获取所有信息。确保关闭数据库连接。返回获取到的所有数据。,"Use $db_uri$ to get the database engine and establish a connection. Set the SQL statement (query all columns in the database table based on $value$). Execute SQL, get all the information, make sure that the database connection is closed and return all the obtained data."
13319,"from sqlalchemy import create_engine
def score_select(game,Score,id):
	engine = create_engine(game)
	score = engine.query(Score).filter(Score.id == id).first()
	return score",通过$game$获取数据库引擎并建立连接。使用ORM的方式，执行SQL语句（根据$id$查询$Score$表中所有列），并获取第一条数据，将查询结果返回。,"Get the database engine and establish a connection through $game$. Use ORM method to execute the SQL statement (query all the columns in the $Score$ table according to $id$), get the first piece of data, and return the query results."
11078,"def address_showdb(conn,group):
	if not group:
		print(""group is None"")
	else:
		groupres=conn.execute(""SELECT * FROM address WHERE group=:group"",{""group"":group}).fetchall()
		return [dict(row) for row in groupres]","如果$group$不存在，则打印""group is None""。否则使用$conn$执行SQL（根据$group$查询address表中的所有列）并获取所有数据。将查询结果中的每一项转化为dict类型并返回。","If $group$ does not exist, print ""group is None"". Otherwise, use $conn$ to execute SQL (query all columns in the address table based on $group$) and get all the data. Convert each item in the query result to a dict type and return."
13756,"def test_do(conn, addend1, addend2):
	sql = ""SELECT * FROM Callback where addend1 = :addend1 and addend2 = :addend2""
	rp = conn.execute(sql, {""addend1"": addend1, ""addend2"": addend2}).fetchall()
	return rp","设置sql（根据$addend1$和$addend2$查询Callback表中全部信息）,使用$conn$执行SQL并获取所有查询结果，返回查询结果。","Set sql (query all the information in the Callback table based on $addend1$ and $addend2$), use $conn$ to execute SQL, get all the query results, and return them."
13563,"import sqlalchemy
def test_csv_postgres_load(url,tbl):
	engine = sqlalchemy.create_engine(url)
	conn = engine.raw_connection()
	cursor = conn.cursor()
	load = 'select * from full_path where tbl=:tbl'
	res=cursor.execute(load,{""tbl"":tbl}).fetchall()
	return res",通过$url$获取数据库引擎并建立连接。建立游标，并设置SQL语句（根据$tbl$查询full_path表中所有列），执行sql并获取所有数据，将查询结果返回。,"Get the database engine and establish a connection through $url$. Set up a cursor and set the SQL statement (query all columns in the full_path table according to $tbl$), execute sql, get all the data, and return the query results."
14273,"def locationDistanceSingleOrig(conn, nameID):
	q='SELECT latitude, longitude FROM Campground WHERE nameID=:nameID'
	res = conn.execute(q, {""nameID"":nameID}).fetchone()
	if res:
		print(res)",设置SQL语句：通过$nameID$查询Campground表中的latitude和longitude数据，使用$conn$执行SQL获取第一条数据。如果获取的数据不为空，则将其打印。,"Set the SQL statement: Query the latitude and longitude data in the Campground table through $nameID$, and use $conn$ to execute SQL to get the first piece of data. If the data obtained is not empty, it is printed."
13619,"def test_select(conn,db_name):
	sql = ""select * from TABLE1 where db_name = {}"".format(db_name)
	result = conn.execute(sql).fetchall()
	assert len(result)!=0",使用字符串format方法设置SQL：根据$db_name$查询TABLE1中的所有列。使用$conn$执行SQL并获取所有数据。设置断言判断查询结果长度不为0。,Use the string format method to set SQL:  query all columns in TABLE1 based on $db_name$. Execute SQL with $conn$ and get all the data. Set assertion to determine that the length of the query result is not 0.
14221,"from sqlalchemy import create_engine
def getAllProviders(db_string): 
	db = create_engine(db_string) 
	fornecedores = db.execute(""SELECT * FROM tb_fornecedores"").fetchall()
	return fornecedores",通过$db_string$创建数据库引擎。执行SQL：查询tb_fornecedores表中的所有列，并获取所有数据。返回获取到的所有数据。,Create the database engine through $db_string$. Execute a SQL: Query for all columns in the tb_fornecedores table and get all the data. Return all obtained data.
13760,"def test_explode_in_initializer_disconnect(engine,dialect):
	res = engine.execute(""select fake_stuff from fake_table where dialect = :dialect"",{""dialect"":dialect}).fetchall()
	assert len(res)>0
	return res",利用$engine$执行SQL（根据$dialect$查询fake_table表中fake_stuff列），并获取有查询结果，设置断言判断查询结果长度是否大于0，将查询结果返回。,"Use $engine$ to execute SQL (query the fake_stuff column in the fake_table table according to $dialect$), get all the query results, set assertions to determine whether the length of the query results is greater than 0, and return the query results."
11476,"def select_value(conn, name):
	query_sql = ""SELECT updatetime FROM obj WHERE name =: name""
	results = conn.execute(query_sql,{""name"":name}).fetchall()
	updatetime = [dict(zip(tuple(results.keys()), record)) for record in results.cursor]
	return updatetime","设置sql（根据$name$查询obj表中updatetime列）,使用$conn$执行SQL并获取所有查询结果，使用for循环遍历获取结果的cursor，将每条数据的keys与值接连转化为tuple，zip和dict，并存到一个list中。最后返回这个list。","Set up the SQL (query the updatetime column in the obj table based on $name$), use $conn$ to execute the SQL and get all the query results. Use for loop to iterate through the cursor of the obtained results, convert 'keys' and 'values' of each piece of data into tuple, zip and dict, and store in a list. Finally return the list."
11340,"from sqlalchemy.sql import select
def where_clause_fn(conn,note_box,id):
	sql = select(note_box).where(note_box.c.id == id)
	stmt = conn.execute(sql).fetchall()
	return stmt",使用$conn$执行python表达式（根据$id$查询$note_box$表中所有列）并获取所有数据，返回查询结果。,"Use $conn$ to execute the python expression (query all the columns in the $note_box$ table based on $id$), get all the data, and return the query results."
11601,"def test_reconnect(db,is_disconnect):
	conn = db.connect()
	assert not conn.closed
	res = conn.execute(""select count(connections) from DBAPI where is_disconnect=:is_disconnect"",{""is_disconnect"":is_disconnect}).fetchall()
	conn.close()
	return res",使用$db$连接数据库，然后设置断言不关闭连接，执行SQL（根据$is_disconnect$获取DBAPI表中被计数处理过的connections列）并获取所以数据，进一步关闭连接，最后返回查询结果,"Use $db$ to connect the database, then set the assertion not to close the connection, execute SQL (get the counted connections column in the DBAPI table according to $is_disconnect$) and get all the data, further close the connection, and finally return the query result."
14062,"from flask import render_template
def book(conn, book_id):
	book = conn.execute(""SELECT * FROM books WHERE id = :id"", {""id"": book_id}).fetchone()
	if book is None:
		return render_template(""error.html"")
	for k, v in book.items():
		print(k, v)
	return render_template(""book.html"", book=book)","使用$conn$查询books表中id为$book_id$的所有列，并获取第一条数据，如果查询结果为空，渲染并返回""error.html""；for循环遍历查询结果，通过items() 方法以列表返回可遍历的(键, 值) 元组数组。否则渲染并返回""book.html"", 其中book参数为查询结果。","Use $conn$ to query all the columns in the books table that an id is $book_id$, and get the first piece of data. If the query result is empty, render and return ""error.html""; use for loops traversal to query results, return a traverable (key, value) tuple array in a list through the items () method. Otherwise, render and return ""book.html"", where the book parameter is the query result."
13544,"import logging
def connect(connection,name):
	logger = logging.getLogger()
	if name:
		q = ""SELECT value FROM version WHERE name=:name""
		cursor = connection.execute(q,{""name"":name})
		schema_version = cursor.fetchone()[0]
		logger.info(schema_version)","初始化日志模块，如果$name$有值，设置sql（根据$name$查询version表中value列）,使用$connection$执行SQL并获取第一条数据的第0个元素。输出获取结果的info日志。","Initialize the log module, if $name$ has a value, set sql (query the value column in the version table based on $name$), use $connection$ to execute SQL and get the 0th element of the first piece of data. Output the info log that gets the result."
11089,"from sqlalchemy import create_engine
from sqlalchemy.orm.session import sessionmaker
def init_test(host,row):
	engine = create_engine(host)
	session = sessionmaker(bind=engine)
	session = session()
	grades=session.execute(""SELECT grades FROM tbl_epstrade WHERE row<:row"",{""row"":row}).fetchall()
	return grades",基于$host$创建数据库引擎，并使用sessionmaker创建session实例化对象。通过实例化后的对象执行SQL（根据$row$查询tbl_epstrade表中的grades信息）并获取所有数据。最后返回查询结果。,"Create a database engine based on $host$ and use sessionmaker to create session instantiated objects. Execute SQL through the instantiated object (query the grades information in the tbl_epstrade table based on $row$) and get all the data. Finally, return the query result."
13629,"def getqueue(conn,id):
	query = ""select * from queue_table where id =: id""
	result = conn.execute(query,{""id"":id}).fetchone()
	if len(result) > 0:
		return result[0]",设置SQL：通过$id$查询queue_table表中的所有列。使用$conn$执行SQL并获取第一条数据。如果查询结果长度大于0，则返回查询结果第0条元素。,"Set SQL: query all columns in the queue_table where id is $id$. Execute SQL with $conn$ and get the first data. If the query result length is greater than 0, the 0th element of the query result is returned. "
11035,"from sqlalchemy.sql import select
from flask import render_template
def book(conn,flights,flight_id):
	try:
		s = select(flights).where(flights.c.id == flight_id)
		result = conn.execute(s).fetchall()
		if len(result):
			return render_template(""success.html"")
		else:
			return render_template(""error.html"", message=""Sorry, no such flight with that id."")
	except ValueError:
		return render_template(""error.html"", message=""Invalid flight number."")","尝试执行如下代码：用python表达式设置SQL：当id为$flight_id$的时候，查询$flights$表中对应的所有信息；使用$conn$执行SQL并获取所有数据；如果查询结果长度不为0，则渲染""success.html""页面并返回；否则message参数传入""Sorry, no such flight with that id.""并返回渲染后的""error.html""页面。如果出现ValueError异常，则message参数传入""Invalid flight number.""并渲染""error.html""页面。","Try to execute the following code: Use the python expression to set SQL: When id is $flight_id$, query all the corresponding information in the $flights$ table; use $conn$ to execute SQL and get all the data; if the query result length is not 0, render the ""success.html"" page and return; otherwise, pass ""Sorry, no such flight with that id."" to the message parameter and return the rendered ""error.html"" page. If a ValueError exception occurs, pass ""Invalid flight number."" to the message parameter and render the ""error.htm"" page."
11384,"def create_and_populate_raw_table(db_engine,test):
	query = db_engine.execute(""SELECT sample FROM raw_data where test=:test"", {""test"": test}).fetchall()
	for i in query:
		print(i)",使用$db_engine$执行SQL（根据$test$查询raw_data表中sample列），并获取所有查询结果，使用for循环将查询结果逐条打印。,"Use $db_engine$ to execute SQL (query the sample column in the raw_data table based on $test$), get all the query results, and use for loop to print the query results one by one."
13143,"def get_user(conn, name, email, city, phone):
	query = ""select * from users where name=:name and email=:email and city=:city and phone=:phone""
	exc = conn.execute(query, {""name"":name, ""email"":email, ""city"":city, ""phone"":phone}).fetchall()
	print(exc)",使用$conn$执行SQL（根据$name$、$email$、$city$和$phone$获取users表中的所有列）并获取所有数据，最后打印查询结果,"Execute SQL (get all columns in the users where the name is $name$, email is $email$, city is $city$, and phone is $phone$) with $conn$ and get all the data, and print the query results."
11210,"def buscarPeli(conn,movietitle):
	query = ""select * from imdb_movies where movietitle =:movietitle""
	db_result = conn.execute(query,{""movietitle"":movietitle}).fetchall()
	return list(db_result)",使用$conn$执行SQL（根据$movietitle$查询imdb_movies表中的所有列）并获取所有数据，然后将获取结果转化为list类型并返回,"Use $conn$ to execute SQL (query all columns in the imdb_movies table based on $movietitle$) and get all the data, then convert the result to list type and return."
13929,"def get_flights(conn, value):
	sql = ""SELECT * FROM flights WHERE value =: value""
	flights = conn.execute(sql,{""value"":value}).fetchall()
	return [flight for flight in flights]",设置SQL语句为：通过$value$查询flights中的所有列，使用$conn$连接执行SQL获取所有数据，将查询结果存储为list并返回。,"Set the SQL statement: Query all the columns in the flights table through $value$, use the $conn$ connection to execute SQL, get all the data, store the query result as list and return."
13730,"def get_pwid_by_name(conn, name):
	slf = conn.execute('SELECT id FROM targets WHERE name = :name', {""name"":name}).fetchone()
	return slf[0]",使用$conn$执行SQL（根据$name$查询targets表中id列），并获取第一行数据，将查询结果的第0个元素返回。,"Use $conn$ to execute SQL (query the id column in the targets table according to $name$), get the first row of data, and return the 0th element of the query result."
13761,"def getUser(session, id):
	imp = session.execute(""SELECT * FROM Users WHERE id = :id"",{""id"": id}).fetchall()
	session.close()
	return imp",通过$session$执行SQL（根据$id$查询Users表中所有列），并获取所有数据，关闭连接，将查询结果返回。,"Execute SQL through $session$ (query all columns in the Users table based on $id$), get all the data, close the connection, and return the query result."
13618,"def test_db(connection, root_username, root_password):
	try:
		sql = ""select * from USER where username = :root_username and password =:root_password""
		res = connection.execute(sql,{""root_password"":root_password,""root_username"":root_username}).fetchone()
		connection.close()
		return res
	except:
		return False","尝试性执行如下语句：设置SQL（查询当username为$root_username$,password为$root_password$时USER表中的所有列）；使用$connection$执行SQL并获取第一条数据；关闭连接并返回查询结果。如果出现异常则返回False。",Try to execute the following statements: set the SQL (query for all columns in the USER table where username is $root_username$ and password is $root_password$) ; execute the SQL using $connection$ and get the first data. Close the connection and return the result of the query. Return False if exception occurs.
13068,"def test_save(conn):
	entities = conn.execute(""SELECT * FROM my_entities"").fetchall()
	assert len(entities) != 0
	return [item for item in entities]",使用$conn$执行SQL（查询my_entities表中的所有列）并获取所有数据。设置断言判断查询结果长度不为0。最后使用list形式返回查询结果。,"Use $conn$ to execute SQL (query all columns in the my_entities table) and get all the data. Set the assertion to determine that the query result length is not 0. Finally, return the query results in list form."
13969,"from sqlalchemy.sql import select
def display_article_by_name(conn, name, articles_table):
	try:
		sql = select([articles_table]).where(articles_table.c.name == name)
		results = conn.execute(sql).fetchall()
		return results
	except Exception as e:
		print(e)
		return",尝试使用Python表达式的方式设置SQL（通过$name$查询$articles_table$表中的全部数据）。使用$conn$连接执行SQL获取所有数据。若出现Exception，打印异常信息并直接返回。,"Try to use the Python expression to set up SQL (query all the data in the $articles_table$ table through $name$). Use the $conn$ connection to execute SQL to get all the data. If an Exception occurs, print exception information and return directly."
11185,"def get_flow_data(conn,devid,hour):
	res_data=conn.execute(""SELECT * FROM flows WHERE devid=:devid AND hour=:hour"",{""devid"":devid,""hour"":hour}).fetchall()
	return [dict(row) for row in res_data]",通过$conn$连接执行SQL语句：根据$devid$和$hour$获取$flows$中的所有列，并获取全部数据，将查询结果每一项转化为dict存储为list并返回。,"Execute the SQL statement with the $conn$ connection: Get All the columns in $flows$ where devid is $devid$ and hour is $hour$, and get all the data, and turn each item of the query into a dict and store it as a list and return."
14129,"def showAll(conn):
	cursor = conn.cursor()
	res = cursor.execute('select * from app').fetchall()
	return res",通过$conn$创建游标对象，并通过游标执行SQL：从app表中查询所有列，并获取所有数据，返回所有的查询结果。,"Create cursor object by $conn$ and execute SQL by cursor: Query all columns from app table, get all the data and return all query results."
11074,"def count(conn,countid):
	num=conn.execute(""SELECT COUNT(*) FROM ratings WHERE countid=:countid"",{""countid"":countid})
	return num.fetchone()[0][0]",使用$conn$执行SQL（根据$countid$查询ratings表中的数据的数量），返回第一条查询结果中的[0][0]号元素。,Use $conn$ to execute SQL (query the amount of data in the ratings table according to $countid$) and return the [0] [0] element in the first query result.
13889,"from flask import jsonify
def get_bar_counts(db, isbn):
	row = db.execute(""SELECT * FROM books WHERE isbn = :isbn"", {""isbn"": isbn}).fetchone()
	if not row:
		return jsonify({""error"": ""Invalid isbn""})","使用$db$执行SQL语句：通过$isbn$查询books中的所有列，并获取第一条数据，如果没有查询结果，则通过jsonify返回""error""，其内容为 ""Invalid isbn""。","Execute SQL statement with $db$: Query all columns in books through $isbn$ and get the first piece of data. If there is no query result, then return ""error"" through jsonify with the content ""Invalid isbn""."
13044,"def activateSurvey(conn,survey,company,department):
	sql =""SELECT activateSurvey FROM userdetails WHERE survey=:survey AND company:=company AND department=:department""
	values = conn.execute(sql,{""survey"":survey,""company"":company,""department"":department}).fetchone()
	return values",设置SQL：根据$survey$，$company$和$department$查询userdetails表中的activateSurvey信息。使用$conn$执行SQL并获取第一条数据，然后返回查询结果。,"Set SQL: To query the activateSurvey information in the userdetails table based on $survey$,$company$ and $department$. Use $conn$ to execute SQL and get the first piece of data, and then return the query results."
11244,"def test_raw_python(db,user_id):
	conn = db.connect()
	try:
		res = conn.execute('select * from users where user_id=:user_id',{""user_id"":user_id}).fetchall()
		return res
	finally:
		conn.close()",使用$db$连接数据库，尝试执行SQL（根据$user_id$获取users中的所有列）并获取所有数据，返回查询结果，最终确保连接关闭,"Connect to the database with $db$, try to execute the SQL (get all columns in users based on $user_id$), get all the data, return the query result, and finally make sure the connection is closed."
13358,"def get_metadata(conn,content_id):
	rows=conn.execute(""SELECT * FROM uploads_content WHERE content_id=:content_id"",{""content_id"":content_id}).fetchall()
	for e in rows:
		print(e)",使用$conn$执行SQL（根据$content_id$查询uploads_content表中的所有列），并获取所有查询结果，利用for循环输出每一条查询结果。,"Use $conn$ to execute SQL (query all columns in the uploads_content table based on $content_id$), get all the query results, and use for loop to output each query result."
13211,"from sqlalchemy import create_engine
def search_table(connection_str):
	enj = create_engine(connection_str, encoding='utf-8')
	db_result = enj.execute(""SELECT * FROM db_name"").fetchall()
	return db_result",通过$connection_str$获取数据库引擎（设置encoding参数为'utf-8'），执行SQL语句（查询db_name表中的所有列），获取所有数据并返回。,"Get the database engine through $connection_str$ (set the encoding parameter to 'utf-8') , execute the SQL statement (query all columns in the db_name) , get all the data and return."
13892,"def select_db(conn, name):
	result = conn.execute(""SELECT * FROM database WHERE name = :name"", {""name"": name})
	if not result.rowcount :
		raise (""Error"")
	conn.close()
	return True",使用$name$查询database表中的所有列，并获取全部数据，如果没有查询结果的行数，使用raise抛出异常并附带“Error”信息。确保$conn$关闭并返回True。,"Use $name$ to query all columns in the database table and get all the data. If there is no row of the query result, use raise to throw the exception with an ""Error"" message. Make sure $conn$ is closed and returns True."
11690,"def get_bikestands(engine,name):
	li = []
	rows = engine.execute(""SELECT bike_stands FROM stations1 WHERE name=:name"",{""name"":name}).fetchall()
	for row in rows:
		li.append(dict(row))
	return li",利用$engine$执行SQL（根据$name$获取stations1表中的bike_stands列）并获取所有数据，然后使用for循环对查询结果的每一项转化为字典类型再存储为list，最后返回list内容,"Execute SQL with $engine$ (get the bike_stands column in the stations1 table according to $name$), get all the data, then use for loop to convert each item of the query result into a dictionary type, store it as list, and finally return list content."
14239,"from sqlalchemy.sql import select
def search_property(engine,users,name):
	with engine.acquire() as conn:
		stmt=select([users.c.id]).where(users.c.name==name)
		res = conn.execute(stmt).fetchall()
		if len(res)<1:
			return 
		return res",使用with语句根据$engine$连接数据库。使用Python表达式的方式设置SQL语句：根据$name$查询$users$表中的id数据，执行SQL获取所有数据。如果获取数据的长度小于1，则直接返回。否则返回获取到的所有数据。,"Use the with statement to connect to the database according to $engine$. Use the Python expression to set up the SQL statement: Query the id data in the $users$ table according to $name$, and execute SQL to get all the data. If the length of the obtained data is less than 1, return directly. Otherwise, return all the obtained data."
13166,"from sqlalchemy import create_engine
def set_owner(db_url,table_schema):
	engine = create_engine(db_url)
	conn = engine.connect()
	sql = ""SELECT table_name FROM information_schema where table_schema = $table_schema$""
	try:
		res = conn.execute(sql,{""table_schema"":table_schema}).fetchone()
		return res
	except Exception as e:
		raise e",使用$db_url$获取数据库引擎并连接数据库，尝试执行SQL(根据$table_schema$获取information_schema表中的table_name列)并获取第一条数据，然后返回查询结果，如果执行时出现异常，则直接抛出异常,"Use $db_url$ to get the database engine and connect to the database, try to execute SQL (get the table_name column in the information_schema where table_schema is $table_schema$) and get the first data, then return the query results, and throw an exception if an exception occurs during execution."
13627,"from flask import jsonify
def api(db, isbn):
	query = ""select avg(review_rating) from user_book_review where book_isbn = :isbn""
	book_average_score = db.execute(query,{""isbn"": isbn}).fetchone()
	return jsonify(book_average_score)",设置SQL：查询当book_isbn为$isbn$时user_book_review表中的review_rating的平均值。使用$db$执行SQL并获取第一条数据。使用序列化方法返回查询的数据。,Set SQL: query the average value of the review_rating in the user_book_review table when book_isbn is $isbn$. Execute the SQL using $db$ and get the first data. Return data for a query using a serialization method.
13047,"def database_exists(conn,database):
	try:
		text = ""SELECT * FROM pg_database WHERE datname=:database""
		values = conn.execute(text, {""database"": database}).fetchone()
		return values
	except:
		return False",尝试性执行如下代码：设置SQL（查询当datname为$database$时，pg_database表中的所有列）；使用$conn$执行SQL获取第一条数据并返回查询结果。如果出现异常则返回False。,Try to execute the following code: Set up SQL (query all columns in the pg_database table when datname is $database$); use $conn$ to execute SQL to get the first piece of data and return the query results. Returns False if an exception occurs.
11451,"def select_value(conn, doc):
	sql = ""SELECT * FROM tbl WHERE doc =: doc""
	results = conn.execute(sql,{""doc"":doc}).fetchall()
	return [rs for rs in results]","设置sql（根据$doc$查询tbl表中全部信息）,使用$conn$执行SQL并获取所有查询结果，用for循环遍历获取的所有查询结果，将每条数据插入一个list中，并返回这个list。","Set up SQL (query all information in tbl table based on $doc$), use $conn$ to execute SQL and get all query results. Use for loop to iterate through all query results, insert each data into a list, and return the list."
13534,"from flask import render_template, request
def pas(conn,id):
	if request.method == ""GET"":
		return 
	else:
		try:
			f = conn.execute(""SELECT name FROM flights WHERE id = :id"",{""id"":id}).fetchall()
			return render_template(""pass.html"",f = f)
		except (Exception):
			print(""no flights"")","如果请求方式为""GET""，返回空。否则，尝试使用$conn$执行SQL（根据$id$查询flights表中name列），并获取所有数据，返回渲染后的""pass.html""页面，其中f设置为查询数据。如果执行时出现Exception异常，打印""no flights""。","If the request method is ""GET"", return empty. Otherwise, try to use $conn$ to execute SQL (query the name column in the flights table based on $id$), get all the data, and return the rendered ""pass.html"" page, where 'f' is set to query data. If an Exception occurs during execution, print ""no flights""."
13926,"def review(conn, average_rating):
	sql = ""SELECT isbn FROM books WHERE average_rating =: average_rating""
	results = conn.execute(sql,{""average_rating"":average_rating}).fetchall()
	isbns = []
	for i in results:
		isbns.append(i)
	return isbns",设置SQL语句(根据$average_rating$查询books表中的isbn数据)，使用$conn$连接执行SQL获取所有数据。使用for循环将查询结果中的每一项元素都存储到list中并将list内容返回。,"Set the SQL statement (query the isbn data in the books table according to $average_rating$), use the $conn$ connection to execute SQL and get all the data. Use for loop to store each element in the query result into list and return the list content."
13748,"def getEnteredHtmlSet(connection,metadata):
	links = connection.execute(""select linkValue from tableHtml where metadata = :metadata"",{""metadata"":metadata}).fetchall()
	return [entry.linkValue for entry in links]",利用$connection$执行SQL（根据$metadata$查询tableHtml表中linkValue列）并获取所有数据，使用for循环将每一条查询结果的linkValue字段的值，以list存储并返回。,"Execute SQL with $connection$ (query the linkValue column in the tableHtml table according to $metadata$) and get all records, use for loop to store the value of the linkValue field of each query result in list and return."
13678,"from flask import render_template, request
def get_pw(conn,username):
	if request.method == ""GET"":
		return render_template(""pw_change.html"")
	else:
		ss = ""select password from users where username=:username""
		pw = conn.execute(ss, {""username"":username}).fetchall()
		return pw","如果request请求方法为GET，则返回渲染后的""pw_change.html""。否则设置SQL（根据$username$查询users表中的password信息），使用$conn$执行SQL并获取所有数据，最后返回查询结果。","If the request request method is GET, the rendered ""pw_change.html"" is returned. Otherwise, set SQL (query password information in the users table where username is $username$) , execute SQL with $conn$, get all the data, and return the query results."
11034,"def test_logging(connection,id):
	log = connection.execute(""SELECT test_logging FROM ratings WHERE id=:id"",{""id"":id}).fetchall()
	print(log)
	return [test[0] for test in log]",使用$connection$执行SQL（根据$id$查询ratings表中的test_logging）并获取所有数据。打印所有查询结果，并将查询结果中每一项的第0个元素存入到list并返回。,Use $connection$ to execute SQL (query the test_logging in the ratings table based on $id$) and get all the data. Print all query results and store the 0th element of each item in the query result into list and return.
11299,"def get_items(conn,sqlschema):
	req = 'SELECT sql_id_column FROM sql_table WHERE sqlschema=:sqlschema '
	try:
		res = conn.execute(req,{""sqlschema"":sqlschema}).fetchall()
		return res
	except:
		return False",设置SQL(根据$sqlschema$获取sql_table中的sql_id_column列)，尝试使用$conn$执行SQL语句并获取所有数据再返回查询结果，如果不返回False,"Set SQL (get the sql_id_column column in sql_table based on $sqlschema$), try to use $conn$ to execute the SQL statement, get all the data and return the query result. If not, return False."
13158,"def main(conn,category):
	clause = ""select key from clothes where category =: category""
	res=conn.execute(clause,{""category"":category}).fetchall()
	return res",使用$conn$执行SQL（根据$category$获取clothes表中的key列）并获取所有数据，最后返回查询结果,"Execute the SQL (get the key column in the clothes where category is $category$) with $conn$, get all the data, and return the query results."
11243,"def get_abstract(db_engine, paperid):
	tuples = db_engine.execute('select abstract from paperabstracts where paperid ={}'.format(paperid)).fetchall()
	if len(tuples) == 0:
		return ''
	return tuples[0]",使用$db_engine$执行SQL（根据format格式化方法处理的$paperid$获取paperabstracts表中的abstract列）并获取所有数据，如果获取的结果长度为0，则返回空，最后返回查询的结果的第0个元素,"Use $db_engine$ to execute SQL (get abstract column in paperabstracts table based on format-processed $paperid$), get all the data, return null if the length of the obtained result is 0, and finally return the 0th element of the query result."
13121,"def get_id(conn, model_id):
	result = conn.execute(""SELECT trained_model, metadata FROM models WHERE id =:model_id"",{""model_id"":model_id}).fetchone()
	return result[0]",使用$conn$执行SQL（根据id为$model_id$获取models表中的trained_model和metadata两列）并获取第一条数据，最后返回查询结果的第0个元素,"Execute SQL using $conn$ (to get the columns trained_model and metadata in the models where id is $model_id$) and get the first data, and finally return the 0th element of the query results."
13641,"def get_eoddata(conn,noofdays):
	if noofdays:
		sql = ""select * from eod_data where nse_date=:noofdays""
		data = conn.execute(sql,{""noofdays"":noofdays}).fetchall()
		return data",如果$noofdays$存在，则设置SQL（查询当nse_date为$noofdays$时eod_data中的所有列）。使用$conn$执行SQL获取所有数据，最后返回查询结果。,"If $noofdays$ exists, set SQL (query all columns in eod_data when nse_date is $noofdays$). Execute SQL with $conn$ to get all the data and return the query results."
14296,"def getdata(conn,email):
	res = conn.execute(""select usersname from users where email=:email"",{""email"":email}).fetchall()
	return res","使用$conn$执行SQL语句（根据$email$获取users表中的所有usersname）,并返回所有的查询结果。",Use $conn$ to execute the SQL statement (get all the usersname in the users table according to $email$) and return all the query results.
13526,"def importNeighbor(conn,districtA):
	try:
		ins = "" select * from Neighbors where DistrictAId=:districtA""
		res=conn.execute(ins,{""districtA"":districtA}).fetchall()
		return res
	except:
		return False",尝试设置SQL（根据DistrictAId的值为$districtA$查询Neighbors表中全部信息），使用$conn$执行sql并获取所有数据，返回查询数据。如果执行时出现异常，则返回False。,"Try to set SQL (query all the information in the Neighbors table where the value of DistrictAId is $districtA$), use $conn$ to execute sql and get all the data, and return the query data. If an exception occurs during execution, return False."
11115,"def migrate_finance(conn,con):
	sql = ""SELECT * FROM finance WHERE con={}"".format(con)
	texts = conn.execute(sql).fetchall()
	print(texts)","设置SQL语句（使用format()函数格式化输出字符串,通过字符串$con$查询finance表中的所有列）,使用$conn$连接执行SQL语句并获取全部数据，打印所获取的数据。","Set up the SQL statement (Format the output string with the format () function; Query all columns in finance by $con$.), querying all the columns in the finance with the $conn$. "
11252,"from sqlalchemy import create_engine
def updateAffiliationIdfValue(host, token):
	try:
		engine = create_engine(host)
		conn = engine.connect()
		result = conn.execute(""select count(AffiliationID) from ReferenceData where token=:token"",{""token"":token}).fetchall()
		conn.close()
		return result
	except:
		conn.close()
		raise",尝试使用$host$获取数据库引擎并建立连接，执行SQL(根据$token$获取ReferenceData表中被计数方法处理过的AffiliationID的所有列)并获取所有数据，然后关闭连接并返回获取到的数据，否则关闭连接并挂起,"Try to use $host$ to get the database engine and establish a connection, execute SQL (get all the columns of AffiliationID in the ReferenceData table that have been processed by the counting method based on $token$), get all the data, close the connection and return the obtained data, otherwise close the connection and hang."
13398,"from sqlalchemy import create_engine
def process_profiles(DB_CONNECT_STRING,PortalProfile,username):
	engine = create_engine(DB_CONNECT_STRING, max_overflow=5)
	values = engine.query(PortalProfile).filter(PortalProfile.username==username).first()
	return values",通过$DB_CONNECT_STRING$获取数据库引擎，其中max_overflow参数设置为5，使用ORM的方式执行SQL语句（根据$username$查询$PortalProfile$表中所有列），并获取第一条数据，将查询结果返回。,"Get the database engine through $DB_CONNECT_STRING$, where the max_overflow parameter is set to 5, execute the SQL statement with the ORM method (query all columns in the $PortalProfile$ table based on $username$), get the first piece of data, and return the query result."
14193,"from flask import render_template
def review(conn, user_id):
	reviews=conn.execute(""SELECT comment FROM reviews WHERE user_id=:user_id"",{""user_id"":user_id}).fetchone()
	r=[]
	for i in reviews:
		print(i)
		r.append(i)
	return render_template(""review.html"",reviews=r)","通过$conn$查询reviews表中user_id为$user_id$的第一条comment数据。使用for循环遍历查询结果并打印，将查询结果中的每一项元素都存储到list中，渲染并返回""review.html""，其中reviews参数为list内容。","Query the first comment data in the reviews table with a user_id of $user_id$ through $conn$. Use for loop to iterate through the query results and print, store each element in the query results in list, render and return ""review.html"", where the reviews parameter is the 'list' content."
13338,"from sqlalchemy.sql import select,func
def maxepoch(conn,telemetry,date):
	s = select(func.max(telemetry.c.epochtime)).where(telemetry.c.date == date)
	result = conn.execute(s).fetchone()[0]
	return result",根据python表达式设置SQL：（根据$date$查询$telemetry$表中epochtime列的最大值）。通过$conn$执行SQL并获取第一条数据的第0个元素，返回查询到的结果。,"Set SQL according to the python expression (query the maximum value of the epochtime column in the $telemetry$ table based on $date$). Execute SQL through $conn$, get the 0th element of the first piece of data, and return the queried results."
11486,"def select_value(conn, value):
	query_sql = ""SELECT * FROM atable WHERE value =: value""
	results = conn.execute(query_sql,{""value"":value}).fetchall()
	return results",设置SQL（根据$value$查询atable表中所有列），根据$conn$执行SQL并获取所有查询结果，并将数据返回。,"Set up SQL (query all columns in the atable table based on $value$), execute SQL based on $conn$ and get all the query results. Return the data."
13683,"def begin(db, hamming_load):
	que = ""SELECT load_extension FROM Table WHERE hamming_load=:hamming_load""
	txn = db.execute(que, {""hamming_load"":hamming_load}).fetchone()
	return txn",设置SQL（根据$hamming_load$查询Table中的load_extension）。使用$db$执行SQL并获取第一条数据。最后返回查询结果。,"Set SQL (query load_extension in Table where $hamming_load$ is load_extension). Execute the SQL using $db$ and get the first data. Finally, return the query results."
13219,"from sqlalchemy.sql import select
from sqlalchemy import create_engine
def search(memory, u2, t_users):
	engine = create_engine(memory)
	with engine.begin() as conn:
		results = conn.execute(select([t_users.c.name]).where(t_users.c.id == u2)).first()
		return results",通过$memory$获取数据库引擎。在with语句中开始一次连接，以python表达式的方式执行SQL语句（根据$u2$查询$t_users$中的name）并获取第一条数据。最后返回查询结果。,"Get the database engine with $memory$. Start a connection in the with statement, execute the SQL statement in a Python expression (query for the name in $t_users$ where u2 is $u2$) and get the first data. Finally, the query results are returned."
11523,"def test(testing, id):
	connection = testing.connect()
	out = connection.execute(""SELECT name FROM users WHERE id = :id"", {""id"": id}).fetchone()
	return out",通过$testing$连接数据库。执行SQL：根据$id$查询users表中的所有name，返回第一条查询结果。,"Connect to the database through $testing$. Execute SQL: query all name in the users table based on $id$, return the first query results."
14120,"def select_flow(conn, wed_flow):
	result = conn.execute(""SELECT id FROM wed_flow WHERE flow =:wed_flow"",{""wed_flow"":wed_flow}).fetchone()
	for l in result:
		print(l[0])
	return result",通过$conn$查询wed_flow表中wed_flow为$wed_flow$的第一条id数据。for循环遍历查询结果并打印查询结果的第0个元素，返回查询结果。,"Query the first id data in the wed_flow table with wed_flow of $wed_flow$ via $conn$. For loop iterates through the query results, prints the 0th element of the query results and returns the query results."
13613,"def getBookByISBN(db,isbn):
	query = ""select * from books where isbn=:isbn""
	book = db.execute(query,{""isbn"":isbn}).fetchone()
	return book",设置SQL：根据$isbn$查询books表中的所有列。使用$db$执行SQL并获取第一条数据。返回查询结果。,Set SQL: query all the columns in the books table where ISBN is $isbn$. Execute the SQL using $db$ and get the first data. Return the result of the query.
13386,"def operation_function(conn,operationcode):
	operationRes=conn.execute(""SELECT * FROM operation WHERE operationcode=:operationcode"",{""operationcode"":operationcode}).fetchall()
	for row in operationRes:
		print(row)",使用$conn$执行SQL（根据$operationcode$查询operation表中所有列），获取所有查询结果，用for循环遍历获取的所有查询结果并输出。,"Use $conn$ to execute SQL (query all columns in the operation table based on $operationcode$), get all the query results, and use for loop to traverse and output all the obtained query results."
14009,"def clear(conn, table_name):
	cursor = conn.cursor()
	result=cursor.execute(""select * from table where {table_name}"".format(table_name=table_name)).fetchall()
	conn.close()
	return result","使用$conn$连接数据库，并通过cursor()方法创建游标对象。执行SQL语句（使用format()函数格式化输出字符串,通过字符串$table_name$查询table表中的所有列）并获取全部数据,确保$conn$关闭并返回查询结果。","Use $conn$ to connect to the database and create a cursor object through the cursor () method. Execute the SQL statement (use the format () function to output string in a format way and query all the columns in the 'table' table with the string $table_name$), get all the data, ensure that $conn$ is closed and return the query results."
11354,"from flask import render_template, redirect
def register(conn,email,password):
	if password is None:
		return render_template(""register.html"")
	else:
		data = conn.execute(""SELECT * FROM request where email=:email and password=:password"", {""email"": email,""password"":password}).fetchall()
		return redirect(""/"")","如果$password$为空，返回渲染后的""register.html""页面，否则，使用$conn$执行SQL（根据$email$和$password$查询request表中所有列）并获取所有数据，并返回重定向操作""/""。","If $password$ is empty, return the rendered ""register.html"" page; otherwise, use $conn$ to execute SQL (query all columns in the request table based on $email$ and $password$), get all the data, and return the redirect operation ""/""."
13052,"from sqlalchemy.sql import select
def find_existing(conn,tbl_node):
	s = select([tbl_node.c.bp_id])
	result = conn.execute(s).fetchall()
	bp_nodes = set() 
	for row in result:
		bp_nodes.add(row[0])
	return bp_nodes",使用python表达式方式设置SQL：查询$tbl_node$表中的bp_id。使用$conn$执行SQL并获取所有数据。使用for循环将查询结果中每一项的第0个元素存入set中并返回。,Use python expressions to set up SQL: Query $tbl_node$ table for bp_id. Use $conn$ to execute SQL and get all data. Use for loop to store the 0th element of each item in the query result into set and return it.
13851,"def getProfile(session,Groups,uuid):
	q = session.query(Groups).filter(Groups.uuid == uuid).first()
	session.close()
	return q",通过$session$使用ORM方式执行SQL语句（根据$uuid$查询$Groups$表中的第一条数据），确保$session$关闭，返回所有的查询结果。,Use the ORM method to execute SQL statement (query the first data in the $Groups$ table based on $uuid$) through $session$. Make sure $session$ is closed and return all query results.
13505,"def get_table_column_names(conn, LIMIT):
	query = ""SELECT bank FROM table where LIMIT=:LIMIT""
	cur =conn.execute(query,{""LIMIT"":LIMIT}).fetchall()
	return cur[0]","设置sql（根据$LIMIT$查询table表中bank列）,使用$conn$执行SQL并获取所有查询结果，返查询结果的第0个元素。","Set up sql (query the bank column in the 'table' table according to $LIMIT$), use $conn$ to execute SQL, get all the query results, and return the 0th element of the query result."
11531,"def set_chef_to_dish_by_id_increase(conn, id):
	row = conn.execute(""SELECT REMAIN FROM chef_to_dish WHERE id = :id"", {""id"": id}).fetchone()
	for r in row:
		number = r[0]
	print(number)
	return number",使用$conn$查询chef_to_dish表中id为$id$的第一条REMAIN，for循环遍历查询结果，获取每行的第0个元素，打印所获取的元素并返回。,"Use $conn$ to query the first piece of REMAIN in the chef_to_dish table with id as $id$, use for loop iterate through the query results. Get the 0th element of each row. Print the obtained elements and return them."
13556,"from sqlalchemy.sql import select, func
def check_agg(conn, DataTable,timestamp):
	sql=select(func.max(DataTable.timestamp)).where(DataTable.timestamp==timestamp)
	last_data_time = conn.execute(sql).fetchall()
	if not last_data_time:
		return None
	return last_data_time",根据python表达式设置SQL：（根据$timestamp$查询$DataTable$表中timestamp列的最大值）。通过$conn$执行SQL并获取所有数据，如果没有查询到数据，返回None，否则返回执行语句的结果。,"Set SQL according to the python expression (query the maximum value of the timestamp column in the $DataTable$ table based on $timestamp$). Execute SQL through $conn$ and get all the data. If no data is found, return None. Otherwise, return the result of executing the statement."
13115,"from sqlalchemy import create_engine
def get_team(oracle,name):
	engine = create_engine(oracle)
	with engine.begin() as conn:
		res = conn.execute(""select number from team where name=:name"",{""name"",name}).fetchall()
		return res",使用$oracle$获取数据库引擎，然后使用with语句利用开始方法执行SQL(根据$name$获取team表中的number列)并获取所有数据，并返回查询结果,"Get the database engine using $oracle$, then use the with statement to execute the SQL using the start method (get the number column in the team where name is $name$) and get all the data and return the query results."
14059,"from sqlalchemy.sql import select
def test_transaction(c, users, name):
	try:
		res = c.execute(select[users]).where(user_name=name).fetchall()
		return res
	finally:
		c.close()",尝试性通过$c$使用Python表达式的方式执行SQL：根据$name$查询$users$表中的所有数据并返回查询结果。最后确保$c$关闭。,"Try to use the Python expression to execute SQL through $c$: Query all the data in the $users$ table based on $name$ and return the query results. Finally, make sure that $c$ is closed."
14281,"from sqlalchemy.sql import select ,func
def get_article_count(connection,articles_table,category_id):
	s = select([func.count(articles_table)]).where(articles_table.c.categoryID == category_id)
	rp = connection.execute(s).fetchall()
	return rp",使用Python表达式的方式设置SQL语句，其内容为：查询$articles_table$表中categoryID为$category_id$的数据数量。通过$connection$执行SQL获取所有数据，返回获取到的数据。,Use the Python expression to set the SQL statement and the content is as follows: Query the amount of data in the $articles_table$ table whose categoryID is $category_id$. Execute SQL to get all the data through $connection$ and return the obtained data.
11171,"def query_page(conn,SEX):
	try:
		r=conn.execute(""SELECT AGE FROM EMPLOYEE WHERE SEX=:SEX"",{""SEX"":SEX})
		return r
	except:
		return None",尝试性使用$conn$执行SQL语句，其内容为：根据$SEX$查询EMPLOYEE中的AGE，并将查询结果返回。如果出现异常，则返回None。,"Try to use $conn$ to execute the SQL statement that query AGE in EMPLOYEE where SEX is $SEX$ and return the result of the query. If an exception occurs, return None."
11552,"def total(session, QuestionNode, parent_id):
	query = (session.query(QuestionNode).filter(QuestionNode.parent_id == parent_id))
	for root in query.all():
		print(root)",通过$session$使用ORM方式查询$QuestionNode$表中parent_id为$parent_id$的所有数据，for循环遍历查询结果并打印。,Use ORM method to query all the data in $QuestionNode$ table with parent_id as $parent_id$ through $session$. Use for loop iterate through the query results and print them.
14054,"def test_basic_query(connection):
	rows = connection.execute('SELECT * FROM one_row').fetchall()
	assert len(rows)!=0
	return rows",通过$connection$查询one_row表中的所有列，并获取全部数据，设置断言判断查询结果的长度不为0，返回查询结果。,"Query all the columns in the one_row table through $connection$, get all the data, set the assertion to determine that the length of the query result is not 0, and return the query result."
13262,"from sqlalchemy.sql import select
def schema_exists(sess, schema, public):
	query = select(schema).where(schema_name = public)
	schema_names = sess.execute(query).fetchall()
	sess.close()
	return schema_names",使用Python表达式的方法设置SQL（根据$public$查询$schema$中的所有列），通过$sess$执行SQL语句并获取所有数据。关闭$sess$，返回查询结果,"Set the SQL (query all columns in $schema$ where public is $public$) using Python expression methods, execute the SQL statement by $sess$ and get all the data. Close $sess$ and return the result of the query."
11123,"from flask import jsonify
def tobs(conn,DATE):
	tobs_totals = conn.execute(""SELECT * FROM measurement WHERE DATE<:DATE"",{""DATE"":DATE}).fetchall()
	return jsonify(tobs_totals)",通过$conn$执行SQL语句（查询measurement表中DATE小于$DATE$的所有列）并获取所有数据，并通过jsonify返回所有的查询结果。,"Execute the SQL statement (query all columns in the measurement when the DATE is less than the value in $DATE$) with $conn$ and get all the data, and return all the query results by jsonify."
13721,"import logging
def fetchAllIssues(engine,metaData):
	logger = logging.getLogger()
	try:
		with engine.connect() as conn:
			rows = conn.execute(""select bugid from bugs where metaData = :metaData"",{""metaData"":metaData}).fetchall()
			return rows
	except Exception as e:
		logger.debug(e)",初始化日志模块，尝试使用with语句根据$engine$连接数据库。执行SQL（根据$metaData$查询bugs表中bugid列），获取所有查询结果并返回，如果捕获到Exception异常，输出debug日志。,"Initialize the log module and try to use the with statement to connect the database according to $engine$. Execute SQL (query the bugid column in the bugs table according to $metaData$), get all the query results and return, and output the debug log if an Exception is caught."
13413,"from flask import render_template
def flights(conn, id):
	flight_sql = ""SELECT flight FROM flights WHERE id =: id""
	flights = conn.execute(flight_sql,{""id"":id}).fetchall()
	if len(flights) == 0:
		return render_template(""error.html"")
	return render_template(""flights.html"", flights=flights)","根据$conn$执行SQL（根据$id$获取flights表中的flight列）并获取所有数据，如果查询结果的长度为0，则返回渲染后的""error.html""，最后直接返回渲染后的""flights.html""，其中flights参数为查询结果","Execute SQL based on $conn$ (get the flight column in the flights table based on $id$) and get all the data. If the length of the query result is 0, then return the rendered ""error.html"", and finally return the rendered ""flights.html"" directly, where the flights parameter is the query result."
11224,"from flask import render_template
def review_page(conn,isbn):
	value = conn.execute(""select rating from ratings where isbn=:isbn "",{""isbn"":isbn}).fetchall()
	if len(value) == 1:
		return render_template(""searhConfirm.html"", num_results=len(value))","使用$conn$执行SQL（根据$isbn$查询ratings表中的rating）并获取所有数据，如果获取的结果长度为1，则返回渲染后的""searhConfirm.html""，其中num_results参数为查询结果的长度","Use $conn$ to execute SQL (query the rating in the ratings table based on $isbn$) and get all the data. If the length of the obtained result is 1, return the rendered ""searhConfirm.html"", where the num_results parameter is the length of the query result."
11051,"from flask import render_template
def book_page(conn,gan_id):
	try:
		myExecute=conn.execute(""SELECT * FROM flight_gan WHERE id=:id"",{""id"":gan_id})
		if myExecute.rowcount != 0:
			return render_template(""success.html"")
	except:
		return render_template(""error.html"", message=""Invalid flight number."")","尝试性使用$conn$执行SQL（查询当id为$gan_id$时flight_gan表中的所有列），如果执行获取的行数不为0，就返回并渲染""success.html""。如果出现异常，则返回并渲染""error.html""，并传入message参数为""Invalid flight number.""。","Try to use $conn$ to execute SQL (query all columns in the flight_gan table when id is $gan_id$). Return and render ""success.html"" if the number of rows fetched by execution is not zero. If an exception occurs, return and render ""error.html"", pass in the message parameter as ""Invalid flight number.""."
14103,"def comprar(db_engine, custid):
	try:
		db_conn=db_engine.connect()
		query = ""select status from orders where customerid=:custid""
		res = db_conn.execute(query,{""custid"":custid}).fetcahall()
		return res
	except:
		if db_conn is not None:
			db_conn.close()",尝试使用$db_engine$连接数据库，设置SQL，内容是：查询orders表中customerid为$custid$的status数据，执行SQL获取所有数据，返回获取的数据。当出现异常时，如果数据库连接不为空，则关闭数据库连接。,"Try to use $db_engine$ to connect the database and set the SQL, content as follows: Query the status data in the orders table where customerid is $custid$, execute SQL to get all the data, and return the obtained data. When an exception occurs and the database connection is not empty, close the database connection ."
11435,"from flask import render_template
def search_book(conn, isbn):
	sql = ""SELECT * FROM treview WHERE book_id =: isbn""
	results = conn.execute(sql,{""isbn"":isbn}).fetchall()
	if len(results) == 0:
		return render_template('error.html')
	return render_template(""books.html"", reviews=results)","设置sql（根据book_id为$isbn$查询treview表中全部信息）,使用$conn$执行SQL并获取所有查询结果，如果查询到数据的长度为0，返回渲染后的'error.html'页面。否则返回渲染后的""books.html""页面，其中参数reviews为查询结果。","Set SQL (query all the information in the treview table based on book_id $isbn$), use $conn$ to execute SQL and get all the query results. If the length of the query data is 0, return the rendered 'error.html' page. Otherwise, return the rendered ""books.html"" page and the 'reviews' parameter is the query result."
14223,"from sqlalchemy.sql import select
def test_nested(connection,users):
	res = connection.execute(select([users.c.user_id])).fetchall()
	connection.close()
	return res",使用Python表达式的方式，通过$connection$执行SQL语句：查询$users$表中的所有user_id，确保$connection$关闭，返回所有的查询结果。,"Use the Python expression to execute the SQL statement through $connection$: Query all user_id in the $users$ table, ensure that $connection$ is turned off and return all query results."
13230,"def select_Command(conn, Cid):
	if(Cid == 0):
		sql_Command = ""SELECT * FROM Commands""
	else:
		sql_Command = ""SELECT * FROM Commands WHERE Cid =: Cid""
	result = conn.execute(sql_Command,{""Cid"":Cid}).fetchall()
	return result",如果$Cid$的值等于0，设置SQL（查询Commands的所有列），否则设置SQL（根据$Cid$查询Commands的所有列）。使用$conn$执行SQL语句，获取所有数据并返回。,"If $Cid$ has a value of 0, set SQL (query all columns of Commands) , otherwise set SQL (query all columns of Commands where cid is $Cid$) . Execute the SQL statement with $conn$, get all the data and return."
13341,"from sqlalchemy import create_engine
from sqlalchemy.orm.session import sessionmaker
def execute(mysql_url,id):
	engine = create_engine(mysql_url, echo=False)
	session = sessionmaker()
	session.configure(bind=engine)
	ss = session()
	result = ss.execute(""SELECT * FROM t1 WHERE id=:id"",{""id"":id}).fetchall()
	print(result)",通过$mysql_url$获取数据库引擎，其中echo参数设定为False，进一步获取Session对象并建立连接。执行SQL语句（根据$id$查询t1表中所有列），并获取所有数据，打印查询结果。,"Get the database engine through $mysql_url$, where the echo parameter is set to False, further get the Session object and establish a connection. Execute the SQL statement (query all the columns in the t1 table according to $id$), get all the data, and print the query results."
11054,"def get_user(engine,email):
	with engine.connect() as conn:
		username=conn.execute(""SELECT username FROM users WHERE email=:email"",{""email"":email}).fetchall()
		l = [i[0] for i in username]
		if (len(l)!=0):
			return False
		else:
			return True",使用with语句根据$engine$创建连接，执行SQL（根据$email$查询users表中的username）并获取所有数据。将查询结果每一项的第0号元素存储到list中。如果list的长度不为0，则返回False，否则返回True。,"Use the with statement to create a connection based on $engine$, execute SQL (query the username in the users table based on $email$) and get all the data. Store 0th element of each item of the query result in list. Return False if the length of list is not 0. Otherwise, return True."
11274,"def update_pointer(conn, ptr):
	res=conn.execute(""SELECT pointer FROM pointer_table WHERE ptr=:ptr"",{""ptr"":ptr}).fetchall()
	if res.rowcount != 0:
		return res",使用$conn$执行SQL(根据$ptr$获取pointer_table的pointer列)并获取所有数据，如果查询结果的行数不为0，则返回查询结果,"Use $conn$ to execute SQL (get the pointer column of pointer_table based on $ptr$) and get all the data. If the number of rows of the query result is not zero, return the query result."
13574,"from flask import render_template
def search(db,password):
	if password is not None:
		user = db.execute(""select * from users where password=:password"",{""password"":password}).fetchone()
		if user is None:
			return render_template(""error.html"")
		return render_template(""search.html"", user=user)","如果$password$不为空，利用$db$执行SQL（根据$password$查询users表中的所有列），并获取第一行数据。如果查询结果为空，返回渲染后的""error.html""页面，否则返回渲染后的""search.html""页面，其中参数user为查询结果。","If $password$ is not empty, use $db$ to execute SQL (query all columns in the users table based on $password$) and get the first row of data. If the query result is empty, return the rendered ""error.html"" page; otherwise, return the rendered ""search.html"" page, where the parameter user is the query result."
13485,"def identify_data_hist_price_wave(conn, code):
	sql = ""SELECT date FROM data_hist WHERE code =: code""
	rs = conn.execute(sql,{""code"":code}).fetchall()
	rows = len(rs)
	if rows>0:
		return rs",通过$conn$执行SQL（根据$code$获取data_hist表中的date列）并获取所有数据，然后获取查询结果的长度，如果长度大于0，则返回查询结果,"Execute SQL through $conn$ (get the date column in the data_hist table based on $code$) and get all the data. Then get the length of the query results. If the length is greater than 0, then return the query results."
13416,"def search(conn, Users, fr):
	rs = conn.query(Users).filter_by(project_id=fr).fetchall()
	users = []
	for row in rs:
		users.append(row[0])
	return users, len(users)",使用ORM的方式获取$Users$表中project_id为$fr$的所有列并利用$conn$查询SQL获取所有数据，然后使用for循环对查询结果的每一项的第0个元素存储为list，最后返回list的内容和长度,"Use ORM to get all columns in $Users$ table with project_id as $fr$ and use $conn$ to query SQL to get all the data. Then use for loop to store the 0th element of each item of the query result as list, and finally return the contents and length of the list."
11349,"def get_call_by_id(conn,Calling,id):
	session = conn.query(Calling).filter(Calling.id == id).all()
	return session",使用ORM的方式，利用$conn$执行SQL（根据$id$查询$Calling$表中全部信息），并获取查询到的所有数据，将执行语句的结果返回,"Use the ORM method and $conn$ to execute SQL (query all the information in the $Calling$ table according to $id$), get all the queried data, and return the result of the execution statement."
11363,"import logging
def get_transaction(conn,Transaction,trans_id):
	query = conn.query(Transaction).filter(Transaction.trans_id == trans_id).all()
	logging.info(query)",使用ORM的方式，利用$conn$执行SQL（根据$trans_id$查询$Transaction$表中全部信息），并获取查询到的所有数据，最后输出执行结果日志的信息,"Use ORM method and $conn$ to execute SQL (query all the information in the $Transaction$ table according to $trans_id$), get all the data queried, and finally output the information of the execution result log."
11174,"def poulateAnagrafica(db,pv_id):
	db = db.getConnection()
	crs=db.cursor()
	res=crs.execute(""SELECT * FROM pv WHERE pv_id=:pv_id"",{""pv_id"":pv_id})
	return res",通过$db$连接数据库并创建游标对象，执行SQL语句:根据$pv_id$查询pv中的所有列，返回查询结果。,Connect to the database with $db$ and create a cursor object to execute the SQL statement: query all columns where the id of pv is $pv_id$ in pv and return the result of the query.
11482,"def select_value(conn, date):
	query_sql = ""SELECT * FROM recommendations WHERE date =: date""
	results = conn.execute(query_sql,{""date"":date})
	recommendation = [dict(zip(tuple(results.keys()), record)) for record in results.cursor]
	return recommendation","设置sql（根据$date$查询recommendations表中全部信息）,使用$conn$执行SQL，使用for循环遍历获取执行结果的cursor，将每条数据的keys与值接连转化为tuple，zip和dict，并存到一个list中。最后返回这个list。","Set up SQL (query all the information in the recommendations table based on $date$), use $conn$ to execute SQL. Use for loop to iterate through to get the cursor of execution result, and convert 'keys' and 'value' of each piece of data into tuple, zip and dict. Then store in a list and return the list."
13006,"from sqlalchemy import create_engine
from flask import render_template
def article(postgresql,id):
	eng = create_engine(postgresql)
	con = eng.connect()
	article = con.execute(""SELECT * FROM articles where id=:id"", {""id"": id}).fetchone()
	return render_template(""article.html"", article=article)","通过$postgresql$创建数据库引擎，并获取连接。使用连接执行SQL（根据$id$查询articles中的所有列）并获取第一条数据。返回渲染后的""article.html""并将查询结果传给article参数。","Create the database engine through $postgresql$ and get the connection. Use the connection to execute the SQL (query all the columns in the articles based on $id$) and get the first piece of data. Return the rendered ""article.html"" and pass the query result to the article parameter."
11638,"def find_coltype(db,c_type):
	coltype = db.execute(""select column_name from Table where column_type=:c_type"",{""c_type"":c_type}).fetchone()
	print(coltype)
	return coltype",使用$db$执行SQL（根据column_type为$c_type$获取Table表中的column_name列）并获取第一条数据，打印查询结果，最后返回查询结果,"Use $db$ to execute SQL (get the column_name column in the 'Table' table when column_type is $c_type$), get the first piece of data, print the query result, and finally return the query result."
11213,"def get_schema_names(conn, nspname):
	s = ""SELECT nspname FROM pg_namespace where nspname=:nspname""
	rp = conn.execute(s,{""nspname"":nspname}).fetchall()
	schema_names = [row for row in rp ]
	return schema_names",设置SQL（根据$nspname$查询pg_namespace表中的nspname），使用$conn$执行SQL并获取所有查询结果。将查询结果的每一项存储为list并返回。,"Set up the SQL (query the nspname in the pg_namespace table based on $nspname$), execute the SQL with $conn$ and get all the query results. Store each item of the query results as 'list' and return."
11331,"def isuser(conn,name):
	result = conn.execute(""SELECT email FROM customers WHERE name = :name"",{""name"":name}).fetchall()
	res = list(result)
	if res:
		return True
	return False",使用$conn$执行SQL（根据$name$查询customers表中email列），获取所有查询结果，并将数据转化为list。如果查询到结果，返回True，否则返回False。,"Use $conn$ to execute SQL (query the email column in the customers table according to $name$), get all the query results, and convert the data to list. If the result of the query is queried, return True; otherwise, return False."
11134,"def display_table(db,metadata):
	rs = db.execute(""SELECT autoload FROM table_name WHERE metadata=:metadata"",{""metadata"":metadata}).fetchall()
	for row in rs:
		print(row)",使用$db$连接执行SQL语句（使用$metadata$查询table_name表中的所有autoload），通过for循环遍历查询结果并打印。,"Execute the SQL statement using the $db$ connection (query all autoload in the 'table_name' where the metadata is $metadata$), iterate through the query results through the for loop and print."
11049,"from sqlalchemy.sql import select
from sqlalchemy import create_engine
def db_get(path,users,following):
	engine = create_engine(path)
	conn = engine.raw_connection()
	if following != None:
		s = select(users.c.profilename).where(users.c.following == following)
		ling = conn.execute(s).fetchall()
		return ling
	else:
		return False",通过$path$创建数据库引擎并使用raw_connection方法获取连接。如果$following$不为None，则用python表达式设置SQL：根据$following$查询$users$表中的profilename信息。执行SQL并获取所有数据，返回查询结果。否则如果$following$是None，则返回False。,"Create the database engine through $path$ and use the raw_connection method to get the connection. If $following$ is not None, use the python expression to set SQL: To query the profilename information in the $users$ table based on $following$. Execute SQL and get all the data and return the query results. Otherwise, return False if $following$ is None."
13849,"from flask import render_template, request, redirect
def buy(conn, uid):
	if request.method == ""GET"":
		return render_template(""buy.html"")
	else:
		rows = conn.execute(""SELECT cash FROM users WHERE uid = :uid"", {""uid"": uid}).fetchone()
		if not rows:
			return None
		return redirect(rows)","如果request模块发送请求的方式为GET，渲染并返回""buy.html""。否则，使用$conn$连接执行SQL语句（根据$uid$获取users表中的cash）并获取第一条查询结果，如果没有查询结果，返回None，否则使用redirect返回查询结果。","If the request module sends the request as GET, render and return ""buy.html"". Otherwise, use $conn$ connection to execute SQL statement (get the cash in the users table based on $uid$) and get the first records. If there is no query result, return None, otherwise use redirect to return the query results."
11155,"def get(db_connect,money):
	conn = db_connect.connect()
	query = conn.execute(""SELECT * FROM employees WHERE money=:money"",{""money"":money}).fetchall()
	return [i[0] for i in query]",通过$db_connect$连接数据库，执行SQL语句：通过$money$查询$employees$中的所有列，并获取所有数据。将查询结果每一项的第0个元素存储为list并返回。,Connect to the database according to$db_connect$ and execute the SQL statement: query all the columns in $employees$ where money is $money$ and get all the data. Store the 0th element of each item of the query result as a list and return.
13566,"from flask import request
def bookpage(conn,book_id):
	if request.method==""GET"":
		review_obj=conn.execute(""SELECT rating FROM reviews WHERE book_id=:book_id"",{""book_id"":book_id}).fetchall()
		if review_obj is None:
			return(""fail"")
		return review_obj","如果请求方式为""GET""，利用$conn$执行SQL（根据$book_id$查询reviews表中rating列），并获取所有查询结果，如果之执行语句结果为空，返回""fail""，否则将查询结果返回。","If the request method is ""GET"", use $conn$ to execute SQL (query the rating column in the reviews table based on $book_id$) and get all the query results. If the execution statement result is empty, return ""fail""; otherwise, return the query result."
13127,"from flask import request,render_template,redirect
def book(conn,book):
	if request.method == ""POST"":
		reviews = conn.execute(""SELECT username FROM users WHERE book_id = :book"",{""book"": book}).fetchall()
		return render_template(""book.html"", reviews=reviews)
	else:
		return redirect(""/book/""+ book)","如果请求的方法为""POST""，则使用$conn$执行SQL（根据book_id为$book$获取users表中的username列）并获取所有数据，然后返回渲染后的""book.html""，其中reviews参数为查询结果，否则返回redirect处理的""/book/""和$book$列的内容","If the requested method is ""POST"", execute SQL (get the username column in the users where the book_id is $book$) with $conn$ and get all the data, then return the rendered ""book.html"" where the reviews parameter is the result of the query, otherwise ""/book/"" and $book$ handled by redirect are returned."
11667,"from flask import jsonify
def find_bookReviews(db,reviews,id):
	sql = reviews.select().where(reviews.c.book_id==id)
	rs = db.execute(sql).fetchall()
	return jsonify({""title"": rs.title,""author"": rs.author})","根据python表达式的方式，利用$db$执行SQL（获取$reviews$表中book_id为$id$的所有列）并获取所有数据，最后返回由jsonify处理的""title""和""author""内容，其中title为查询结果的title列，author为查询结果的author列","Use $db$ to execute SQL according to the python expression (get all the columns in the $reviews$ table where book_id is $id$) and get all the data. Finally, return the ""title"" and ""author"" contents processed by jsonify, where 'title' is the title column of the query result and 'author' is the author column of the query result."
13715,"from sqlalchemy.sql import select
from sqlalchemy import create_engine
def update_status(call_center, call, id_call):
	engine = create_engine(call_center, echo=True)
	conn = engine.connect()
	sql = select(call).where(call.c.id_call == id_call)
	result = conn.execute(sql).fetchall()
	return result",通过$call_center$创建数据库引擎，并设置echo参数为False。根据数据库引擎创建连接。使用python表达式方式设置SQL（根据$id_call$查询$call$表中的所有信息）。执行SQL并获取所有查询结果。最后返回查询结果。,"Create the database engine through $call_center$ and set the echo parameter to False. Create a connection according to the database engine. Set SQL with the python expression (query all the information in the $call$ table based on $id_call$). Execute SQL, get all query results and return them."
13233,"from sqlalchemy import create_engine
def search_record(config_uri):
	try:
		engine_new = create_engine(config_uri)
		connection_engine = engine_new.connect()
		records = connection_engine.execute(""SELECT * FROM database_name"").fetchall()
		connection_engine.close()
		return records
	except Exception as e:
		print(e)
		return False",尝试性执行如下代码：通过$config_uri$获取数据库引擎并建立连接；执行SQL（查询database_name中的所有列）并获取所有数据；关闭数据库连接并返回查询结果。如果出现Exception异常，则打印具体异常信息并返回False。,"Try to execute the following code: Get the database engine and make the connection via $config_uri$. Execute SQL (query all columns in the database_name) and get all the data. Close the database connection and return the result of the query. If an Exception Exception occurs, the specific Exception information is printed and False is returned."
13179,"def test_keys(conn,ider):
	d = conn.execute(""SELECT rank FROM testtable where ider=:ider"",{""ider"":ider}).fetchall()
	keys = dict(d)
	assert len(keys) == 2
	return d",使用$conn$执行SQL（根据$ider$获取testtable表中的rank列）并获取所有数据，再把查询结果转化为字典类型，然后设置断言字典的长度为2，最后返回查询结果,"Execute the SQL with $conn$ (get the rank column in the testtable where ider is $ider$) and get all the data, convert the query results to the dictionary type, set the assertion dictionary length to 2, and return the query results."
11010,"def getAcresField(conn,perc,series):
	cur = conn.cursor()
	acres = cur.execute(""SELECT acres FROM tablename WHERE perc=:perc AND series=:series"",{""perc"":perc,""series"":series}).fetchall()
	acres_rec=[]
	for i in acres:
		acres_rec.append(i[0])
	return acres_rec",使用$conn$获取游标。利用游标执行SQL（根据$perc$和$series$获取tablename表中acres信息）并获取所有数据。 使用for循环将查询结果每一项的第0号元素存储到list中。,Use $conn$ to get the cursor. Execute SQL with cursors (get the acres information in the tablename table based on $perc$ and $series$) and get all the data. Use for loop to store the 0th element of each item of the query result in list.
11562,"from sqlalchemy.sql import select
def get_customer_plots(conn,plots,name):
	query = select(plots.c.id).where(plots.c.name == name)
	res = conn.execute(query).fetchall()
	return [x[0] for x in res]",使用Python表达式的方式设置SQL语句为根据$name$获取$plots$中的所有id，使用$conn$连接执行SQL并获取数据。将查询结果每一项的第0个元素存储为list并返回。,"Use the Python expression to set up the SQL statement to get all the id in $plots$ based on $name$, use the $conn$ connection to execute the SQL and get the data. Store the 0th element of each item of the query result as list and return it."
11475,"import sqlalchemy
def select_user(CKAN_DATASTORE_WRITE_URL, PASSWORD):
	engine = sqlalchemy.create_engine(CKAN_DATASTORE_WRITE_URL)
	connection = engine.connect()
	user_get = ""SELECT * FROM USER WHERE PASSWORD =: PASSWORD""
	users = connection.execute(user_get,{""PASSWORD"":PASSWORD}).fetchall()
	connection.close()
	return [dict(user) for user in users]","通过$CKAN_DATASTORE_WRITE_URL$获取数据库引擎并建立连接。设置SQL（根据$PASSWORD$查询USER表中所有列），并获取所有数据，关闭连接，使用for循环将查询结果的每一条转化为dict,并以list存储，最后将这个list返回。","Get the database engine via $CKAN_DATASTORE_WRITE_URL$ and establish a connection. Set up SQL (query all columns in USER table based on $PASSWORD$) and get all the data. Close the connection, use for loop to convert each query result into dict, store as list, and finally return the list."
11096,"import pandas
def getDataFrame(conn,humedad,clima):
	sql =""SELECT temperatura FROM sensor WHERE humedad=:humedad AND clima=:clima""
	result=conn.execute(sql,{""humedad"":humedad,""clima"":clima})
	dataframe = pandas.DataFrame(result.fetchall())
	dataframe.columns = result.keys()
	return dataframe",设置SQL（根据$humedad$和$clima$查询sensor表中的temperatura信息），使用$conn$执行SQL。将执行后获取的所有查询结果存入pandas的DataFrame中并设置列名称为查询结果的keys。最后返回DataFrame。,"Set up SQL (query the temperatura information in the sensor table based on $humedad$ and $clima$), and use $conn$ to execute SQL. Store all query results obtained after execution into the DataFrame of pandas and set the column name as the keys of the query results. Finally, return DataFrame."
13804,"def get_bar_counts(engine, bar):
	with engine.connect() as con:
		query = ""SELECT * FROM frequents WHERE bar =: bar""
		rs = con.execute(query, {""bar"": bar}).fetchall()
		results = [dict(row) for row in rs]
		return results",通过with语句使用$engine$连接数据库。设置SQL语句，其内容为：根据$bar$查询frequents中的所有列，执行SQL语句获取所有数据，将查询结果每一项转化为dict存储为list并返回。,"Use $engine$ to connect to the database through the with statement. Set up SQL statement with the following content: Query all columns in the frequents based on $bar$, execute SQL statement to get all the data, convert each item of query results into dict to store as list and return it."
13986,"def check_table(db, table_schema):
	connection = db.connect()
	sql = ""SELECT count(*) from information_schema where table_schema=:table_schema""
	count = connection.execute(sql,{""table_schema"":table_schema}).fetchall()
	return count",通过$db$连接数据库，设置SQL语句：根据$table_schema$查询information_schema表中所有列的数量。执行SQL获取所有数据，并返回获取的所有数据。,Connect to the database through $db$ and set the SQL statement: Query the number of all columns in the information_schema table based on $table_schema$. Execute SQL to get all the data and return all the data obtained.
11656,"def get_data(conn,label):
	s = ""select * from TABLE1 where label=:label""
	datas = conn.execute(s,{""label"":label}).fetchall()
	return datas",使用$conn$执行SQL(根据$label$获取TABLE1表中的所有列)并获取所有数据，最后返回查询结果,"Use $conn$ to execute SQL (get all the columns in the TABLE1 table according to $label$), get all the data, and finally return the query result."
13335,"def query_page(conn,table_id):
	cur = conn.cursor()
	query_table = cur.execute(""SELECT * FROM base_table WHERE table_id=:table_id"",{""table_id"":table_id}).fetchone()
	conn.close()
	return query_table",使用$conn$执行SQL（根据$table_id$查询base_table表中所有列），并获取第一行数据，关闭连接，将查询结果返回。,"Use $conn$ to execute SQL (query all columns in the base_table based on $table_id$), get the first row of data, close the connection, and return the query results."
11534,"def CompareDB(conn, stock):
	cmd = ""SELECT * FROM INVESTORS WHERE stock = {}"".format(stock)
	info = conn.execute(cmd).fetchall()
	return [item for item in info]","设置SQL语句（使用format()函数格式化输出字符串,通过字符串$stock$查询INVESTORS表中的所有列），使用$conn$连接执行SQL并获取所有数据。将查询结果存储为list并返回。","Set up the SQL statement (format the output string with the format() function, query all columns in the INVESTORS table with the string $stock$). Use the $conn$ connection to execute the SQL and get all the data. Store the query result as list and return it."
14157,"def get_Data(conn, value):
	sql = ""select name from metadata where value=:value""
	result = conn.execute(sql,{""value"":value})
	if result.rowcount == 0:
		return False
	return result.fetchone()",设置SQL语句：根据$value$查询metadata表中的name，通过$conn$执行SQL语句。如果查询结果的行数为0，返回False；否则返回查询结果的第一条数据。,"Set SQL statement: Query the 'name' in the metadata table base on $value$ and execute SQL statement by $conn$. If the number of rows of the query result is 0, return False; otherwise return the first piece of data of the query result."
13620,"def game_id(conn, game_name):
	sql = ""SELECT game_id FROM Games WHERE game = %s""%game_name
	result = conn.execute(sql).fetchone()
	if result:
		return result[0]
	else:
		return None",使用%符号字符串匹配方法设置SQL：查询当game为$game_name$时Games表中的game_id。使用$conn$执行SQL并获取第一条数据。如果查询结果存在则返回第0个元素，否则返回None。,"Use the% symbol string matching method to set up SQL: query the game_id in Games table where game is $game_name$. Execute SQL with $conn$ and get the first data. Returns the tenth data if the query result exists, or None if it does not."
13074,"def query_row(conn,insert_key):
	if insert_key is None :
		return False
	values = conn.execute(""SELECT insert_val FROM table WHERE insert_key=:insert_key"", {""insert_key"": insert_key}).fetchall()
	return values",如果insert_key为None，则直接返回False。否则使用$conn$执行SQL（根据$insert_key$查询table表中的insert_val）并获取所有数据。最后返回查询结果。,"Return False directly if insert_key is None. Otherwise, use $conn$ to execute SQL (query the insert_val in the table table based on $insert_key$) and get all the data. Finally, return the query results."
11109,"from flask import request, redirect
def addfav(conn,user_name,base):
	if request.method == 'POST':
		texts = conn.execute(""SELECT favorite_stock FROM login_info WHERE user_name=:user_name"",{""user_name"":user_name}).fetchone()
		uri = base % texts
		return redirect(uri)",如果request模块发送请求的方式为POST，则使用$conn$连接执行SQL（通过$user_name$查询login_info中的第一条favorite_stock）。使用$base$采用%操作符处理查询结果。将处理后的结果使用redirect返回。,"If the request module sends the request as a POST, then the SQL is executed using the $conn$ connection (query the first favorite_stock in the login_info where the name of user is $user_name$). Use $base$ to process the query results with the % operator. Return the processed result using redirect."
13461,"def test_connect_method(connection, location):
	with connection.cursor() as cursor:
		sql = ""SELECT * FROM milks WHERE location =: location""
		results = cursor.execute(sql,{""location"":location}).fetchall()
		cursor.closed
		return results",使用with语句利用$connection$的游标方法执行SQL（根据$location$获取milks表中的所有列）并获取所有数据，然后关闭连接，最后返回查询结果,Use the with statement to execute the SQL through the cursor method of $connection$ (get all the columns in the milks table based on $location$) and get all the data. Close the connection and finally return the query results.
11636,"def search_rowproxy(engine,id):
	rows = engine.execute(""select * from RowProxy where id=:id"",{""id"":id})
	d = rows.fetchall()
	return d",使用$engine$执行SQL（根据$id$获取RowProxy表中的所有列）并获取所有数据，最后返回查询结果,"Use $engine$ to execute SQL (get all the columns in the RowProxy table according to $id$), get all the data, and finally return the query result."
13428,"def main(conn):
	flights = conn.execute(""SELECT origin FROM flights"").fetchall()
	origins = []
	for row in flights:
		origins.append(row)
	return origins",使用$conn$执行SQL(获取flights表中的origin列)并获取所有数据，再使用for循环对查询结果的每一项存储为list，最后返回list内容,Use $conn$ to execute the SQL (get the origin column in the flights table) and get all the data. Then use for loop to store each item of the query result as list and finally return the contents of list.
14036,"from flask import render_template, request, redirect
def topiclist(conn):
	if request.method==""POST"":
		alltopics = conn.execute(""SELECT topic_name FROM topics"").fetchall()
		return render_template(""topiclist.html"", alltopics=alltopics)
	return redirect(""/teacher"")","若request模块发送请求的方式为post，则使用$conn$执行SQL语句：获取$topics$中的所有topic_name，渲染并返回""topiclist.html"", 其中alltopics参数为查询结果；否则使用redirect返回""/teacher""","If the request module sends the request in a post method, use $conn$ to execute the SQL statement: Get all the topic_name in $topics$, render and return ""topiclist.html"", where the alltopics parameter is the query result; otherwise, use redirect to return ""/ teacher""."
13342,"from flask import request,render_template
def search(conn,isbn,title):
	if request.method == ""POST"":
		if title == '':
			return render_template(""index.html"")
		else:
			books = conn.execute(""SELECT * FROM books WHERE isbn=:isbn AND title=:title"",{""isbn"":isbn,""title"":title}).fetchall()
			return render_template(""index.html"", books=books)
	return render_template(""index.html"")","如果request请求方法为""POST""，则进行判断，如果$title$为空字符串则返回渲染后的""index.html""，否则将使用$conn$执行SQL语句（根据$isbn$和$title$查询books中的所有列）并获取所有数据，返回渲染后的""index.html""，其中books参数为查询结果。如果request方法不是""POST""，则返回渲染后的""index.html""。","If the request method is ""POST"", the judgment is made. If the $title$ is an empty string, return the rendered ""index.html""; otherwise, use $conn$ to execute the SQL statement (query all the columns in the books table based on $isbn$ and $title$), get all the data, and return the rendered ""index.html"", where the books parameter is the query result. If the request method is not ""POST"", return the rendered ""index.html""."
13510,"from sqlalchemy.sql import select
def getReferralPath(conn,username,References):
	s = select([References.c.ReferalFilePath]).where(References.c.Username == username)
	fs = conn.execute(s).fetchall()
	filename=[item[0] for item in fs]
	return filename",根据python表达式设置SQL：（根据Username为$username$查询$References$表中ReferalFilePath列）。通过$conn$执行SQL并获取所有数据，使用for循环遍历每一项查询结果，并将每条查询结果的第0个元素存储为list，最后返回这个list。,"Set SQL based on the python expression (query the ReferalFilePath column in the $References$ table where Username is $username$). Execute SQL with $conn$, get all the data, use for loop to traverse each query result, store the 0th element of each query result as list, and return the list."
13383,"def persist_bundle(conn,uuid):
	try:
		res=conn.execute(""SELECT count(*) FROM product WHERE uuid=:uuid"",{""uuid"":uuid}).fetchone()
		return res
	except:
		raise
	finally:
		conn.close()",尝试使用$conn$执行SQL（根据$uuid$查询product表中所有列的数量），并获取第一条数据，返回查询结果。如果执行时出现异常，直接抛出异常，最后确保数据库关闭。,"Try to use $conn$ to execute SQL (query the number of all columns in the product table based on $uuid$), get the first piece of data, and return the query results. If an exception occurs during execution, throw the exception directly, and finally ensure that the database is closed."
13496,"def test_autoflush_2(db, id):
	conn = db.connect()
	sql = ""SELECT name FROM users WHERE id =: id""
	names = conn.execute(sql,{""id"":id}).fetchall()
	return names",使用$db$连接数据库并执行SQL（根据$id$获取users表中的name列）并获取所有数据，最后返回查询结果,Use $db$ to connect to the database and execute the SQL (get the name column in the users table based on $id$) and get all the data. Finally return the query results.
11471,"from sqlalchemy.sql import select
def get_source(conn, key, table):
	sql = select([table.c.value]).where(table.c.key == key)
	values = conn.execute(sql).fetchall()
	if values:
		return values[0]
	else:
		raise KeyError(key)",根据python表达式设置SQL：（根据$key$查询$table$表中value列）。通过$conn$执行SQL并获取所有数据，如果有查询结果，返回其第0个元素。否则抛出KeyError，参数为$key$。,"Set SQL based on the Python expression: (query $table$ table value column based on $key$). Execute SQL with $conn$ and get all the data. If there is a query result, return its 0th element. Otherwise throw KeyError with $key$ as parameter."
14165,"def get_query(db_connection, name):
	rs = db_connection.execute(""select instance from user where name =:name"",{""name"":name}).fetchall()
	assert rs != []
	return rs",通过$db_connection$执行SQL语句：根据$name$获取user表中的全部instance数据，设置断言判断获取结果不为空list，返回所获取的全部数据。,"Execute SQL statement via $db_connection$: Get all instance data in user table according to $name$, set assertion to determine that the result is not empty 'list', and return all the obtained data."
13605,"from flask import render_template
def userpage(db,userid):
	sql = ""SELECT * FROM reviews where userid = :userid""
	res = db.execute(sql,{""userid"": userid}).fetchall()
	return render_template(""userpage.html"", res=res)","设置SQL：根据$userid$查询reviews表中的所有列。使用$db$执行SQL并获取所有数据。返回渲染后的""userpage.html""，并将查询结果传入res参数。",Set up SQL: query all columns in the reviews table where userid is $userid$. Use $db$ to execute SQL and get all data. Return the rendered 'userpage.html' and pass the query result into the res parameter. 
11492,"from flask import render_template
def dashboard(conn, uuid):
	query_sql = ""SELECT sur_name FROM users WHERE uuid =: uuid""
	results = conn.execute(query_sql,{""uuid"":uuid}).fetchall()
	return render_template(""dashboard.html"", results=results)","设置SQL（根据$uuid$查询users表中sur_name列），根据$conn$执行SQL并获取所有查询结果，返回渲染后的""dashboard.html""页面，参数results设置为查询结果。","Set SQL (query the users table sur_name column based on $uuid$), execute SQL based on $conn$ and get all the query results. Return the rendered ""dashboard.html"" page with results parameter being query result."
14127,"from sqlalchemy.sql import select
def get_data_baby_monitor(conn,bm,type):
	query = select([bm]).where(bm.c.type == type)
	result = conn.execute(query).fetchall()
	if result: 
		return result[-1]
	else: 
		return 0",使用Python表达式的方式设置SQL：根据$type$获取$bm$中的数据，通过$conn$执行SQL获取全部数据。如果查询结果存在，则返回查询结果的最后一个元素；否则返回0.,"Use the Python expression to set SQL: Get data in $bm$ based on $type$, and execute SQL to get all data by $conn$. If the query result exists, return the last element of the query result; otherwise, return 0."
13828,"def select_value(conn, id):
	result = conn.execute(""SELECT * FROM banks WHERE id =: id"", {""id"": id}).fetchall()
	assert len(result) > 0
	return list(result)",使用$conn$连接查询banks表中id为$id$的所有列，并获取全部数据，设置断言判断查询结果的长度大于0，查询结果转化为list并返回。,"Use $conn$ to query all the columns in the banks table with id as $id$ and get all the data. Set the assertion to determine the length of the query result is greater than 0, convert the query result into list and return it."
11004,"from flask import request
from flask import render_template
def booksearch(conn,isbn,low_title,low_author):
	if request.method == ""POST"":
		books = conn.execute(""SELECT * FROM books WHERE isbn=:isbn AND low_title=:low_title AND low_author=:low_author"",{""isbn"":isbn,""low_title"":low_title,""low_author"":low_author}).fetchall()
		return render_template(""books.html"",books=books)
	else:
		return render_template(""booksearch.html"")","如果request请求的方法是POST，则使用$conn$执行SQL（根据$isbn$，$low_title$和$low_author$获取books中的所有列）并获取所有数据。将查询结果传入books字段并渲染""books.html""。 否则就只返回渲染后的""booksearch.html""页面。","If the method of the request is POST, then use $conn$ to execute SQL (get all the columns in the books based on $isbn$, $low_title$ and $low_author$) and get all the data. Input the query result into the books field and render ""books.html"". Otherwise, only the rendered ""booksearch.html"" page will be returned."
11293,"from sqlalchemy import create_engine
def search_team(DATABASEURI,tname):
	engine = create_engine(DATABASEURI, convert_unicode=True)
	conn = engine.connect()
	res=conn.execute('SELECT mname FROM teams WHERE tname = :tname',{""tname"":tname}).fetchall()
	return res",使用$DATABASEURI$获取数据引擎，其中convert_unicode参数为True，然后连接数据库并执行SQL（根据tname为$tname$获取teams中的mname列）并获取所有数据，最后返回查询结果,"Use $DATABASEURI$ to get the data engine, where the convert_unicode parameter is True. Connect to the database and execute SQL (get the mname column in teams based on 'tname' is $tname$) and get all the data. Finally return the query result."
14125,"from sqlalchemy.sql import select
def get_last_update(con, currency):
	cursor_select = select[currency]
	data = con.execute(cursor_select).fetchall()
	for item in data:
		print(item[0])
	return data",使用Python表达式的方式设置SQL：查询$currency$表中的数据，通过$con$执行SQL获取全部数据。for循环遍历所有查询结果并打印每行的第0个元素，返回所有的查询结果。,"Use the Python expression to set up SQL: Query the data in the $currency$ table, and execute SQL to get all the data via $con$. For loop iterates through all the query results and prints the 0th element of each row. Return all the query results."
13775,"from flask import render_template
def book(conn,user_id,book_id):
	try:
		reviewfound = conn.execute(""SELECT * FROM REVIEWS WHERE user_id = :user_id AND book_id = :book_id"", {""user_id"": user_id,""book_id"": book_id }).fetchone()
		if reviewfound:
			return False
		else:
			return True
	except Exception:
		return render_template(""error.html"")","尝试使用$conn$执行SQL（根据$user_id$和$book_id$查询REVIEWS表中全部信息），并获取第一条数据，如果有查询结果，则返回False，否则返回True。如果执行时出现Exception异常，则返回渲染后的""error.html""页面。","Try to use $conn$ to execute SQL (query all the information in the REVIEWS table based on $user_id$ and $book_id$) and get the first piece of data. Return False, if there are query results; otherwise, return True. If an Exception occurs during execution, return the rendered ""error.html"" page."
13943,"from sqlalchemy.sql import select
def get_source(conn, foo, data):
	sql = select([foo]).where(foo.c.data == data)
	results = conn.execute(sql).fetchall()
	conn.close()
	assert len(results) > 0
	return results",使用Python表达式的方式设置SQL语句为：根据$data$查询$foo$表中的信息，使用$conn$执行SQL并获取所有数据。确保$conn$关闭。设置断言判断执行结果的长度大于0，返回执行结果。,"Use the Python expression to set the SQL statement: Query the information in the $foo$ table based on $data$, use $conn$ to execute SQL and get all the data. Make sure $conn$ is closed. Set the assertion to determine that the length of the execution result is greater than 0 and return the execution result."
11217,"def get_connect_tickets(engine,metadata):
	connection = engine.connect()
	data = ""select * from tickets where metadata=:metadata""
	res = connection.execute(data,{""metadata"":metadata}).fetchall()
	return res",使用$engine$连接数据库，执行SQL（根据$metadata$获取tickets中的所有列）并获取所有数据，最后返回查询结果,"Use $engine$ to connect to the database, execute SQL (get all the columns in the tickets based on $metadata$) and get all the data, and finally return the query result."
13073,"from sqlalchemy.sql import select
def get_aliases(conn,aliases):
	s = select(aliases)
	aliases = conn.execute(s).fetchall()
	dictionary = set([])
	for row in aliases:
		dictionary.add((row[0], row[1]))
	return dictionary",使用python表达式方式设置SQL（查询$aliases$表中的内容）。使用$conn$执行SQL并获取所有数据。使用for循环将查询结果中每一项的第0号元素和第1号元素存入list，并将list存入set中。最后返回处理后的set。,"Use python expressions to set up SQL (query the contents of the $aliases$ table). Use $conn$ to execute SQL and get all the data. Use for loop to store the 0th element and the 1st element of each item in the query results into list, and store list into set. Finally, return the processed set."
13033,"from flask import request
def book_query(conn,username,isbn):
	if request.method == ""POST"":
		item = conn.execute(""SELECT * FROM bookreviews WHERE username = :username and isbn = :isbn"",{""username"": username, ""isbn"": isbn}).fetchone()
		return item","如果request请求方式为""POST""，则使用$conn$执行SQL（根据$username$和$isbn$查询bookreviews表中的所有列）并获取第一条数据，最后返回查询结果。","If the request method of request is ""POST"", use $conn$ to execute SQL (query all columns in the bookreviews table based on $username$ and $isbn$), get the first piece of data, and finally return the query result."
13723,"from sqlalchemy import create_engine
def ListarMaterias(db_string,id):
	db = create_engine(db_string)
	try:
		result = db.execute(""SELECT curso FROM trab where id = :id"", {""id"":id}).fecthall()
		res = []
		for part in result:
			res.append(part)
	except Exception as e:
		print(e)
		res = False
	return res",通过$db_string$获取数据库引擎并建立连接。尝试执行SQL语句（根据$id$查询trab表中curso列），并获取所有数据，用for循环遍历获取的所有查询结果，将每条数据插入一个list中并返回。如果捕获到Exception异常，打印这个异常，并返回False。,"Get the database engine and establish a connection through $db_string$. Try to execute the SQL statement (query the curso column in the trab table according to $id$), get all the data, use for loop to traverse all the obtained query results, insert each piece of data into a list and return. If an Exception is caught, print the exception and return False."
11355,"from sqlalchemy import create_engine
def sql_import(host,customers, mock):
	engine = create_engine(host)
	conn = engine.connect()
	query = conn.execute(""SELECT * FROM database where customers=:customers and mock=:mock"", {""customers"": customers,""mock"":mock}).fetchall()
	return query",通过$host$获取数据库引擎并建立连接。执行SQL语句（根据$customers$和$mock$查询database表中所有列）并获取所有数据，将查询结果返回。,"Get the database engine and establish a connection through $host$. Execute the SQL statement (query all the columns in the database table based on $customers$ and $mock$), get all the data, and return the query results."
11390,"from sqlalchemy.sql import select
def getBranch(conn,buildsets_table, id):
	sql = select(buildsets_table).where(buildsets_table.c.id == id)
	r = conn.execute(sql).fetchall()
	if r:
		return r[0][0]
	else:
		return None",使用ORM的方式，设置SQL（根据$id$查询$buildsets_table$表中所有列），根据$conn$执行SQL并获取所有查询结果，如果查询结果不为空，返回第0条数据的第0个元素，否则返回None,"Use ORM method to set SQL (query all columns in the $buildsets_table$ table according to $id$), execute SQL according to $conn$ and get all the query results. If the query result is not empty, return the 0th element of the 0th data; otherwise, return None."
13314,"from sqlalchemy import create_engine
def getRowCount(DBHost,project,projId):
	engine = create_engine(DBHost)
	connection = engine.connect()
	try:
		result = connection.query(project).filter(project.ID == projId).first()
		return result[0]
	except Exception as e:
		print(e)
	finally:
		connection.close()
		engine.dispose()",通过$DBHost$获取数据库引擎并建立连接。使用ORM的方式，尝试执行SQL语句（根据$projId$查询$project$表中所有列），并获取第一条数据，返回数据的第0个元素，如果执行时出现Exception异常，则输出这个异常，最后关闭数据库连接，关闭所有连接。,"Get the database engine and establish a connection through $DBHost$. Try to execute the SQL statement with ORM method (query all the columns in the $project$ table according to $projId$), get the first piece of data, return the 0th element of the data. Output the exception if an Exception occurs during execution, and finally close the database connection and all connections."
13709,"from flask import render_template
def register(conn,username,password):
	users = conn.execute(""SELECT * FROM users where username = :username and password = :password"",{""username"":username,""passwors"":password}).fetchall()
	if users:
		return render_template(""success.html"")","使用$conn$执行SQL（根据$username$和$password$查询users表中的所有列）并获取所有数据。如果查询结果存在，则返回渲染后的""success.html""页面。","Use $conn$ to execute SQL (query all columns in the users table based on $username$ and $password$) and get all the data. If the query result exists, return the rendered ""success.html"" page."
13842,"from flask import jsonify
def tobs(conn, date):
	temps = conn.execute(""SELECT tobs FROM measurement WHERE date=: date"", {""date"": date}).fetchall()
	for row in temps:
		print(row[0])
	return jsonify(temps)",使用$conn$连接执行SQL语句（根据$date$查询measurement中的所有tobs数据）。for循环遍历查询结果，并打印每一项的第0个元素，使用jsonify返回查询结果。,Use the $conn$ connection to execute the SQL statement (query all the tobs data in measurement based on $date$). Use for loop iterate through the query results and print the 0th element of each item. Use jsonify to return the query results.
13296,"def search_label(conn):
	labels = conn.execute(""SELECT * FROM test_index_label"").fetchall()
	assert len (labels) !=0 
	return labels",使用$conn$执行SQL（获取test_index_label表中的所有列）获取所有数据，设置断言判断查询结果长度不为0，最后返回查询结果,"Execute SQL (get all the columns in the test_index_label) with $conn$, get all the data, set assertion to determine that the query result is not 0, and return the query result."
14097,"def unit_test(conn,num):
	query = ""SELECT COUNT(id) FROM titanic WHERE age < :num""
	results = conn.execute(query,{""num"":num}).fetchall()
	print(results)
	return results",设置SQL（查询titanic表中age小于$num$的id数目），使用$conn$执行SQL获取全部数据，打印查询结果并返回。,"Set SQL (query the number of id in the titanic table whose age is less than $num$), use $conn$ to execute SQL to get all the data, print the query results and return."
13258,"from sqlalchemy.sql import select
import logging
def get_source(engine, account, uname):
	dbcon = engine.connect()
	try:
		sql = select([account]).where(account.c.uname == uname)
		results = dbcon.execute(sql).fetchall()
		return results
	except Exception as e:
		logging.error(e)
		return None",通过$engine$建立连接。在python表达式方式下设置SQL（根据$uname$选取$account$表中的所有列）并在获取所有数据后返回。如果产生异常则使用logging的error级别输出异常信息将并返回None。,"Connect via $engine$. Set the SQL (all columns in the $account$ are selected where uname is $uname$) in a Python expression and return after getting all the data. If an exception is generated, the logging error level is used to output the exception information and return None."
14286,"from flask import request
def books(con,author):
	if request.method == ""POST"":
		years = con.execute(""SELECT year FROM books where author=:author"",{""author"":author}).fetchall()
		return years",如果request模块发送请求的方式为post，则使用$con$执行SQL（通过$author$查询books中的所有year），返回所有的查询结果。,"If the request module sends the request in a post method, use $con$ to execute SQL (query all the year in the books through $author$) and return all the query results."
13559,"from sqlalchemy.sql import select
def gatherFileLocs(engine, files,exp_id):
	conn = engine.connect()
	s = select([files.c.file_path]).where(files.c.exp_id == exp_id)
	results=conn.execute(s).fetchall()
	files_dict=[]
	for file1 in results:
		files_dict.append(file1)
	return files_dict",利用$engine$连接数据库，根据python表达式设置SQL：（根据$exp_id$查询$files$表中file_path列）。执行SQL并获取所有数据，使用for循环遍历每一项查询结果，并存储为list，最后返回这个list。,"Connect the database with $engine$ and set the SQL based on the python expression (query the file_path column in the $files$ table based on $exp_id$). Execute SQL and get all the data, use for loop to traverse each query result, store them as list, and finally return the list."
13097,"from sqlalchemy.sql import select
def update(conn,users,fr):
	s = select(users.c.name).where(users.c.projid == fr)
	names = conn.execute(s).fetchall()
	print(names)
	return names",在python表达式方式下设置SQL：查询当projid等于$fr$时，$users$表中的name。使用$conn$执行SQL并获取所有数据。打印并返回查询结果。,Set SQL in python expressions: Query name in $users$ table when projid is equal to $fr$. Use $conn$ to execute SQL and get all data. Print and return the query results.
11048,"from sqlalchemy.sql import select
def addfriend(connection,users,email):
	s = select(users).where(users.c.email ==email)
	email_user = connection.execute(s).first()
	connection.close()
	if email_user:
		return email_user 
	else:
		return False",用python表达式设置SQL（根据$email$查询$users$表中的所有信息）。利用$connection$执行SQL并获取第一条数据。关闭连接。如果查询结果存在则返回，否则返回False。,"Set SQL with the python expression (query all the information in the $users$ table based on $email$). Use $connection$ to execute SQL and get the first piece of data. Close the connection. Return if the query result exists. Otherwise, return False."
11333,"def get_user_menu(conn,type_id):
	entries = conn.execute('select count from resources where type_id=:type_id', {""type_id"",type_id}).fetchall()
	json_row=[]
	for en in entries:
		json_row.append(en)
	return json_row",使用$conn$执行SQL（根据$type_id$查询resources表中count列的所有数据），并将数据存储为list返回。,"Use $conn$ to execute SQL (query all data in the count column of the resources table based on $type_id$), store the data back as list and return."
11493,"from flask import request
def select_value(conn, user_id):
	if request.method == ""POST"":
		query_sql = ""SELECT book_id FROM reviews WHERE user_id =: user_id""
		book_id = conn.execute(query_sql,{""user_id"":user_id}).fetchall()
		return book_id","如果请求方式为""POST""，设置sql（根据$user_id$查询reviews表中book_id列），使用$conn$执行SQL并获取所有查询结果，返回查询结果。","If the request method is ""POST"", set the SQL (query the book_id column in the reviews table based on $user_id$), use $conn$ to execute the SQL and get all the query results. Return the query results."
14118,"def FindAllMusei(conn):
	q = 'SELECT * FROM musei'
	result = conn.execute(q).fetchall()
	return result",设置SQL：查询musei中的所有列，通过$conn$执行SQL语句获取所有数据，返回所获取的数据。,"Set SQL: Query all columns in musei, execute SQL statement by $conn$ to get all the data and return the obtained data."
11137,"from flask import render_template
def flights(conn,ganid):
	flights = conn.execute(""SELECT * FROM flights WHERE ganid=:ganid"",{""ganid"":ganid}).fetchall()
	return render_template(""flights.html"", flights=flights)",使用$conn$查询flights表中ganid为$ganid$的所有列，并获取所有数据。渲染并返回'flights.html'，其中flights参数为查询结果。,"Use $conn$ to query all columns in the flights where ganid is $ganid$ and get all the data. Render and return 'flights.html', where the flights parameter is the result of the query."
13488,"def copyContentData(conn, boxID):
	sql = ""SELECT * FROM files WHERE boxID =: boxID""
	rows = conn.execute(sql,{""boxID"":boxID}).fetchall()
	for row in rows:
		print(row)",使用$conn$执行SQL（根据$boxID$获取files表中的所有列）并获取所有数据，然后使用for循环打印查询结果的每一项,Use $conn$ to execute the SQL (get all columns in the files table based on $boxID$) and get all the data. Then use for loop to print each item of the query results.
11232,"def get_player_image(engine, name):
	with engine.begin() as conn:
		res = conn.execute(""select player_headshot from players where name=:name"",{""name"":name}).fetchall()
		for row in res:
			if row[0] is not None:
					return row",使用with语句通过$engine$的开始方法获取连接然后执行SQL（根据$name$获取players中的player_headshot）并获取所有数据，然后使用for循环遍历查询结果，如果查询结果的每一项的第0个元素不为空，则返回这一项结果,Use the with statement to get the connection via the start method of $engine$ and then execute SQL (get the player_headshot in 'players' based on $name$) and get all the data. Use for loop to iterate through the query result and return the result of each item if the 0th element of the query is not empty.
11669,"def get_passName(db,passengers,id):
	query = passengers.select([passengers.c.name]).where(passengers.c.flight_id==id)
	names = db.execute(query).fetchall()
	if len(names) == 0:
		return (""No names."")
	return names","根据python表达式的方式执行SQL（获取$passengers$表中flight_id为$id$的name列）并利用$db$执行SQL获取所有数据，如果查询结果的长度为0，则返回""No names.""，最后返回查询结果","Execute SQL according to the python expression (get the name column in the $passengers$ table whose flight_id is $id$) and use $db$ to execute SQL to get all the data. If the length of the query result is 0, return ""No names."", and finally return the query result."
13633,"def search_dotted_name(conn, cname):
	row = conn.execute(""SELECT * FROM one_row WHERE number_of_rows=:cname"",{""cname"":cname}).fetchone()
	assert len(row) == 1
	return row",使用$conn$执行SQL（查询当number_of_rows为$cname$时one_row表中的所有列）并获取第一条数据。设置断言判断查询结果长度为1，并返回查询结果。,Execute the SQL (query all the columns in the one_row where number_of_rows is $cname$) using $conn$ and get the first data. Set the assertion determination query result length to 1 and return the query result.
11694,"from flask import request
def register(db,users,pwd):
	if request.method == ""POST"":
		usernames = db.execute(users.select([users.username]).where(users.password==pwd)).fetchall()
		print(usernames)","如果请求的方法为""POST""，则利用$db$，根据python表达式的方式执行SQL（获取$users$表中password为$pwd$的username列）并获取所有数据，再打印查询结果","If the request method is ""POST"", use $db$, to execute SQL according to the python expression (get the username column in the $users$ table where password is $pwd$), get all the data, and then print the query result."
11587,"def CommitWithSavepoint(engine, cid):
	results = engine.execute(""SELECT cname FROM User WHERE cid = :cid"", {""cid"": cid}).fetchone()
	assert len(results) == 1
	return results",通过$engine$执行SQL语句：根据$cid$查询User中的第一条cname信息。设置断言判断返回结果的长度为1，返回查询结果。,"Execute the SQL statement through $engine$: Query the first piece of cname information in User table based on $cid$. Set assertion to determine that the length of the returned result is 1, and return the query result."
13531,"from sqlalchemy.sql import select
def test_sqlalchemy_core(engine,Customer,bindparam):
	update_stmt = select([Customer]).where(Customer.c.name == bindparam)
	res=engine.execute(update_stmt).fetchall()
	return res",根据python表达式设置SQL：（根据name为$bindparam$查询$Customer$表中所有列）。通过$engine$执行SQL并获取所有数据，返回查询结果。,"Set SQL based on the python expression (query all columns in the $Customer$ table whose name is $bindparam$). Execute SQL through $engine$, get all the data and return the query results."
14146,"from flask import request
def login(dbe,uid):
	if request.method == 'POST':
		connection = dbe.connect()
		cmd = 'SELECT loginpassword FROM Member WHERE uid = :uid'
		actualpwd = connection.execute(cmd, {'uid':uid}).fetchall()
		return actualpwd",如果request模块发送请求的方式为post，则通过$dbe$连接数据库，设置SQL（通过$uid$查询Member中的loginpassword），执行SQL获取所有数据，返回获取的所有数据。,"If the request module sends the request as post, connect to the database via $dbe$. Set the SQL (query the loginpassword in Member via $uid$), execute the SQL to get all the data, and return all the obtained data."
13038,"def testcommit(tlengine):
	external_connection = tlengine.connect()
	infor = external_connection.execute(""SELECT * FROM users_table"")
	inf_dic = [dict(zip(tuple(infor.keys()), record)) for record in infor.cursor]
	external_connection.close()
	return inf_dic",使用$tlengine$获取连接。使用连接执行SQL（查询users_table表中的所有列）。将执行结果中的keys作为字典中的key，将执行结果游标中的每一项作为字典中的value，将得到的字典存入list。关闭连接，并返回处理后的list。,"Use $tlengine$ to get the connection. Use the connection to execute SQL (query all columns in the users_table table). Use the keys in the execution result as the key in the dictionary, each item in the execution result cursor as the value, and store the obtained dictionary into list. Close the connection and return the processed list."
13145,"def clear_reset_code(conn, user_id):
	query = ""select * from users where user_id =: user_id""
	res = conn.execute(query,{""user_id"":user_id})
	return res.rowcount == 1",使用$conn$执行SQL（根据$user_id$获取users表中的所有列），最后返回查询结果的函数是否等于1的真假,"Execute SQL (get all the columns in the users where the id of user is $user_id$) with $conn$, and finally return whether the function that return the result of the query is true or false for 1."
11502,"def PrintSchema(con, path):
	output = con.execute(""SELECT name FROM SQLITE_MASTER WHERE path = :path"", {""path"": path}).fetchone()
	for SchemaName in output:
		print(SchemaName[0])
	con.close()",使用$con$查询SQLITE_MASTER表中path为$path$的第一条name数据，for循环遍历所有结果，并打印查询结果的第0个元素。确保$con$关闭。,Use $con$ to query the SQLITE_MASTER table for the first piece of name data with path as $path$.Use for loop iterate through all the results and print the 0th element of the query result. Make sure $con$ is closed.
11184,"from sqlalchemy.sql import select
def query_old_recs(conn,users,user_id):
	s = select(users).where(users.c.id == user_id)
	again_uesr = conn.execute(s).fetchall()
	return [dict(row) for row in again_uesr]",使用Python表达式的方式将SQL语句设置为通过$user_id$获取$users$中的全部数据，通过$conn$连接执行SQL语句，将查询结果每一项转化为dict存储为list并返回。,"Use a Python expression to set the SQL statement to get all the data in $users$ where the id of user is $user_id$, execute the SQL statement over a $conn$ connection, and store the query results as dict as a list and return."
13976,"def getDistrictCount(conn):
	sql_count = ""SELECT COUNT(id) FROM Districts""
	count_res = conn.execute(sql_count).fetchall()
	return count_res[0]",设置SQL语句，内容为：查询Districts表中的id数目，使用$conn$执行SQL获取所有数据，返回执行结果的第0个元素。,"Set the SQL statement: Query the number of id in the Districts table, use $conn$ to execute SQL to get all the data, and return the 0th element of the execution result."
11195,"def backupOldTable(engine,schema_name):
	with engine.connect() as con:
		gojome=con.execute(""SELECT * FROM table_name WHERE schema_name=:schema_name"",{""schema_name"":schema_name}).fetchall()
		return [dict(row) for row in gojome]",利用with语句根据$engine$连接数据库。根据$schema_name$查询table_name表中所有列，并获取全部数据，将查询结果每一项转化为dict存储为list并返回。,"Use the with statement to connect to the database where engine is $engine$. Query all the columns in the table_name where the name of schema is $schema_name$ and get all the data, convert each item of the query result into a dict, store it as a list, and return it."
11302,"def test_multiple_rows_one_commit(conn,rider):
	result = conn.execute(""SELECT * FROM RIDERS where rider = :rider"",{""rider"":rider}).fetchall()
	return tuple(r[0] for r in result)",使用$conn$执行SQL（根据$rider$查询RIDERS表中所有列）并获取所有数据，将查询结果的每一项的第0个元素存储为tuple并返回。,"Use $conn$ to execute SQL (query all columns in the RIDERS table based on $rider$), get all the data, store the 0th element of each item of the query result as tuple and return it."
14264,"from flask import render_template
def books(conn,isbn,title):
	try:
		results = conn.execute(""SELECT * FROM books WHERE isbn = :isbn and title = :title"",{""isbn"": isbn, ""title"": title}).fetchall()
		return render_template(""books.html"", results=results)
	except:
		return render_template(""tbr.html"")","尝试性通过$conn$连接执行SQL语句，内容为：根据$isbn$和$title$查询books表中的所有列，并获取所有数据，渲染并返回""books.html""，其中results参数为获取的所有数据。若出现异常，渲染并返回""tbr.html""。","Try to execute the SQL statement through the $conn$ connection, which says: Query all the columns in the books table based on $isbn$ and $title$, get all the data, render and return ""books.html"", where the 'results' parameter is all the obtained data. If an exception occurs, render and return ""tbr.html""."
14126,"from sqlalchemy.sql import select, and_
from sqlalchemy import create_engine
def query_prod(easyFindDB,categoria, prod, nome):
	engine = create_engine(easyFindDB)
	connection = engine.connect()
	controllo = select([prod.c.id]).where(and_(prod.c.categoria == categoria, prod.c.nome == nome))
	risControl = connection.execute(controllo).fetchall()
	if len(risControl) == 1:
		return False
	return risControl",通过$easyFindDB$获取数据库引擎并建立连接。使用Python表达式的方式设置SQL语句（根据$categoria$和$nome$和查询$prod$表中的id数据），执行SQL语句获取所有数据。如果查询结果的长度是1，返回False；否则返回所有的查询结果。,"Get the database engine and establish a connection via $easyFindDB$. Use the Python expression to set up the SQL statement (query the id data in the $prod$ table based on $categoria$ and $nome$) and execute the SQL statement to get all the data. If the length of the query result is 1, return False; otherwise return all the query results."
13112,"from flask import render_template,request
def location(db,zipcode):
	if request.method == 'POST':
		res = db.execute(""SELECT users FROM zips WHERE zipcode = :zipcode"", {""zipcode"": zipcode}).fetchone()
		return render_template(""location.html"", zips=res)","如果请求的方法为'POST'，则使用$db$执行SQL（根据$zipcode$获取zips表中的users列）并获取第一条数据，返回渲染后的""location.html""，其中zips参数为查询结果","If the requested method is 'POST', SQL is executed using $db$ (to get the users column in the zips where zipcode is $zipcode$) and the first data is returned to the rendered ""location.html"", where the Zips parameter is the result of the query."
14076,"import csv
def main(conn):
	f = open(""books.csv"")
	reader = csv.reader(f)
	for author in reader:
		results = conn.execute(""select title from books where author=:author"",{""author"":author}).fetchall()
		print(results)",打开books.csv文件并读取，for循环遍历读取内容，通过$conn$执行SQL语句：使用$author$查询books表中的所有title数据，打印查询结果。,"Open the books.csv file and read it, use for loop traversal to read the content, execute the SQL statement through $conn$: Use $author$ to query all the 'title' data in the books table and print the query results."
11334,"from sqlalchemy import create_engine
def clear(postgresql,taxonomysampleinfo):
	eng = create_engine(postgresql)
	statement = eng.execute(""select * FROM taxonomyresults where taxonomysampleinfo=:taxonomysampleinfo"",{""taxonomysampleinfo"":taxonomysampleinfo}).fetchone()
	return statement",通过$postgresql$获取数据库引擎并建立连接。执行SQL语句（根据$taxonomysampleinfo$查询taxonomyresults表中的第一条数据），关闭连接，将查询结果返回。,"Get the database engine and establish a connection through $postgresql$. Execute the SQL statement (query the first piece of data in the taxonomyresults table according to $taxonomysampleinfo$), close the connection, and return the query results."
14089,"def aff_liste(connection):
	r= connection.execute(""select * from fiche"").fetchall()
	for i in r:
		print(i.id, i.titre, i.text)",使用$connection$执行SQL：查询fiche表中的所有列，并获取所有数据。for循环遍历查询结果，打印查询结果的id，titre和text对应的值。,"Use $connection$ to execute a SQL: Query all columns in the fiche table and get all the data. Use for loop traversal to query the results, print the id of the query results and the corresponding values of titre and text."
11029,"def query(conn,rownum):
	result = conn.execute(""SELECT * FROM dual WHERE rownum<:rownum"",{""rownum"":rownum})
	if result.rowcount != 0:
		return result.rowcount",使用$conn$执行SQL：根据$rownum$查询dual表中的所有列。如果查询结果行数不为0，则返回查询结果的行数。,"Use $conn$ to execute SQL: To query all columns in the dual table based on $rownum$. If the number of rows of the query result is not 0, return the number of rows of the query result."
13002,"from sqlalchemy import create_engine
def create_database(postgres_dbapi,time_now):
	if time_now:
		engine = create_engine(postgres_dbapi)
		conn = engine.connect()
		nums = conn.execute(""SELECT num FROM database_name WHERE time_now=:time_now "",{""time_now"":time_now}).fetchall()
		conn.close()
		return nums
	else:
		return False",如果$time_now$存在，则通过$postgres_dbapi$创建数据库引擎并获取连接；执行SQL（根据$time_now$查询database_name表中的num）并获取所有数据；关闭连接并返回查询结果。否则（$time_now$不存在），返回False。,"If $time_now$ exists, create the database engine and get the connection through $postgres_dbapi$; execute SQL (query the num in the database_name table based on $time_now$) and get all the data; close the connection and return the query results. Otherwise ($time_now$ does not exist), return False."
14262,"def init_sqlite3(conn):
	c = conn.cursor()
	res = c.execute(""select id from sqlalchemy_bench"").fetchone()
	return res",通过$conn$创建游标，并通过游标执行SQL：查询sqlalchemy_bench表中的第一个id，返回所有的查询结果。,Create a cursor with $conn$ and execute a SQL through the cursor: Query the first id in the sqlalchemy_bench table and return all the query results.
13967,"def select_value(conn, username):
	sql = ""SELECT password FROM player_master WHERE username =: username""
	result = conn.execute(sql,{""username"":username}).fetchall()
	for row in result:
		print(row)",设置SQL（通过$username$查询player_master表中的password数据）。使用$conn$连接执行SQL获取所有数据，for循环遍历执行结果并打印。,Set SQL (query the 'password' data in the player_master table through $username$). Use the $conn$ connection to execute SQL to get all the data. For loop iterates the execution result and prints.
13755,"from flask import render_template
def admin(engine,model_name,pct_correct):
	with engine.connect() as con:
		sql = ""SELECT * FROM outcome_vw where model_name = :model_name and pct_correct = :pct_correct""
		rsOutcome = con.execute(sql,{""model_name"":model_name,""pct_correct"":pct_correct}).fetchall()
		return(render_template(""project_outcomes.html"", rsOutcome = rsOutcome))","使用with语句根据$engine$连接数据库，设置SQL（根据$model_name$和$pct_correct$查询outcome_vw表中所有列），执行SQL并获取所有查询结果，返回渲染后的""project_outcomes.html""页面，设置参数rsOutcome为查询结果。","Use the with statement to connect the database according to $engine$, set SQL (query all columns in the outcome_vw table based on $model_name$ and $pct_correct$), execute SQL, get all the query results, return the rendered ""project_outcomes.html"" page, and set the parameter rsOutcome to the query result."
11237,"from sqlalchemy.sql import select
def mark_thread_dead(conn,Threads,thread_number):
	thread_query = select([Threads]).where(Threads.thread_number == thread_number)
	thread_rows = conn.execute(thread_query).fetchone()
	return thread_rows",使用$conn$，根据python表达式的方式执行SQL（根据$thread_number$获取$Threads$表中的所有列）并获取第一行数据，最后返回查询的结果,"Use $conn$ to execute SQL based on the Python expression (get all columns in $Threads$ table based on $thread_number$), get the first row of data, and finally return the query result."
13473,"def test_rollback(conn, name):
	try:
		sql = ""SELECT * FROM pets WHERE name =: name""
		results = conn.execute(sql,{""name"":name}).fetchall()
		return results
	except:
		pass",尝试利用$conn$执行SQL（根据$name$获取pets表中的所有列）并获取所有数据，再返回查询结果，如果不尝试则通过,"Try to use $conn$ to execute SQL (get all columns in the pets table based on $name$) and get all data, then return the query results. If not try, then pass."
11131,"from sqlalchemy.sql import select
def test_change(conn,table_name,id):
	s = select(table_name.c.foo).where(table_name.c.id == id)
	foolist = conn.execute(s).fetchall()
	assert len(foolist)>0","使用Python表达式的方式设置SQL（通过$id$查询$table_name$中的foo列），使用$conn$执行SQL并获取所有数据,设置断言判断返回结果的长度大于0。","Use Python expressions to set the SQL (query the foo column in the $table_name$ with $id$) , execute the SQL with $conn$ and get all the data, and set assertions to determine that the length of the returned result is greater than 0."
13819,"def get_medal(conn,Medal,olympic_id):
	medal_olympics = conn.query(Medal).filter_by(Medal.olympic_id == olympic_id).all()
	assert len(medal_olympics) != 0",通过$conn$使用ORM方式执行SQL语句：查询$Medal$表中olympic_id为$olympic_id$的内容，并获取全部数据，设置断言判断返回结果的长度不为0。,Use ORM method to execute SQL statement through $conn$: Query the contents with olympic_id as $olympic_id$ in the $Medal$ table and get all the data. Set assertion to determine the length of the returned results is not 0.
14260,"def get(conn, u_id):
	c = conn.cursor()
	result = c.execute(""select u_name from customer where u_id =: u_id"",{""u_id"":u_id}).fetchall()
	return result",通过$conn$创建游标对象，并使用游标对象执行SQL语句，语句内容为：根据$u_id$查询customer表中的所有u_name，将查询结果返回。,"Create a cursor object through $conn$ and use the cursor object to execute the SQL statement, and the content is as follows: Query all the u_name in the customer table according to $u_id$ and return the query results."
14121,"def get_data(conn,tables):
	try:
		results = conn.query(tables).fetchall()
		return results
	except Exception as e:
		return False","尝试使用ORM方式,通过$conn$执行SQL语句，其内容为：查询$tables$表中的所有数据，返回查询结果，如果出现Exception，则返回False。","Try to use ORM method to execute the SQL statement via $conn$: Query all of data in the $tables$ table, return the query results, and is an Exception occurs, return False."
13628,"def search_city(connection,city,temp,pressure,wind):
	sql = ""select * from City where city=:city and temp=:temp and pressure=:pressure and wind=:wind""
	results = connection.execute(sql,{""city"":city,""temp"":temp,""pressure"":pressure,""wind"":wind}).fetchall()
	return results","设置SQL：通过$city$, $temp$, $pressure$和$wind$查询City表中的所有列。使用$connection$执行SQL并获取所有数据。返回查询结果。","Set SQL: query all columns in the City table where City is $city$, temp is $temp$, pressure is $pressure$ and wind is $wind$. Execute the SQL using $connection$ and get all the data. Return the result of the query."
14278,"from sqlalchemy import create_engine
def get_info(uri):
	engine = create_engine(uri)
	res = engine.execute(""select id from testtable"").fetchall()
	return res",通过$uri$获取数据库引擎，并使用创建的数据库引擎执行SQL语句：查询testtable中的所有id，返回所有的查询结果。,Get the database engine through $uri$ and use the created database engine to execute the SQL statement: Query all the id in the testtable and return all the query results.
13043,"from sqlalchemy.sql import select
def getById(conn,class_or_mapper):
	try:
		s = select(class_or_mapper.c.id)
		objects = conn.execute(s).fetchall()
		return objects
	except :
		print(""Error"")","尝试性使用python表达式方式设置SQL（查询$class_or_mapper$表中的id）。使用$conn$执行SQL并获取所有数据。最后返回查询结果。如果出现异常，则直接打印""Error""信息。","Try to use python expressions to set up SQL (query the id in the $class_or_mapper$ table). Use $conn$ to execute SQL and get all the data. Finally, return the query result. If an exception occurs, the ""Error"" message is printed directly."
11564,"def books(conn, qisbn, qtitle):
	val = conn.execute(""SELECT * FROM books WHERE qisbn = :qisbn AND qtitle = :qtitle"", {""qisbn"": qisbn,""qtitle"": qtitle}).fetchall()
	if val is not None:
		return None
	else:
		for row in val:
			print(row)",使用$conn$连接执行SQL语句，其内容为：根据$qisbn$和$qtitle$获取books表中的全部列，并获取所有数据。如果查询结果为空，则返回None；否则，使用for循环遍历查询结果并打印。,"Use the $conn$ connection to execute a SQL statement: Get all columns in the books table based on $qisbn$ and $qtitle$, and get all the data. If the query result is empty, then return None; otherwise, use for loop iterate through the query results and print them."
13422,"from sqlalchemy.sql import select
def get_taxids(conn, table_gi_taxid_nuc, tax_id):
	try:
		sql = select([table_gi_taxid_nuc.c.gi]).where(table_gi_taxid_nuc.c.tax_id == tax_id)
		records = conn.execute(sql).fetchall()
		return records
	finally:
		conn.close()",尝试使用$conn$，根据python表达式的方式执行SQL（根据$tax_id$获取$table_gi_taxid_nuc$表中的gi列）并获取所有数据，并返回查询结果，最终确保$conn$连接关闭,"Try to use $conn$, execute SQL based on the Python expression (get gi column in $table_gi_taxid_nuc$ table based on $tax_id$) and get all the data. Return the query results and finally make sure $conn$ connection is closed."
11136,"def activateSurvey(conn,survey,company):
	sql = ""SELECT * FROM userdetails WHERE survey=""+ survey +"" AND company=""+company
	infor = conn.execute().fetchall(sql)
	return infor",设置SQL为通过$survey$和$company$查询userdetails中的所有列，并获取所有数据，使用$conn$连接执行SQL语句，并返回所有的查询结果。,"Set the SQL to query all columns in userdetails where survey is $survey$ and company is $company$, get all the data, execute the SQL statement using the $conn$ connection, and return all the query results."
11039,"def lookup_genre_id(conn,genre):
	genre_id = conn.execute(""SELECT id FROM ratings WHERE genre = '{}';"".format(genre)).fetchall()
	return list(genre_id)[0]",使用$conn$执行SQL（使用format字符串的方法，根据$genre$查询ratings表中的id）并获取所有数据。将查询结果转化为list类型并返回第0个数据。,Use $conn$ to execute SQL (use the method of format string to query the id in the ratings table based on $genre$) and get all the data. Convert the query result to a list type and return the 0th data.
14276,"def test_connection(db,name):
	conn = db.connection()
	rp = conn.execute('select email from users where name=:name',{""name"":name}).fetchall()
	return rp",通过$db$连接数据库，执行SQL语句，其内容为：根据$name$从users表中查询所有email数据，返回所有的查询结果。,"Connect the database through $db$ and execute the SQL statement, which reads: Query all email data from the users table according to $name$ and return all the query results."
14219,"from sqlalchemy.sql import select ,func
import logging
def getStats(conn,table,id):
	try:
		s = select([func.count(table.c.name)]).where(table.c.id==id)
		result=conn.execute(s).fetchone()
		return result
	except Exception as e:
		logging.error(e)",尝试使用Python表达式的方式设置SQL语句：查询$table$表中id为$id$的name数量，通过$conn$连接执行SQL语句获取第一条数据并返回执行结果。如果出现Exception，则是以logging.error()方法返回异常信息。,"Try use the Python expression to set up the SQL statement: Query the number of name in the $table$ table whose id is $id$, execute the SQL statement through the $conn$ connection to get the first piece of data and return the execution result. If Exception occurs, return the exception information with the logging.error() method."
13373,"def query_page(engine,schema_value):
	with engine.connect() as conn:
		sql = ""SELECT table_name FROM schema_tables WHERE schema_value=:schema_value"",{""schema_value"":schema_value}
		table_names=conn.execute(sql).fetchall()
		return table_names",使用with语句根据$engine$连接数据库。设置sql（根据$schema_value$查询schema_tables表中table_name列），执行SQL并获取所有查询结果，返回查询结果。,"Use the with statement to connect the database according to $engine$. Set up sql (query the table_name column in the schema_tables table according to $schema_value$), execute SQL, get all the query results, and return them."
11426,"from flask import render_template
def book_results(conn, author):
	sql = ""SELECT title FROM books WHERE author =: author""
	books_list = conn.execute(sql,{""author"":author}).fetchall()
	for books in books_list:
		print(""Search result: %s""% books.title)
	if books_list is None:
		return render_template(""error.html"", message = ""Sorry"")
	else:
		return render_template(""all_book_results.html"",books_list=books_list)","设置sql（根据$author$查询books表中title列）,使用$conn$执行SQL并获取所有查询结果，使用for循环遍历所有查询结果，打印""Search result:""与每条数据的title字段。如果这个list为空，返回渲染后的""error.html"",参数message为""Sorry""。否则返回渲染后的""all_book_results.html""页面,参数books_list为保存查询结果的list。","Set up SQL (query title column in books table based on $author$), use $conn$ to execute SQL and get all query results, use for loop to iterate through all query results, print ""Search result:"" and 'title' field of each data. If the list is empty, return the rendered ""error.html"" with the parameter message ""Sorry"". Otherwise, return the rendered ""all_book_results.html"" page and the list which stores the query results with parameter of books_list."
13305,"def get_top_pokemon(conn,order_by):
	query = conn.execute(""SELECT pokemon_id FROM sightings WHERE order_by=:order_by"",{""order_by"":order_by})
	pokemons = [dict(r) for r in query.fetchall()]
	return pokemons","使用$conn$执行SQL（根据$order_by$查询sightings表中pokemon_id列），获取所有数据，使用for循环将查询结果的每一条转化为dict,并以list存储，再将这个list返回","Use $conn$ to execute SQL (query the pokemon_id column in the sightings table according to $order_by$), get all the data, use for loop to convert each item of the query result into dict, and store it in list, and then return the list."
14175,"def list_wordlist(conn, student):
	stmt = ""SELECT * FROM french_wordlist WHERE student = %s""%student
	result = conn.execute(stmt).fetchall()
	assert len(result)>0
	return result","设置SQL语句，内容为:通过$student$查询french_wordlist中的所有列,并使用%操作符匹配SQL字符串中的条件。通过$conn$执行SQL语句获取所有数据。设置断言判断执行结果的长度是否大于0，并返回所有的执行结果。","Set the SQL statemen: Query all the columns in the french_wordlist through $student$ and use the% operator to match the conditions in the SQL string. Execute the SQL statement through $conn$ to get all the data. Set the assertion to determine whether the length of the execution result is greater than 0, and return all the execution results."
13501,"from sqlalchemy import create_engine
from flask import jsonify
def stockdata(localhost,id):
	engine = create_engine(localhost)
	data = engine.execute(""SELECT adj_open FROM stock_data where id=:id"",{""id"":id}).fetchall()
	newdata = []
	for x in data:
		d = {'id': x[0],'adj_open': x[1],'adj_close': x[2]}
		newdata.append(d)
	return jsonify(newdata)",通过$localhost$获取数据库引擎。执行SQL语句（根据$id$查询stock_data表中adj_open列），并获取所有数据，使用for循环将查询结果的每一条的第0、1、2个元素分别转化为dict中'id'、'adj_open'、'adj_close'键对应的值，并以list存储。返回转化为json的list。,"Get the database engine through $localhost$. Execute the SQL statement (query the adj_open column in the stock_data table according to $id$) and get all the data. Use for loop to convert the 0th, 1st, and 2nd elements of each item of the query result into the values corresponding to the 'id', 'adj_open', and 'adj_close' keys in dict respectively, and store them in list. Return the list converted to json."
11254,"from sqlalchemy import create_engine
def add_batch_oper_infos(host, date):
	try:
		engine = create_engine(host, echo=True)
		connection = engine.connect()
		res=connection.execute(""select * from datas where date=:date"",{""date"":date}).fetchall()
		return res
	except Exception as ex:
		print(ex)
	finally:
		connection.close()",尝试通过$host$获取数据库引擎并建立连接，其中echo参数为True，执行SQL语句（根据$date$获取datas中的所有列）并获取所有数据，然后返回获取的结果，如果执行时出现异常，则打印异常，最终确保连接关闭,"Try to get the database enginevia $host$ and establish a connection, where the echo parameter is True, execute the SQL statement (get all columns in datas based on $date$) and get all the data and return the obtained result. Print the exception if an exception occurs during execution, and finally make sure the connection is closed."
13990,"def test_morerollback_off_conn(conn, name):
	sql = ""SELECT user_id FROM users WHERE user_name =: name""
	result = conn.execute(sql,{""name"":name}).fetchall()
	try:
		assert len(result) == 0
	finally:
		conn.close()",设置SQL语句为：当user_name等于$name$时查询users表中的user_id数据，通过$conn$执行SQL语句获取所有数据。尝试设置断言判断执行结果的长度为0。最后确保$conn$关闭。,"Set the SQL statement: Query the user_id data in the users table where user_name is $name$, and execute the SQL statement with $conn$ to get all the data. Try to set the assertion to determine the length of the execution result to 0. Finally make sure $conn$ is closed."
11362,"def main(conn,minutes):
	query = conn.execute(""SELECT dest FROM flights where minutes=:minutes"", {""minutes"": minutes}).fetchall()
	for i in query:
		print(i)",使用$conn$执行SQL（根据$minutes$查询flights表中dest列的所有查询结果），并使用for循环将数据逐条打印。,Use $conn$ to execute SQL (query all query results for the dest column in the flights table based on $minutes$) and use for loop to print the data one by one.
14096,"from sqlalchemy.sql import select
def query(conn, tconfig, item_id):
	stm = select[tconfig].where(tconfig.c.id==item_id)
	res = conn.execute(stm).fetchall()
	return res",使用Python表达式的方式设置SQL语句：查询$tconfig$表中id为$item_id$的数据，使用$conn$执行SQL获取所有数据并将其返回。,"Use the Python expression to set the SQL statement: Query the data in the $tconfig$ table whose id is $item_id$, and use $conn$ to execute SQL to get all the data and return it."
13195,"from flask import render_template
def transactions_list(conn,listname):
	list = conn.execute(""SELECT * FROM transactions where listname=:listname"",{""listname"":listname}).fetchall()
	return render_template(""transactions.html"", list=list)","使用$conn$执行SQL（根据$listname$获取transactions表中的所有列）并获取所有数据，最后返回渲染后的""transactions.html""，其中list参数为查询结果","Execute the SQL with $conn$ (get all the columns in the transactions where the name of list is $listname$) , get all the data, and finally return the rendered ""transactions.html"" with the list parameter as the result of the query."
13444,"def select_queue(conn, data):
	if data is not None:
		queue_sql = ""SELECT queue FROM Task WHERE data =: data""
		Tasks = conn.execute(queue_sql,{""data"":data}).fetchall()
		return [Task for Task in Tasks]",如果$data$不是None，则使用$conn$执行SQL（根据$data$获取Task表中的queue列）并获取所有数据，再使用for循环对查询结果的每一项存储为list并返回,"If $data$ is not None, then use $conn$ to execute the SQL (get the queue column in the Task table based on $data$) and get all the data. Use for loop to store each item of the query results as list and return it."
13587,"from sqlalchemy.sql import select
def test_core_reuse_stmt(engine,Customer,id):
	stmt = select([Customer.table]).where(Customer.id == id)
	with engine.connect() as conn:
		row = conn.execute(stmt).fetchall()
		return row",根据python表达式设置SQL：（根据$id$查询$Customer$表中table列）。使用with语句根据$engine$连接数据库，执行SQL并获取所有数据，返回执行语句结果。,"Set up SQL based on the python expression (query the 'table' column in the $Customer$ table based on $id$). Use the with statement to connect the database according to $engine$, execute SQL, get all the data, and return the result of executing the statement."
13862,"def revBook(conn, userid):
	bookrs = conn.execute(""SELECT isbn FROM reviews WHERE userid = :userid"", {""userid"": userid}).fetchone()
	return bookrs",使用$conn$连接执行SQL语句（根据$userid$查询reviews中第一条isbn数据），返回查询结果。,Use the $conn$ connection to execute the SQL statement (query the first piece of isbn data in reviews based on $userid$). Return the query result.
11356,"def main(conn,humidity):
	adder = conn.execute('SELECT * FROM CHECKIN WHERE humidity =:humidity', {""humidity"": humidity}).fetchone()
	return adder",使用$conn$执行SQL（根据$humidity$查询CHECKIN表中所有列）并获取第一行数据，将数据返回。,"Use $conn$ to execute SQL (query all columns in the CHECKIN table based on $humidity$), get the first row of data, and return the data."
11394,"def insert_data(conn,full_name):
	users = conn.execute(""select * from get_users where full_name =:full_name"", {""full_name"": full_name}).fetchone()
	return users",使用$conn$执行SQL（根据$full_name$查询get_users表中所有列），并获取第一行数据，将查询结果返回。,"Use $conn$ to execute SQL (query all columns in the get_users table based on $full_name$), get the first row of data, and return the query results."
11566,"def getGrapXMLdata(conn, date_use):
	results = conn.execute(""SELECT * FROM dataSST WHERE date_use = :date_use"", {""date_use"": date_use}).fetchall()
	for r in results:
		print(r)",通过$conn$查询dataSST表中date_use为$date_use$的所有列，并获取所有数据，通过for循环遍历查询结果并打印。,Query all columns in the dataSST table with date_use as $date_use$ through $conn$ and get all the data. Use for loop iterate through the query result and print it.
13661,"from sqlalchemy import create_engine
def test_select(memory, t_ccs, project_id):
	engine = create_engine(memory)
	with engine.begin() as conn:
		rows = conn.execute(t_ccs.select().where(t_ccs.c.project_id ==project_id),{""project_id"":project_id}).fetchall()
		assert len(rows) != 0",根据$memory$创建数据库引擎。在with语句中开始一次连接。利用连接执行python表达式表示的SQL（根据$project_id$获取$t_ccs$中的所有列）并获取所有数据。最后设置断言判断查询结果长度不为0.,"Create the database engine where memory is $memory$. Start a connection in the with statement. Execute the SQL represented by the Python expression using the join (get all columns in $t_ccs$ where project_id is $project_id$) and get all the data. Finally, set assertion to judge that the length of the query result is not 0."
13731,"def get_subset_data(conn,engine,session):
	try:
		query = ""SELECT * FROM database where engine = :engine and session = :session""
		rows = conn.execute(query, {""engine"":engine,""session"":session}).fetchall()
		if rows is not None:
			return [dict(r) for r in rows]
	except Exception as error:
		print(error)
	finally:
		conn.close()","尝试设置sql（根据$engine$和$session$查询database表中全部信息）,使用$conn$执行SQL并获取所有查询结果，如果查询结果不为空，使用for循环将查询结果的每一条转化为dict,以list存储并返回。当捕获到Exception异常时，打印这个异常。最后关闭连接。","Try to set up sql (query all the information in the database table based on $engine$ and $session$), use $conn$ to execute SQL and get all the query results. If the query results are not empty, use for loop to convert each of the query results to dict, store in list and return. If an Exception is caught, print the exception. Finally, close the connection."
11280,"def test_input_min_date(conn,entity_id):
	r = conn.execute('select * from events_entity_id where entity_id=:entity_id',{""entity_id"":entity_id}).fetchall()
	rows = [x[0] for x in r]
	assert len(rows) == 2
	return rows",通过$conn$执行SQL(根据$entity_id$获取events_entity_id中的所有列)并获取所有数据，将查询结果每一项的第0个元素转化为list，进一步设置断言list内容长度为2，最后返回list内容,"Execute SQL via $conn$ (get all the columns in the events_entity_id based on $entity_id$) and get all the data, convert the 0th element of each item of the query result into list, further set the assertion list content length to 2, and finally return the list content."
11339,"from flask import render_template, request
def weather(conn,session, zip):
	if request.method == ""POST"":
		if not session.get('logged_in'):
			lat= conn.execute('SELECT longitude FROM ZIPCODE WHERE zip =:zip',{""zip"":zip}).fetchone()
			return lat
		else:
			return render_template('checked.html')","如果请求方式为""POST""，如果$session$没有获取到数据'logged_in'，利用$conn$执行SQL（根据$zip$查询ZIPCODE表中longitude列），获取第一行数据并返回。否则，返回渲染后的'checked.html'页面。","If the request method is ""POST"" and $session$ does not get the data 'logged_in', use $conn$ to execute SQL (query the longitude column in the ZIPCODE table according to $zip$), get the first row of data and return. Otherwise, return the rendered 'checked.html' page."
11483,"from flask import render_template
def get_data(conn, date):
	find_fli = ""SELECT * FROM flights WHERE date =: date""
	flights = conn.execute(find_fli,{""date"":date}).fetchall()
	return render_template(""index.html"", flights=flights)","设置sql（根据$date$查询flights表中全部信息）,使用$conn$执行SQL并获取所有查询结果，返回渲染后的""index.html""页面，其中参数flights设置为查询结果。","Set up SQL (query all the information in the flights table based on $date$), execute SQL with $conn$ and get all the query results. Return the rendered ""index.html"" page with the flights parameter as the query results."
11592,"def existeEmail(db_conn, email):
	query = ""SELECT * FROM customers WHERE email = :email""
	return list(db_conn.execute(query, email = email).fetchall())",设置SQL语句（查询customers表中email为$email$的全部列），使用$db_conn$执行查询语句（其中email参数为email）获取全部数据，将查询结果转换为list形式并返回。,"Set the SQL statement (query all columns in the customers table where email is $email$), use $db_conn$ to execute the query statement (where the email parameter is email), get all the data, convert the query results to list form and return."
13978,"def countTradingTxs(conn):
	result_set = conn.execute(""SELECT count(requested_tx_id) FROM pde_trades"").fetchall()
	for r in result_set:
		return r[0]",使用$conn$执行SQL语句：查询pde_trades表中的requested_tx_id数量，并获取所有数据。for循环遍历执行结果，返回执行结果的第0个元素。,Use $conn$ to execute the SQL statement: Query the number of requested_tx_id in the pde_trades table and get all the data. For loop iterates through the execution result and returns the 0th element of the execution result.
13567,"from sqlalchemy import create_engine
def initial_profiles(DB_CONNECT_STRING,username):
	engine = create_engine(DB_CONNECT_STRING, max_overflow=5)
	results = engine.execute(""select profileurl from people_profile where username=:username"",{""username"":username}).fetchall()
	for r in results:
		print(r)",通过$DB_CONNECT_STRING$获取数据库引擎，参数max_overflow设置为5。执行SQL语句（根据$username$查询people_profile表中profileurl列），并获取所有数据，使用for循环将查询结果的每一条打印。,"Get the database engine through $DB_CONNECT_STRING$, where the parameter max_overflow is set to 5. Execute the SQL statement (query the profileurl column in the people_profile table according to $username$), get all the data, and use for loop to print each piece of the query result."
13079,"from flask import jsonify
def isbn_api(connection,isbn):
	api_response = connection.execute(""SELECT title FROM books WHERE isbn = :isbn"", {""isbn"": isbn}).fetchone()
	return jsonify(api_response)",使用$connection$执行SQL（根据$isbn$查询books表中的title）并获取第一条数据。返回jsonify处理后的查询结果。,Use $connection$ to execute SQL (query the title in the books table based on $isbn$) and get the first piece of data. Return the query results after being processed by jsonify.
13098,"def test_explode(conn):
	values = conn.execute(""SELECT fake_stuff FROM _fake_table"").fetchall()
	return values",使用$conn$执行SQL（查询_fake_table表中的fake_stuff）并获取所有数据。返回查询结果。,Use $conn$ to execute SQL (query fake_stuff in the  _fake_table table) and get all the data. Return the query results.
13257,"def find_drinker(engine, name):
	with engine.connect() as con:
		sql = ""SELECT drinkerID FROM drinkers WHERE name =: name""
		results = con.execute(sql,{""name"":name}).fetchall()
		if results is None:
			return None
		return dict(results)",在with语句中，使用$engine$建立连接。执行SQL语句（根据$name$选取drinkers表中的drinkerID列）并获取所有数据。如果该结果集为None则返回None，反之则以字典类型返回该结果集。,"In the with statement, make the connection using $engine$. Execute the SQL statement (select the drinkerID column in the drinkers where name is $name$) and fetch all the data. Return None if the result set is None, and return None if the result set is dictionary type."
13579,"from flask import render_template
def search(conn,field):
	if field:
		resultBooks = conn.execute(""SELECT * from books WHERE field =:field"",{""field"":field}).fetchall()
		return render_template(""search.html"", books=resultBooks)",如果$field$有值，使用$conn$执行SQL（根据$field$查询books表中的所有列），并获取所有查询结果，、返回渲染后的'search.html'，参数books为查询结果。,"If $field$ has a value, use $conn$ to execute SQL (query all columns in the books table based on $field$), get all the query results, and return the rendered 'search.html', where parameter books is the query result."
13861,"from flask import render_template
def registration(conn, username,password):
	res = conn.execute(""SELECT * FROM users WHERE username = :username AND password = :password"", {""username"": username,""password"": password})
	if res.rowcount != 0:
		return render_template('success.html', message='YES')
	else:
		return render_template('success.html', message='NO')","使用$conn$连接，通过$username$和$password$获取users表中的所有列，并获取全部数据，如果查询结果的行数不为0，渲染并返回'success.html', 其中message参数为'YES'；渲染并返回'success.html', 其中message参数为'NO'。","Use $conn$ connection, get all columns in the users table through $username$ and $password$ and get all the data. If the number of rows of the query results is not 0, render and return 'success.html', where the message parameter is 'YES'; render and return 'success.html', where the message parameter is 'NO'."
11144,"from flask import render_template
def index(conn,id):
	infor_title = conn.execute(""SELECT title FROM file WHERE id=:id"",{""id"":id}).fetchall()
	return render_template('index.html', titles=infor_title)",运用$conn$执行SQL（根据$id$查询file表中的title）并获取所有数据。渲染并返回'index.html'，其中titles参数为查询结果。,"Execute SQL with $conn$ (query title in file according to where id is $id$) and get all the data. Render and return to 'index.html', where the titles parameter is the result of the query."
11578,"def get_value(conn,Country,noc):
	output = conn.query(Country).filter(Country.noc == noc).first()
	assert len(output)!=0
	return output",通过$conn$连接，使用ORM方式执行SQL语句（根据$noc$查询$Country$表中的第一条数据），设置断言判断返回结果的长度不为0，返回查询到的数据。,"Through the $conn$ connection, use ORM method to execute the SQL statement (query the first piece of data in the $Country$ table according to $noc$), set the assertion to determine that the length of the returned result is not 0, and return the queried data."
13174,"def check_login(conn,username,password):
	results = conn.execute(""SELECT * FROM users WHERE username = :username and password=:password"", {""username"": username,""password"":password}).fetchall()
	for item in results:
		print(item)",使用$conn$执行SQL（根据$username$和$password$获取users表中的所有列）并获取所有数据，然后使用for循环打印查询结果的每一项,"Execute the SQL (get all the columns in the users where the name of user is $username$ and password is $password$) with $conn$ and get all the data, then print each item of the query results using the for loop."
11382,"def selectAllData(conn,id):
	sql = ""SELECT * FROM home_list where id={}"".format(id)
	res = conn.execute(sql)
	if res:
		return res.fetchall()",使用format字符串匹配方法设置SQL（根据$id$查询home_list表中所有列），根据$conn$执行SQL，如果查询到数据，返回获取到的所有数据。,"Use the format string matching method to set SQL (query all columns in the home_list table based on $id$), and execute SQL according to $conn$. If the data is queried, return all the obtained data."
13897,"from sqlalchemy.sql import select
def change_saldo(conn,clientes,clienteid):
	s = select(clientes.c.name).where(clientes.c.clienteid == clienteid)
	res = conn.execute(s).fetchall()
	return res",使用Python表达式的方式设置SQL语句：根据$clienteid$查询$clientes$表中的name数据，使用$conn$连接执行SQL语句获取所有数据并返回。,Use the Python expression to set up the SQL statement: Query the name data in the $clientes$ table based on $clienteid$. Use the $conn$ connection to execute the SQL statement to get all the data and return it.
14102,"from sqlalchemy import create_engine
def select_res(engine_auth,m_type):
	engine = create_engine(engine_auth)
	conn = engine.raw_connection()
	with conn.cursor() as cur:
		fetch_stmt=""select Field from table where Type=:m_type""
		res = cur.execute(fetch_stmt,{""m_type"":m_type}).fetchone()
		return res",通过$engine_auth$获取数据库引擎并建立连接。使用建立连接的对象在with语句中创建游标对象，设置SQL语句：查询table表中Type为$m_type$的Field数据，执行SQL获取第一条数据，返回所获取的数据。,"Get the database engine and establish a connection through $engine_auth$. Use the connected object to create a cursor object in the with statement, set the SQL statement: Query the Field data in the table table whose Type is $m_type$, execute SQL to get the first piece of data, and return the obtained data."
13303,"from flask import render_template
def flights(conn,id):
	flights = conn.execute(""SELECT * FROM flights WHERE id=:id"",{""id"":id}).fetchall()
	return render_template(""flights.html"", flights=flights)","使用$conn$执行SQL（根据$id$查询flights表中的所有列），并获取所有查询结果，返回渲染后的""flights.html""页面，其中flights参数赋值为查询到的数据。","Use $conn$ to execute SQL (query all columns in the flights table based on $id$), get all the query results, and return the rendered ""flights.html"" page, where the flights parameter is assigned to the queried data."
14199,"from flask import request
def search(conn,author):
	if request.method==""POST"":
		data=conn.execute(""SELECT * FROM books WHERE author=%s""%author).fetchall()
		for x in data:
			print(x)
		return data","如果request模块通过post方式发送请求，则通过$conn$执行SQL（通过$author$查询books中的所有列,使用%操作符匹配SQL字符串中的条件）并获取所有数据。for循环遍历所有获取的数据并将其打印，返回获取到的所有数据。","If the request module sends a request by post, execute SQL via $conn$ (query all columns in books by $author$ and use the % operator to match the conditions in the SQL string) and get all the data. For loop iterates through all the obtained data,  prints, and returns all the obtained data."
13687,"import pandas as pd
def before(session,BoltwoodSQL,dt):
	qr = session.query(BoltwoodSQL).filter(BoltwoodSQL.timestamp == dt)
	data = pd.DataFrame( qr.fetchall() )
	if data.empty:
		return None
	session.close()
	return data",在ORM方式下，使用$session$执行SQL（查询当timestamp为$dt$时，$BoltwoodSQL$表中的所有信息）。将执行后的所有查询结果转化为DataFrame。如果转化后数据的empty属性为True，则恶返回None。否则关闭$session$并返回处理后的数据。,"In ORM, execute SQL using $session$ (query all information in the $BoltwoodSQL$ where timestamp is $dt$). Convert all executed query results to DataFrame. If the empty attribute of the transformed data is True, return None. Otherwise, close $session$ and return the processed data."
13384,"def bookreview_func(conn,isbn):
	review_return=conn.execute(""SELECT review FROM reviewtable WHERE isbn=:isbn"",{""isbn"":isbn}).fetchall()
	if len(review_return) == 1:
		return True
	else:
		return False",通过$conn$执行SQL（根据$isbn$查询reviewtable表中review列），并获取所有查询结果，如果查询结果长度为1，返回True，否则返回False。,"Execute SQL through $conn$ (query the review column in the reviewtable table according to $isbn$) and get all the query results. If the query result length is 1, return True; otherwise, return False."
13825,"def get_value(conn,User,lastname):
	try:
		output = conn.query(User).filter(User.lastname == lastname).first()
		return output
	except Exception as e:
		print(e)",尝试性使用$conn$查询$User$表中lastname为$lastname$的第一条信息，返回查询结果。如果出现Exception，打印异常信息。,"Try to use $conn$ to query the the first piece of message with lastname as $lastname$ in the $User$ table and return the query results. If Exception occurs, print the exception message."
13297,"from sqlalchemy.sql import select
def get_source(conn, category_id, categories_table):
	try:
		sql = select([categories_table.c.name]).where(categories_table.c.categoryID == category_id)
		results = conn.execute(sql).fetchall()
		return results
	except Exception as e:
		print(e)
		return",尝试性执行如下代码：在python表达式方式下设置SQL（根据$category_id$获取$categories_table$中的name列）。使用$conn$执行SQL并获取所有数据；如果出现异常，则将输出具体异常信息后直接返回,"Try the following code: set the SQL (get the name column in $categories_table$ where the id of category is $category_id$) in a Python expression. Execute the SQL with $conn$ and get all the data. If an exception occurs, return directly after outputting the specific exception information."
11377,"from flask import render_template
def flights(conn,flight_id):
	sql = ""select * from passengers where flight_id = :flight_id""
	passenger_detail = conn.execute(sql, {""passenger_detail"": flight_id}).fetchall()
	return render_template(""flights.html"", passenger_detail=passenger_detail)","设置sql（根据$flight_id$查询passengers表中全部信息），使用$conn$执行SQL并获取所有查询结果。返回渲染后的""flights.html""，其中参数passenger_detail为查询结果","Set up sql (query all the information in the passengers table based on $flight_id$), use $conn$ to execute SQL and get all the query results. Return the rendered ""flights.html"", where the parameter passenger_detail is the query result."
11033,"def chunksize(conn,options):
	schemas = conn.execute(""SELECT schema FROM DataFrame WHERE options=:options"",{""options"":options}).fetchall()
	return [alpha[0] for alpha in schemas]",使用$conn$执行SQL（根据$options$查询DataFrame表中schema信息）并获取所有数据。将查询结果中每一项的第0个元素存入到list中并返回。,Use $conn$ to execute SQL (query the schema information in the DataFrame table based on $options$) and get all the data. Store the 0th element of each item in the query result into list and return.
14093,"def find_bar(engine,bar):
	with engine.connect() as con:
		query = ""SELECT City FROM Bars WHERE Bar = :bar""
		result = con.execute(query, {""bar"":bar}).fetchone()
		if result is None:
			return None
		return dict(result)",通过with语句根据$engine$连接数据库。设置SQL为：通过$bar$查询Bars中的City数据，执行SQL获取第一条数据，如果查询结果为空，返回None；否则返回字典形式的查询结果。,"Connect to the database according to $engine$ through the with statement. Set SQL: Query the City data in Bars through $bar$, execute SQL to get the first piece of data, and return None if the query result is empty; otherwise, return the query result in dictionary form."
11095,"def fill_username_people(conn,id):
	if id != None:
		username =conn.execute(""SELECT username FROM jam_people WHERE id=:id"",{""id"":id}).fetchall()
		if username != '':
			return username",如果$id$不为None，则使用$conn$执行SQL（根据$id$查询jam_people表中的username）并获取所有数据。如果查询结果不为空字符串，则返回查询结果。,"If $id$ is not None, use $conn$ to execute SQL (query the username in the jam_people table based on $id$) and get all the data. If the query result is not an empty string, return the query result."
11279,"def get_db(create_db_engine, db_name):
	with create_db_engine.connect() as conn:
		res=conn.execute(""select * from DATABASE where db_name=:db_name "", {""db_name"":db_name}).fetchall()
		return res",使用with语句利用$create_db_engine$连接数据库并执行SQL(根据$db_name$获取DATABASE中的所有列)并获取所有数据，最后返回查询结果,"Use the with statement to connect to the database by $create_db_engine$, execute SQL (get all the columns in DATABASE based on $db_name$), get all the data, and finally return the query result."
14070,"def main(conn): 
	flights = conn.execute(""select origin, destination, duration from flights"").fetchone()
	for flight in flights:
		print(f""{flight.origin}  to {flight.destination}  duration {flight.duration}"")
	return flights",使用$conn$连接，从flights表中查询第一条origin，destination和duration数据。for循环遍历查询结果，并以“{flight.origin} to {flight.destination} duration {flight.duration}”的形式打印查询结果，返回查询结果。,"Use the $conn$ to get that connection and query the first piece data of origin,destination and duration from the flights table. Use for loop traversal to query the results, print the query results in the form of ""{flight.origin} to {flight.destination} duration {flight.duration}"", and return the query results."
13806,"from flask import jsonify
def national_info(conn,year):
	data_dict = {}
	data16 = conn.execute(""SELECT * from Data WHERE year= :year"", {""year"": year}).fetchall()
	for data in data16:
		data_dict[data[0]] = int(data[1])
	return jsonify(data_dict)",通过$conn$连接执行SQL（通过$year$查询Data表中的所有列）并获取所有数据，对for循环中的每一项而言，将第0个元素作为key，第1个元素转化为int类型作为value存入到字典中。使用jsonify返回字典中的内容。,"Execute SQL through $conn$ connection (query all columns in the Data table through $year$) and get all thedata. For each item in the for loop, convert the 0th element to key and the 1st element to int type as value into the dictionary. Use jsonify to return the contents of the dictionary."
13180,"def getTableSize(conn, name):
	sql = ""SELECT pg_relation_size from pg where name=:name""
	result = conn.execute(sql,{""name"":name}).fetchall()
	if not result:
		return None
	return result",使用$conn$执行SQL（根据$name$获取pg表中的pg_relation_size列）并获取所有数据，如果不是查询结果则返回None，最后返回SQL语句的查询结果,"Execute the SQL (get the pg_relation_size in the pg where name is $name$) with $conn$ and get all the data, return None if the query result is false, and finally return the result of the SQL statement."
11321,"from sqlalchemy import create_engine
def getVendas(db_string,vendas):
	db = create_engine(db_string)
	ven = db.execute(""SELECT * FROM sistema where vendas = :vendas"",{""vendas"":vendas}).fetchall()
	return ven",通过$db_string$获取数据库引擎。执行SQL语句（根据$vendas$查询sistema表中所有列），并获取所有数据，将查询结果返回。,"Get the database engine through $db_string$. Execute the SQL statement (query all the columns in the sistema table according to $vendas$), get all the data, and return the query results."
13246,"from sqlalchemy.sql import select
def select_value(engine, Customer, id):
	stmt = select([Customer]).where(Customer.c.id == id)
	with engine.connect() as conn:
		res = conn.execute(stmt, id = id).first()
		return res",使用python表达式的方式设置SQL（根据$id$查询$Customer$的所有列。使用with语句通过$engine$获取数据库连接，根据连接执行SQL并获取第一条数据，最后返回查询结果。,"Use Python expressions to set the SQL (query all columns of $Customer$ where id is $id$, get the database connection with $engine$, execute the SQL based on the connection, get the first data, and return the result of the query."
13472,"def get_experience_video_id(engine, video_id):
	con = engine.connect()
	sql = ""SELECT * FROM mark WHERE id =: id""
	result = con.execute(sql,{""id"":video_id}).fetchall()
	for row in result:
		print(row)
	con.close()",利用$engine$连接数据库再执行SQL（根据id为$video_id$获取mark表中的所有列）并获取所有数据，然后使用for循环打印查询结果中的每一项，最后关闭连接,Use $engine$ to connect to the database and then execute the SQL (get all the columns in the mark table with id as $video_id$) and get all the data. Then use for loop to print each item of the query results and finally close the connection.
13273,"from sqlalchemy.sql import select
def get_source(conn, items, mid):
	sql = select([items]).where(items.c.mid == mid)
	results = conn.execute(sql).fetchall()
	conn.close()
	return results",使用python表达式的方式设置SQL：通过$mid$查询$items$中的所有列。通过$conn$执行SQL语句并获取所有数据，关闭数据库连接，返回所查到的数据,"Set the SQL using a python expression: query all the columns in $items$ with $mid$. Execute the SQL statement with $conn$ and get all the data, close the database connection, and return the data."
11129,"from flask import render_template
def db_push(conn,full_db):
	query = ""SELECT * FROM volcano_data WHERE data={}"".format(full_db)
	full_db = conn.execute(query).fetchall()
	return render_template(""raw_data.html"", data=full_db)","设置SQL语句（使用format()函数格式化字符串,通过$full_db$获取volcano_data中的所有列），使用$conn$执行SQL语句获取全部数据，渲染并返回'raw_data.html'，其中data参数为查询结果。","Set the SQL statement (use the format () function format string to get all the columns in a volcano_data by $full_db$) , execute the SQL statement with $conn$ to get all the data, render and return 'raw_data.html', where the data parameter is the result of the query."
14017,"def get_drinkers(con):
	rs = con.execute(""SELECT * FROM Drinker"").fetchall()
	return [dict(row) for row in rs]",使用$con$获取Drinker表中的所有列，获取全部数据，并将查询结果每一项转化为dict存储为list并返回。,"Use $con$ to get all the columns in the Drinker table, get all the data, convert each item of the query result to dict, store it as list, and return."
11691,"def taydenna(db,id):
	query = ""select lokaatioID from havainto where id = :id""
	testi = db.execute(query,{""id"":id}).fetchone()
	for t in testi:
		print(t)",利用$db$执行SQL（根据$id$获取havainto表中的lokaatioID列）并获取第一条数据，然后使用for循环打印查询结果的每一项,"Execute SQL with $db$ (get the lokaatioID column in the havainto table according to $id$), get the first piece of data, and then use  for loop to print each item of the query result."
14117,"def get_data(conn, m_series):
	cur = conn.cursor()
	cur.execute(""select value from userdata where series = :m_series "", {""m_series"":m_series})
	data = []
	for row in cur.fetchall():
		print(row[0])
		data.append(row[0])
	return data",通过$conn$建立游标对象，使用游标执行SQL语句：根据$m_series$查询userdata表中的value信息。使用for循环遍历所有获取的数据，打印查询结果中每一项的第0个元素，并存储到list中，将list内容返回。,"Create a cursor object with $conn$ and use the cursor to execute the SQL statement: Query the value information in the userdata table based on $m_series$. Use for loop to iterate through all the obtained data, print the 0th element of each item in the query result, store it in list and return the list content."
11525,"def select_value(engine, team):
	with engine.begin() as conn:
		res = conn.execute(""SELECT * FROM users WHERE team = :team"", {""team"": team}).fetchall()
		for each in res:
			team = each['team']
			name = each['name']
			print(team, name)",使用with语句根据$engine$的begin()方法连接数据库。执行查询语句：根据$team$获取users中的所有列，并获取所有数据。使用for循环遍历查询结果，取每一个team和name并将其打印。,"Use the with statement to connect to the database based on the begin() method of $engine$. Execute the query statement: get all columns in users based on $team$ and get all data. Use for loop iterate through the query results, taking each team and name and printing them."
11554,"def get_drinkers(engine, phone):
	with engine.connect() as con:
		rs = con.execute(""SELECT * FROM drinkers WHERE phone = :phone"", {""phone"": phone}).fetchall()
		return [dict(row) for row in rs]",通过with语句使用$engine$连接数据库。执行SQL语句：通过$phone$查询drinkers表中的所有列，并获取所有数据，将查询结果转化为dict存储为list并返回。,"Use $engine$ to connect to the database through the with statement. Execute SQL statement: query all columns in drinkers table through $phone$ and get all data. Convert query result to dict, store it as list and return it."
13031,"from sqlalchemy.sql import select
def create_user(conn,users,email,password_hash): 
	s = select(users.c.user_name).where(users.c.email == email,users.c.password_hash==password_hash)
	res = conn.execute(s)
	return res.rowcount == 1",使用python表达式方式设置SQL（根据$email$和$password_hash$查询$users$表中的user_name）。使用$conn$执行SQL。返回执行结果rowcount属性等于1的判断结果。,Use python expressions to set up SQL (query the user_name in the $users$ table based on $email$ and $password_hash$). Use $conn$ to execute SQL. Return the judgment result that the rowcount property of the execution result is equal to 1.
13435,"from sqlalchemy import create_engine
def test_dialect_init_uses_options(url, name):
	eng = create_engine(url)
	conn = eng.connect()
	query_sql = ""SELECT * FROM schools WHERE name =: name""
	schools = conn.execute(query_sql,{""name"":name}).fetchall()
	conn.close()
	return schools",使用$url$获取数据库引擎并连接数据库，然后执行SQL（根据$name$获取schools表中的所有列）并获取所有数据，再关闭连接，最后返回查询结果,"Use $url$ to get the database engine and connect to the database, then execute the SQL (get all columns in the schools table based on $name$) and get all the data. Then close the connection and finally return the query results."
13217,"from flask import request,render_template
def select_value(conn, user_id, zipcode):
	if request.method == 'GET':
		sql = ""SELECT * FROM check_in_list WHERE checker_id = :user_id AND check_zipcode = :zipcode""
		results = conn.execute(sql,{""user_id"":user_id, ""zipcode"":zipcode}).fetchall()
		return results
	else:
		return render_template(""check_in_error.html"")","如果request请求的方法为'GET'，则使用$conn$执行SQL语句（当checker_id等于$user_id$和check_zipcode等于$zipcode$时，查询check_in_list表中的所有列），并获取所有数据。返回执行SQL语句的结果。否则返回渲染后的""check_in_error.html""。","If the request method is 'GET', execute the SQL statement (query all the columns in the check_in_list table where the checker_id is $user_id$ and check_zipcode is $zipcode$) using $conn$ and get all the data. Return the result of executed SQL statement. Otherwise, return to the rendered ""check_in_error.html""."
13388,"from sqlalchemy.sql import select
def getSliverObj(conn,slivers,sliver_urn):
	s = select(slivers.c.parsed_obj).where(slivers.c.sliver_urn==sliver_urn)
	row = conn.execute(s).first()
	if row is None:
		return False
	else:
		return row","根据python表达式设置SQL：（根据$sliver_urn$查询$slivers$表中parsed_obj列）。通过$conn$执行SQL并获取第一条数据，如果查询结果为空，返回False,否则返回查询结果。","Set SQL based on the python expression (query the parsed_obj column in the $slivers$ table based on $sliver_urn$). Execute SQL through $conn$ and get the first piece of data. Return False if the query result is empty; otherwise, return the query result."
13504,"from sqlalchemy import create_engine
from flask import jsonify
def get_state(sqlite,parm):
	engine = create_engine(sqlite)
	conn = engine.connect()
	sql = ""select * from Alltypes where parm=:parm""
	data = conn.execute(sql, {""parm"":parm}).fetchall()
	conn.close()
	return jsonify(data)","通过$sqlite$获取数据库引擎并建立连接。设置SQL语句（根据$parm$查询Alltypes表中所有列），执行sql,并获取所有数据，关闭连接，将转化为json的查询结果返回。","Get the database engine and establish a connection through $sqlite$. Set up the SQL statement (query all the columns in the Alltypes table according to $parm$), execute sql, get all the data, close the connection, and return the query result converted to json."
13951,"def books_api(conn, book_id):
	reviews = conn.execute(""SELECT rating FROM reviews WHERE book_id = :book_id"", {""book_id"": book_id}).fetchall()
	review_count = len(reviews)
	if review_count != 0:
		for row in reviews:
			print(row)
	return review_count",通过$conn$连接执行SQL语句：根据$book_id$查询reviews表中的所有rating。获取查询结果的长度。如果查询结果的长度不为0，for循环遍历查询结果并打印，返回查询结果的长度。,"Execute the SQL statement through the $conn$ connection: Query all the rating in the reviews table based on the $book_id$. Get the length of the query result. If the length of the query result is not 0, use for loop to traverse the query result, print it and return the length of the query result."
13464,"import sqlalchemy
def setUp(db_uri, i_id):
	engine = sqlalchemy.create_engine(db_uri)
	conn = engine.connect()
	query_sql = ""SELECT * FROM lights WHERE i_id =: i_id""
	results = conn.execute(query_sql,{""i_id"":i_id}).fetchall()
	conn.close()
	return results",利用$db_uri$获取数据库引擎并连接数据库，然后执行SQL（根据$i_id$获取lights表中的所有列）并获取所有数据，再关闭连接，最后返回查询结果,"Use $db_uri$ to get the database engine and connect to the database, then execute SQL (get all columns in the lights table based on $i_id$) and get all the data. Then close the connection and finally return the query results."
13970,"def get_table_list_from_db(conn, table_schema):
	sql = ""SELECT table_name FROM information_schema WHERE table_schema =: table_schema""
	table_names = conn.execute(sql,{""table_schema"":table_schema}).fetchall()
	return [dict(table_name) for table_name in table_names]",设置SQL语句为：查询information_schema表中table_schema为$table_schema$的table_name，使用$conn$执行SQL获取所有数据，将查询结果每一项转化为dict存储为list并返回。,"Set the SQL statement: Query the table_name in the information_schema table with 'table_schema': $table_schema$. Use $conn$ to execute SQL to get all the data, convert each item of the query result to dict, store it as list, and return."
11640,"def deprecated(db,label):
	deps = db.execute(""SELECT a FROM anon_1 WHERE label=:label"",{""label"":label}).fetchall()
	if deps!=None:
		return deps",使用$db$执行SQL（根据$label$获取anon_1表中的a列）并获取所有数据，如果查询结果不为None，则返回查询结果,"Use $db$ to execute SQL (get 'a' column in the anon_1 table according to $label$) and get all the data. If the query result is not None, return the query result."
13902,"from sqlalchemy.sql import select
def select_file(from_connection, from_table):
	res = from_connection.execute(select([from_table])).fetchall()
	table_data = [row for row in res]
	if len(table_data):
		return table_data",通过$from_connection$使用Python表达式的方式执行SQL：获取$from_table$表中的所有数据， 将获取的数据存储为list。如果list内容的长度存在，返回list内容。,"Use $from_connection$ and the Python expression to execute SQL: Get all the data in the $from_table$ table and store the obtained data as list. If the length of list content exists, retun the list content."
11648,"from sqlalchemy.sql import select
def get_Desc(conn,Youtube,url):
	query = select(Youtube.description).where(Youtube.url == url)
	desc = conn.execute(query).fetchall()
	conn.close()
	return desc",根据python表达式的方式，利用$conn$执行SQL(获取$Youtube$表中url为$url$的description列)并获取所有数据，然后关闭$conn$连接，最后返回查询结果,"Use $conn$ to execute SQL based on the python expression (get the description column in the $Youtube$ table where url is $url$), get all the data, close the $conn$ connection, and finally return the query result."
14160,"def get_random_world_single_raw(dbraw_engine, wid):
	connection = dbraw_engine.connect()
	result = connection.execute(""SELECT * FROM world WHERE id =:wid "",{""wid"":wid}).fetchone()
	connection.close()
	return result",使用$dbraw_engine$连接数据库，执行SQL语句，其内容为查询world表中id为$wid$的所有列，并获取第一条数据，关闭数据库连接，返回获取的数据。,"Use $dbraw_engine$ to connect to the database and execute the SQL statement: Query all the columns in the world table with 'id' of $wid$, get the first piece of data, close the database connection and return the obtained data."
11506,"from flask import jsonify
def query_info(conn):
	results = conn.execute(""SELECT year_occur FROM traffic_tbl"").fetchone()
	for row in results:
		print(row)
	return jsonify(results)",使用$conn$执行SQL语句（获取traffic_tbl表中的第一条year_occur），使用for循环遍历查询结果并打印，使用jsonify返回查询结果。,Use $conn$ to execute SQL statement (get the first piece of year_occur in traffic_tbl table). Use for loop iterate the query result and print it. Use jsonify to return the query result.
13393,"from sqlalchemy.sql import select
def add_domain(conn,url_domain,udomain):
	s =select([url_domain.c.hits]).where(url_domain.c.domain == udomain)
	recs = conn.execute(s).fetchall()
	return [item for item in recs]",根据python表达式设置SQL：（根据domain为$udomain$查询$url_domain$表中hits列）。通过$conn$执行SQL并获取所有数据，使用for循环遍历每一项查询结果，并存储为list，最后返回这个list。,"Set SQL based on the python expression (query the hits column in the $url_domain$ table based on the condition that domain is $udomain$). Execute SQL with $conn$, get all the data, use for loop to traverse each query result, store it as list, and finally return the list."
13539,"import sqlalchemy
def reset_database(url,mtime):
	e = sqlalchemy.create_engine(url, echo=True)
	with e.connect() as c:
		res=c.execute('select * from DATABASE where mtime=:mtime ',{""mtime"":mtime}).fetchall()
		return res",通过$url$获取数据库引擎，echo参数为True，使用with语句建立连接。执行SQL语句（根据$mtime$查询DATABASE表中所有列），并获取所有数据，将查询结果返回。,"Get the database engine through $url$, and the echo parameter is True, use the with statement to get a connection. Execute the SQL statement (query all the columns in the DATABASE table according to $mtime$), get all the data, and return the query results."
11086,"from flask import render_template
def login(conn,username,password):
	result_u = conn.execute(""SELECT * FROM users_tl WHERE username=:u AND password=:p"",{""u"": username, ""p"": password})
	if(result_u.rowcount == 0):
		return render_template(""loginfail.html"")
	else:
		return render_template(""index.html"")","使用$conn$执行SQL（根据$username$和$password$查询users_tl表中的所有列）。如果查询结果中的行数为0，则返回渲染后的""loginfail.html""，否则返回渲染后的""index.html""。","Use $conn$ to execute SQL (query all columns in the users_tl table based on $username$ and $password$). If the number of rows in the query result is 0, return the rendered ""loginfail.html"". Otherwise, return the rendered ""index.html""."
13493,"import sqlalchemy
def test_csv_mysql_load(url, c):
	engine = sqlalchemy.create_engine(url)
	conn = engine.raw_connection()
	cursor = conn.cursor()
	sql = ""SELECT a FROM travisci_mysql WHERE c =: c""
	res = cursor.execute(sql,{""c"":c}).fetchall()
	print(res)",使用$url$获取数据库因并使用raw_connection方法连接数据并通过游标方法执行SQL（根据$c$获取travisci_mysql表中的a列）并获取所有数据，最后打印查询结果,Use $url$ to get the database and use raw_connection method to connect to the data and execute SQL through cursor method (get column 'a' in the travisci_mysql table based on $c$) and get all the data. Finally print the query results.
13588,"from flask import render_template
def register(conn,username):
	check = conn.execute(""SELECT ball FROM users WHERE username=:username"", {""username"":username}).fetchall()
	if check==[]:
		return render_template(""result.html"")
	else:
		return render_template(""result.html"",result='Error!')","利用$conn$执行SQL（根据$username$查询users表中ball列），并获取所有查询结果，如果结果为空，返回渲染后的""result.html""页面，否则返回渲染后的""result.html""页面，其中参数result为'Error!'。","Use $conn$ to execute SQL (query the ball column in the users table according to $username$) and get all the query results. If the result is empty, return the rendered ""result.html"" page; otherwise, return the rendered ""result.html"" page, where the parameter result is 'Error!'."
13117,"def find_bar_helper(conn,b):
	rs = conn.execute(""SELECT Bar FROM Bar_table WHERE Bar=:b"", {""b"":b}).fetchall()
	if rs is None:
		return None
	return [dict(row) for row in rs]",使用$conn$执行SQL（根据Bar为$b$获取Bar_table表中的Bar列）并获取所有数据，如果查询结果是None，则返回None，最后使用for循环对查询结果的每一项转化为字典类型并返回字典内容,"Execute SQL with $conn$ (get the Bar column in the Bar_table where Bar is $b$) and get all the data, return None if the query result is None, and finally convert each item of the query result to a dictionary type using a for loop and return the dictionary content."
13660,"def flights(db, flight_id):
	fs = db.execute(""SELECT * FROM flights WHERE flight_id=:flight_id"",{""flight_id"":flight_id}).fetchall()
	return [dict(f) for f in fs]",使用$db$执行SQL（根据$flight_id$查询flights表中的所有列）并获取所有数据。将查询结果中每一项转化为dict并返回。,Execute the SQL (based on all columns in the flights where flight_id is $flight_id$) using $db$ and get all the data. Convert each item in the query result to dict and return.
11053,"def calibration_core(conn,calibration_value):
	timestamp=conn.execute(""SELECT timestamp_id FROM calibration_original WHERE calibration_value=:calibration_value"",{""calibration_value"":calibration_value}).fetchall()
	if timestamp == None:
		print(""Error"")
	else:
		return timestamp","使用$conn$执行SQL（根据$calibration_value$查询calibration_original表中的timestamp_id）并获取所有数据。如果查询结果为None，则打印""Error""信息，否则返回查询结果。","Use $conn$ to execute SQL (query the timestamp_id in the calibration_original table based on $calibration_value$) and get all the data. If the query result is None, the ""Error"" information is printed. Otherwise, return the query result."
14217,"def SearchBooks(conn):
	results = conn.execute(""SELECT email,password FROM users"").fetchall()
	for items in results:
		print(items)
	return results",通过$conn$执行SQL语句：从users表中查询所有的email和password。for循环遍历查询结果并打印，最后返回所有的查询结果。,"Execute the SQL statement through $conn$: Query all email and password from the users table. Use for loop traversal to query the results and print them, and finally return all the query results."
14266,"def main(connection):
	flights = connection.execute(""SELECT id, origin, destination, duration FROM flights"").fetchall()
	if len(flights) == 0:
		return None
	return flights","使用$connection$执行SQL语句（查询flights表中所有的id, origin, destination, duration），如果查询结果的长度为0，返回None；否则返回查询结果。","Use $connection$ to execute the SQL statement (query all id, origin, destination, duration in the flights table), return None if the length of the query result is 0; otherwise, return the query result."
13187,"def insert(con, tableParam):
	with con.connect() as conn:
		insert_statement = ""select * from tableParam where tableParam=:tableParam""
		res=conn.execute(insert_statement,{""tableParam"":tableParam}).fetchone()
		return res",使用with语句利用$con$连接数据库并执行SQL（根据$tableParam$获取tableParam表中的所有列）并获取第一条数据，最后返回查询结果,The with statement uses $con$ to connect to the database and execute the SQL (get all the columns in a tableParam where tableParam is $tableParam$) to get the first data and return the result of the query.
11436,"def getuser(conn, username):
	sql = ""SELECT password FROM users WHERE username =: username""
	results = conn.execute(sql,{""username"":username}).fetchall()
	passwords = []
	for i in results:
		passwords.append(i)
	return passwords","设置sql（根据$username$查询users表中password列）,使用$conn$执行SQL并获取所有查询结果，用for循环遍历获取的所有查询结果，将每条数据插入一个list中，并返回这个list。","Set up SQL (query the password column in the users table based on $username$), execute SQL with $conn$ and get all the query results. Usw for loop to iterate through all the query results, insert each piece of data into a list, and return the list."
11454,"def select_UserSaldo(conn, customerid):
	sql = ""SELECT income FROM customers WHERE customerid =""+customerid
	results = conn.execute(sql,{""customerid"":customerid}).fetchall()
	incomes = []
	for i in results:
		incomes.append(i)
	return incomes",利用字符串拼接设置SQL（根据$customerid$查询customers表中income列），根据$conn$执行SQL并获取所有查询结果，用for循环遍历获取的所有查询结果，将每条数据插入一个list中，并返回这个list。,"Use string splicing to set up SQL (query the income column in the customers table based on $customerid$), execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all the obtained query results, insert each piece of data into a list, and return the list."
13245,"def select_value(conn, QuestionAnswer, question):
	res=[]
	clause = QuestionAnswer.select().where(QuestionAnswer.c.question == question).fetchall()
	for row in conn.execute(clause):
		res.append(row['answer'])
	return res",使用python表达式的方式设置SQL（根据$question$查询$QuestionAnswer$的所有列）并获取所有数据。在循环条件中使用$conn$执行SQL语句，将每一项数据的'anwser'储存到list中。最后返回生成的结果。,"Set up the SQL (query all columns of $QuestionAnswer$ where question is $question$) using a Python expression and fetch all the data. SQL statements are executed with $conn$ in looping conditions, and the 'anwser' for each item of data is stored in a list. Finally, the generated result is returned."
14101,"from flask import render_template
def books(conn):
	books = conn.execute(""SELECT * FROM books"").fetchall()
	return render_template(""books.html"", books=books)","使用$conn$查询books表中的所有列，并获取所有数据，渲染并返回""books.html""，其中books参数为查询结果。","Use $conn$ to query all the columns in the books table, get all the data, render and return ""books.html"", where the books parameter is the query result."
13075,"def getLastOrder(conn,stopid):
	results = conn.execute(""SELECT * FROM realtime_bus WHERE stopid=%s""%stopid)
	return results.fetchall()",使用$conn$执行SQL（在%操作符匹配字符串条件下，根据$stopid$查询realtime_bus中的所有列）。返回执行后查询所有数据的结果。,Use $conn$ to execute SQL (query all columns in realtime_bus based on $stopid$ under the condition that the% operator matches the string). Return the results of querying all data after execution.
13631,"def find_pays(conn, t, drinker, bar):
	sql = ""SELECT * FROM Pays WHERE TransactionId=:t AND Name=:d AND Bar=:b""
	rs = conn.execute(sql,{""t"":t,""d"":drinker,""b"":bar}).fetchall()
	if rs is None:
		return None
	return [dict(i) for i in rs]","设置SQL（查询当TransactionId为$t$, Name为$drinker$并且Bar为$bar$时Pays表中的所有列）。使用$conn$执行SQL并获取所有数据。如果查询结果为None则返回None。否则将查询结果中每一项转化为dict类型并返回。","Set SQL (query all columns in the Pays table where TransactionId is $t$, Name is $drinker$, and Bar is $bar$). Execute SQL with $conn$ and get all the data. Return None if the query result is None. Otherwise, convert each item in the query result to type dict and return."
11150,"from flask import render_template
def articles(mysql,articles):
	cur = mysql.connection.cursor()
	information = cur.execute(""SELECT * FROM call_list WHERE articles=:articles"",{""articles"":articles}).fetchall()
	if information > 0:
		return render_template('articles.html', articles=information)
	else: 
		msg = 'No Articles Found'
		return render_template('articles.html', msg=msg)",使用$mysql$连接数据库，通过cursor()方法创建游标对象。执行SQL（根据$articles$查询call_list表中的所有列）并获取所有数据。如果查询结果大于0，则渲染并返回'articles.html'，其中articles参数为查询结果。否则，渲染并返回'articles.html'，其中msg内容是'No Articles Found'。,"Connect to the database using $mysql$ and create the cursor object using the cursor () method. Execute the SQL (query all columns in the call_list table where articles is $articles$) and get all the data. If the query result is greater than 0, then render and return 'articles.html', where the articles parameter is the result of the query. Otherwise, render and return 'articles.html', where the msg parameter with content 'No Articles Found'."
11665,"def get_table(cursor,id):
	cursor.execute(""SELECT * FROM tbl WHERE id=:id"",{""id"":id})
	ret = []
	async for i in cursor:
		ret.append(i)
	return ret",使用$cursor$执行SQL（根据$id$获取tbl表中的所有列），异步的使用for循环对查询结果的每一项转化为list类型，最后返回查询结果,"Use $cursor$ to execute SQL (get all the columns in the tbl table according to $id$), asynchronously use for loop to convert each item of the query result to a list type, and finally return the query result."
13071,"def test_pool(conn):
	async with conn.cursor() as cur:
		cur.execute(""SELECT * FROM tbl"").fetchall()
		ret = []
		async for i in cur:
			ret.append(i)
		return ret",异步情况下，在with语句中使用$conn$获取连接。使用连接执行SQL（查询tbl中的所有列）并获取所有数据。使用for循环将查询数据存入list中并返回。,"In the case of async, use $conn$ in the with statement to get the connection. Use the connection to execute the SQL (query all columns in the tbl) and get all the data. Use for loop to store the query data in list and return it."
13609,"def selectQuestion(conn,question):
	sql = ""select bot_speak from Table where question = :question""
	speak = conn.execute(sql,{""question0"":question}).fetchone()
	return speak",设置SQL：根据$question$查询Table中的bot_speak信息。使用$conn$执行SQL并获取第一条数据。最后返回查询结果。,"Set SQL: query the bot_speak information in the 'Table' where question is $question$. Execute SQL with $conn$ and get the first data. Finally, return the query results."
11518,"def tokenInitTx(conn, bid):
	resultSet = conn.execute(""SELECT element FROM tokens WHERE bid = :bid"", {""bid"": bid}).fetchone()
	for r in resultSet:
		return r[0]",使用$conn$连接执行查询语句：通过$bid$查询tokens表的第一条element，使用for循环遍历查询结果，返回查询结果的第0个元素。,"Use the $conn$ connection to execute the query statement : Query the first piece of element in the tokens table based on $bid$, use for loop iterate through the query results, and return the 0th element of the query results."
13706,"from flask import jsonify
def flight_api(conn,isbn):
	book = conn.execute(""SELECT * FROM books WHERE isbn = :isbn"", {""isbn"": isbn}).fetchone()
	if book is None:
		return jsonify({""error"": ""book not found""})
	return jsonify({""title"": book.title,""author"": book.author,""year"": book.year})","使用$conn$执行SQL（根据$isbn$查询books表中的所有列）并获取第一条数据。如果查询结果为None，则使用jsonify方法返回{""error"": ""book not found""}。否则将查询结果中的title，author和year存入字典相应关键字对应的值中。最后返回序列化后的字典。","Use $conn$ to execute SQL (query all columns in the books table based on $isbn$) and get the first piece of data. If the query result is None, use the jsonify method to return {""error"": ""book not found""}. Otherwise, store the title, author and year in the query results in the values corresponding to the corresponding keywords in the dictionary. Finally, return the serialized dictionary."
11305,"def test_contains_doesnt_compile(conn,column):
	row = conn.execute(""SELECT * FROM Column where column = :column"", {""column"": column}).fetchone()
	return row",使用$conn$执行SQL（根据$column$查询Column表中的第一行数据），并将数据返回。,Use $conn$ to execute SQL (query the first row of data in the Column table based on $column$) and return the data.
13320,"from sqlalchemy import create_engine
def manual_test(SQLALCHEMY_TEST_DATABASE_URI,FOREIGN_KEY):
	engine = create_engine(SQLALCHEMY_TEST_DATABASE_URI)
	values = engine.execute(""SELECT * FROM users WHERE FOREIGN_KEY=:FOREIGN_KEY"",{""FOREIGN_KEY"":FOREIGN_KEY}).fetchall()
	return values",通过$SQLALCHEMY_TEST_DATABASE_URI$获取数据库引擎并建立连接。执行SQL语句（根据$FOREIGN_KEY$查询users表中所有列），并获取所有数据，将查询结果返回。,"Get the database engine and establish a connection through $SQLALCHEMY_TEST_DATABASE_URI$. Execute the SQL statement (query all the columns in the users table according to $FOREIGN_KEY$), get all the data, and return the query results."
13674,"from flask import jsonify
def get(connection, user, pwd):
	cursor = connection.cursor()
	result = cursor.execute(""SELECT * FROM pillar WHERE user=:user AND pwd=:pwd"",{""user"":user,""pwd"":pwd}).fetchall()
	cursor.close()
	connection.close()
	return jsonify(result)",使用$connection$获取游标，并利用游标执行SQL（根据$user$和$pwd$查询pillar表中的所有列）并获取所有数据。关闭游标和连接，并使用序列化方法返回查询结果。,"Get the cursor using $connection$, and use the cursor to execute SQL (query all the columns in pillar where user is $user$ and pwd is $pwd$) and get all the data. Close the cursor and connection and return the result of the query using a serialization method."
13770,"def drop_db(db_engine, db_name):
	with db_engine.acquire() as conn:
		assy = conn.execute(""SELECT * FROM DATABASE WHERE db_name = :db_name "", {""db_name"": db_name}).fetchone()
		return assy",使用with语句根据$db_engine$连接数据库。执行SQL（根据$db_name$查询DATABASE表中所有列），并获取第一条数据，返回查询结果。,"Use the with statement to connect the database according to $db_engine$. Execute SQL (query all columns in the DATABASE table based on $db_name$), get the first piece of data, and return the query result."
11372,"def supports_transactions(conn,session):
	qry = ""select COUNT from ROLLBACK_TEST where session = :session""
	count = conn.execute(qry, {""session"": session}).fetchone()
	return count == 0",设置sql（根据$session$查询ROLLBACK_TEST表中所有列）使用$conn$执行SQL并获取第一行数据，并返回查询结果是否为0的判断。,"Set sql (query all columns in the ROLLBACK_TEST table according to $session$), use $conn$ to execute SQL and get the first row of data, and return the judgment of whether the query result is 0 or not."
13198,"from flask import render_template
def courses(conn,name):
	university = conn.execute(""SELECT hair FROM universities WHERE name=:name"", {'name':name}).fetchone()
	print(university)
	return render_template('courses.html', university=university)",使用$conn$执行SQL（根据$name$获取universities表中的hair列）并获取第一条数据，然后打印查询结果，最后返回渲染后的'courses.html'，其中university参数为查询结果,"Execute SQL (get the hair column in the universities where name is $name$) with $conn$, get the first data, then print the query results and return the rendered 'courses.html', where the university parameter is the result of the query."
13611,"def searchval(db,value):
	query = ""select * from Table where values = :value""
	result = db.execute(query,{""value"":value}).fetchall()
	for entry in result:
		print(entry)",设置SQL：当values为$value$的时候，查询Table中的所有列。使用$db$执行SQL并获取所有数据。使用for循环打印查询结果中的每一项。,"Set SQL: when values are $value$, query all the columns in the Table. Execute the SQL using $db$ and get all the data. Print each item in the query result using a for loop."
13410,"from sqlalchemy.sql import select
def get_source(conn, table_gi_taxid_nuc, gi):
	try:
		s = select([table_gi_taxid_nuc.c.tax_id]).where(table_gi_taxid_nuc.c.gi == gi)
		results = conn.execute(s).fetchall()
		res=[]
		for taxid in results:
			res.append(taxid)
		return res
	finally:
		conn.close()",尝试根据python表达式的方式，使用$conn$执行SQL（获取$table_gi_taxid_nuc$表中的gi为$gi$的tax_id列）并获取所有数据，再使用for循环对查询结果的每一项存储为list，再返回list内容，最终确保$conn$连接关闭,"Try to use $conn$ to execute SQL based on the Python expression (get the tax_id column in the $table_gi_taxid_nuc$ table with gi as $gi$) and get all the data, then use for loop to store each item of the query result as list, return the list contents, and finally make sure the $conn$ connection is closed"
13451,"from sqlalchemy.sql import select
def core_query_data(engine, table, begin_timestamp, end_timestamp):
	conn = engine.connect()
	rows = select([table]).where(table.c.timestamp.between(begin_timestamp, end_timestamp)).fetchall()
	res=[]
	for row in rows:
		res.append(row)
	conn.close()
	return res",使用$engine$连接数据，然后根据python表达式的方式执行SQL（获取$table$表中timestamp在$begin_timestamp$和$end_timestamp$之间的所有列）并获取所有数据，再使用for循环对查询结果的每一项存储为list，进一步关闭连接，最后返回list内容,"Use $engine$ to connect to the data, then execute the SQL based on the Python expression (get all the columns in the $table$ table with timestamp between $begin_timestamp$ and $end_timestamp$) and get all the data. Use for loop to store each item of the query results as list. Further close the connection and finally return the contents of the list."
13796,"def main(conn,origin):
	flights = conn.execute(""SELECT destination FROM flights where origin = :origin"",{""origin"":origin}).fetchall()
	flight_list = []
	for i in flights:
		flight_list.append(i[0])
	return flight_list",利用$conn$执行SQL（根据$origin$查询flights表中destination列），并获取所有数据，使用for循环遍历查询结果，将每一条的第0个元素以list存储，并返回这个list。,"Execute SQL with $conn$ (query the destination column in the flights table according to $origin$), get all the data, use for loop to traverse the query results, store the 0th element of each article in list, and return the list."
13882,"import sqlalchemy
def tearDown(db_uri, name):
	engine=sqlalchemy.create_engine(db_uri)
	conn= engine.connect()
	query = ""SELECT * FROM DATABASE WHERE name = :name""
	res = conn.execute(query, {""name"": name}).fetchall()
	conn.close()
	print(res)",通过$db_uri$获取数据库引擎并建立连接。设置SQL语句为：根据$name$查询DATABASE表中的所有列，执行SQL语句获取全部数据，确保$conn$关闭，打印所有的查询结果。,"Get the database engine and establish the connection through $db_uri$. Set the SQL statement to: Query all columns in the DATABASE table based on $name$, execute the SQL statement to get all the data. Make sure $conn$ is closed and print all the query results."
13852,"from flask import render_template, request
def review(conn, id):
	if request.method == ""POST"":
		check_usr_review = conn.execute(""SELECT * FROM books_review WHERE id = :id"", {""id"": id}).fetchall()
		if check_usr_review is not None:
			return check_usr_review
	else:
		return render_template(""book.html"")","若request模块发送请求的方式为post，则使用$conn$连接执行SQL：根据$id$获取$books_review$中的所有列，并获取全部数据。如果查询结果不为空，返回查询结果；否则，渲染并返回""book.html""。","If the request module sends the request as post, use the $conn$ connection to execute the SQL: Get all the columns in $books_review$ based on $id$ and get all the data. If the query result is not empty, return the query results; otherwise, render and return ""book.html""."
11186,"from sqlalchemy.sql import select
def arePart(conn,groupType,value):
	s = select(groupType).where(groupType.c.value ==value)
	groupl = conn.execute(s).fetchall()
	for machine, group in groupl:
		print(machine, group)",使用Python表达式的方式设置SQL语句为：查询$groupType$中value为$value$的全部数据，通过$conn$连接执行查询语句。使用for循环遍历查询结果，打印查询结果中的machine和group信息。,"Set the SQL statement to: query all data where value is $value$ in $groupType$, use a Python expression, and execute the query statement over a $conn$ connection. Use the for loop to traverse the query results, print machine and group information in the query results."
14025,"def handler(conn):
	cursor = conn.cursor()
	res = cursor.execute(""SELECT * FROM wemoveUser"").fetchall()
	cursor.close()
	conn.close()
	return res",通过$conn$创建游标，使用游标执行SQL语句：从wemoveUser表中获取所有列，并获取全部数据。确保游标和$conn$关闭，返回所有的查询结果。,Create cursors with $conn$ and use cursors to execute SQL statements: Get all the columns from the wemoveUser table and get all the data. Make sure the cursor and $conn$ are closed and return all query result.
13580,"def inventoryExists(session, machine, uuid):
	result = session.query(machine.c.Machine).filter(machine.c.id == uuid).all()
	session.close()
	if result and len(result) == 1:
		return True
	return False",根据python表达式设置SQL：（根据id为$uuid$查询$machine$表中Machine列）。通过$session$执行SQL并获取所有数据，关闭连接，如果有结果并且长度为1，返回True，否则返回False。,"Set SQL based on the python expression (query the Machine column in the $machine$ table whose id is $uuid$). Execute SQL through $session$, get all the data and close the connection. Return True, if there is a result and the length is 1; otherwise, return False."
13590,"def book(conn,id):
	try:
		res=conn.execute(""SELECT day FROM flights WHERE id = :id"", {""id"": id}).fetchall()
		return res
	except Exception as e:
		print(e)",尝试使用$conn$执行SQL（根据$id$查询flights表中day列），并获取所有数据，返回查询结果。如果执行时出现Exception异常，则打印这个异常。,"Try to use $conn$ to execute SQL (query the day column in the flights table based on $id$), get all the data, and return the query results. If an Exception occurs during execution, the exception is printed."
14283,"def getURL(conn):
	s= ""SELECT * FROM url_list ""
	ret = conn.execute(s).fetchone()
	if(ret is None):
		return -1 
	return ret",设置SQL语句为，从url_list表中查询所有列，使用$conn$执行SQL获取第一条数据。如果执行结果为空，返回-1；否则返回执行结果。,"Set the SQL statement and the content is as follows: Query all columns from the url_list table and use $conn$ to execute SQL to get the first piece of data. Return -1 if the execution result is empty; otherwise, return the execution result."
14137,"def getrec(session, flask_env):
	res = session.execute(""select OAuth from test_factory where flask_env=:flask_env"",{""flask_env"":flask_env}).fetchall()
	session.close()
	return res",通过$session$连接执行SQL语句：根据$flask_env$查询test_factory表中的全部OAuth，关闭$session$连接，返回所有的查询结果。,"Execute SQL statement via $session$ connection: Query all OAuth in test_factory table based on $flask_env$, close $session$ connection and return all query results."
13059,"from sqlalchemy.sql import select
def user(engine,users,uID):
	with engine.acquire() as conn:
		s = select(users.c.name).where(users.c.id == uID)
		old_rec = conn.execute(s).fetchone()
		return old_rec",在with语句中使用$engine$的acquire方法获取连接。使用python表达式方式设置SQL（查询当id为$uID$时，$users$表中的name信息）。使用连接执行SQL并在获取第一条数据后返回。,Use the acquire method of $engine$ in the with statement to get the connection. Use python expressions to set SQL (query the name information in the $users$ table when id is $uID$). Use the connection to execute the SQL and return after getting the first piece of data.
14108,"from sqlalchemy.sql import select
def get_data(engine,bm):
	conn = engine.connect()
	query = select([bm])
	result = conn.execute(query).fetchall()
	if result: 
		return result[-1]
	else: 
		return 0",通过$engine$连接数据库，使用python表达式的方式设置SQL语句：查询$bm$中的数据，执行SQL获取全部数据。如果查询结果存在，则返回查询结果的最后一个元素；否则返回0.,"Connect to the database through $engine$ and use the Python expression to set up the SQL statement: Query the data in $bm$ and execute SQL to get all the data. If the query resulst exist, return the last element of the query results; otherwise, return 0."
13276,"def search(conn):
	results = conn.execute(""SELECT * FROM Restaurant"").fetchall()
	conn.close()
	return results",使用$conn$执行SQL语句（查询Restaurant中的所有列）并在获取所有数据后返回。关闭$conn$，返回执行SQL语句的结果。,Execute the SQL statement (query all the columns in the Restaurant) with $conn$ and return after getting all the data. Close $conn$ and return the result of executing the SQL statement.
13396,"def get_common_words(conn,id):
	descriptions=conn.execute(""SELECT description FROM table WHERE id=:id"",{""id"":id}).fetchall()
	return [dict(description) for description in descriptions]","通过$conn$执行SQL（根据$id$查询table表中description列），并获取所有数据，使用for循环将查询结果的每一条转化为dict,并以list存储，返回这个list。","Execute SQL through $conn$ (query the description column in the 'table' table according to $id$), get all the data, use for loop to convert each item of the query result into dict, store it into list, and return the list."
11219,"import sqlalchemy
from sqlalchemy import create_engine
def stuff(Person,name, url):
	e = create_engine(url)
	sess = sqlalchemy.orm.session.Session(bind=e, autocommit=True)
	p = sess.query(Person).filter(Person.name==name).first()
	return p",使用ORM的方式，利用$url$获取获取数据库引擎，进一步获取Session对象并设置autocommit参数为True。执行SQL（根据$name$查询$Person$表中内容）并获取第一列数据，最后将执行语句的结果返回,"Use $url$ to get the database engine by the way of ORM, further get the Session object and set the autocommit parameter to True. Execute the SQL (query the $Person$ table based on $name$), get the first column of data, and finally return the result of the execution statement."
13826,"from flask import render_template, request
def marketplace(conn, status):
	cursor = conn.cursor()
	if request.method == 'POST':
		query = ""SELECT * FROM services WHERE status =: status""
		res = cursor.execute(query, {""status"": status}).fetchall()
		cursor.close()
		return render_template(""marketplace.html"", res=res)","使用$conn$调用cursor()方法创建游标。如果request模块发送请求的方式为post，则设置SQL（通过$status$查询services中的所有列），执行SQL语句获取所有数据，关闭游标，渲染并返回""marketplace.html""，其中res参数为查询结果。","Use $conn$ to create the cursor by the cursor() method. If the request module sends the request as post, set the SQL (query all columns in services through $status$), execute the SQL statement to get all the data. Close the cursor, render and return ""marketplace.html"", where the res parameter is the result of the query."
13930,"def flight(conn, flight_id):
	passengers_table = conn.execute(""SELECT name FROM passengers WHERE flight_id = :flight_id"",{""flight_id"":flight_id}).fetchall()
	print(passengers_table)
	return [rs for rs in passengers_table]",使用$conn$连接执行SQL语句：查询passengers表中flight_id为$flight_id$的所有name，打印查询结果，将查询结果每一项元素存储为list并返回。,"Execute the SQL statement with the $conn$ connection: Query all the name column in the passengers table where flight_id is $flight_id$, print the query results, store each element of the query results as list and return."
13449,"def test_core_fetchmany_w_streaming(engine, id):
	with engine.connect() as conn:
		sql = ""SELECT description FROM Customer WHERE id =: id""
		results = conn.execute(sql,{""id"":id}).fetchall()
		return results",使用with语句利用$engine$连接数据库并执行SQL（根据$id$获取Customer表中的description列）并获取所有数据，最后返回查询结果,Use the with statement to connect to the database through $engine$ and execute the SQL (get the description column in the Customer table based on $id$) and get all the data. Finally return the query results.
13792,"def test_rollback_deadlock(db,user_id,name):
	conn1 = db.connect()
	sql = ""SELECT * FROM deadlock_users WHERE user_id = :user_id and name = :name""
	uesrs = conn1.execute(sql, {""user_id"": user_id,""name"":name}).fetchall()
	conn1.close()
	return uesrs",使用$db$连接数据库，设置SQL（根据$user_id$和$name$查询deadlock_users表中所有列），执行SQL并获取所有数据，关闭连接，并将数据返回。,"Connect the database with $db$, set up SQL (query all columns in the deadlock_users table based on $user_id$ and $name$), execute SQL, get all the data, close the connection, and return the data."
11661,"def find_nameNum(db,name):
	result = db.execute(""select count(Name) from tracks where name=name"",{""name"":name}).fetchall()
	for i in result:
		print(i)",使用$db$执行SQL（根据$name$获取tracks表中的被计数方法处理过的Name列）并获取所有数据，然后使用for循环打印查询结果中的每一项,"Use $db$ to execute SQL (get the Name column processed by the counting method in the tracks table according to $name$), get all the data, and then use for loop to print each item in the query result."
14130,"def connect_table(engine):
	with engine.connect() as conn:
		try:
			result = conn.execute(""select * from m_table"").fetchall()
			for item in result:
				print(item)
		except Exception as excep:
			print(excep)",在with语句中通过$engine$连接数据库，尝试性查询m_table中的全部列，并获取所有数据，for循环遍历查询到的信息并将其打印。若出现Exception，则打印异常信息。,"Connect to the database through $engine$ in the with statement, try to query all the columns in m_table and get all the data. For loop iterates through the queried information and prints. If an Exception occurs, print the exception message."
13936,"from flask import render_template
def location(conn, zipcode):
	query_results = conn.execute(""SELECT * FROM zips where zipcode=:zipcode"", {""zipcode"": zipcode}).fetchall()
	results = []
	for row in query_results:
		results.append(row)
	results = results[0]
	return render_template(""locations.html"", results=results)","通过$conn$连接执行SQL：根据$zipcode$查询zips中的所有列，并获取全部数据。使用for循环将查询结果中的每一项元素都存储到list中，取出list内容的第0个元素，渲染并返回""locations.html""，其中results参数为list内容的第0个元素。","Execute SQL through the $conn$ connection: Query all the columns in the zips table based on the $zipcode$ and get all the data. Use for loop to store each element in the query result into list, take out the 0th element of the list content, render and return ""locations.html"", where the results parameter is the 0th element of the list content."
11573,"from flask import render_template
def book_info(conn, bk_id):
	book = conn.execute(""SELECT name FROM books WHERE bk_id = :bk_id"", {""bk_id"": bk_id}).fetchone()
	if book == None:
		return render_template(""error.html"", message=""No such book."")
	return render_template(""book_info.html"", book=book)","使用$conn$执行SQL：根据$bk_id$查询books表中的第一个name。如果查询结果为空，渲染并返回""error.html""，其中message参数为""No such book.""；否则渲染并返回""book_info.html""，其中book参数为查询结果","Use $conn$ to execute SQL: Query the first 'name' in the books table based on $bk_id$. If the query result is empty, render and return ""error.html"", where the message parameter is ""No such book.""; otherwise, render and return ""book_info.html"", where the book parameter is the query result."
11116,"from flask import render_template
def userreview(conn,isbn):
	query = conn.execute(""SELECT ratings FROM reviewtable WHERE isbn=:isbn"",{""isbn"":isbn})
	count =query.rowcount
	if count!=0:
		review = query.fetchall()
		return render_template(""review.html"", review=review)","使用$conn$连接执行SQL（通过$isbn$查询reviewtable表中的ratings数据）并获取数据的行数量。如果获取到的数据行数量不为0，则查询所有数据并返回渲染后的""review.html""，其中review参数为查询结果。","Execute SQL (query the ratings data in the reviewtable with $isbn$) using the $conn$ connection and get the number of rows of data. If the number of rows obtained is not 0, all data is queried and the rendered ""review.html"" is returned with the review parameter as the result of the query."
13212,"def get_customer(engine):
	with engine.connect() as conn:
		result = conn.execute(""SELECT * FROM Customer"").fetchall()
		if not result:
			return False
		else:
			return True",使用with语句根据$engine$连接数据库。使用数据库连接执行SQL语句（查询Customer表中的所有列）并获取所有数据。如果未获取到数据，则返回False。否则返回True。,"Use the with statement to connect to the database where the engine is $engine$. Execute the SQL statement (query all columns in the Customer) using the database connection and get all the data. If no data is obtained, False is returned, otherwise return True ."
13697,"def confirmed(db, valor_total, id_user):
	sql = ""select * from factura where total=:total and id_user:=id_user""
	datas = db.execute(sql,{""total"":valor_total,""id_user"":id_user}).fetchall()
	return datas",设置SQL：根据$valor_total$和$id_user$查询factura表中的所有列。使用$db$执行SQL并获取所有查询数据。最后返回查询结果。,"Set SQL: query all columns in the factura where total is $valor_total$ and the id of user is $id_user$. Execute the SQL using $db$ and get all the query data. Finally, return the query results."
11543,"def getOrderItems(conn, orderId):
	execStr = ""SELECT * FROM orderItem WHERE orderId = %s""%orderId
	return conn.execute(execStr).fetchall()",设置SQL语句为：根据$orderId$获取orderItem中的所有列，使用%操作符匹配SQL字符串中的条件，使用$conn$连接执行SQL获取所有数据并返回查询结果。,"Set the SQL statement to: Get all the columns in orderItem based on $orderId$, match the conditions in the SQL string using the % operator, use the $conn$ connection to execute the SQL to get all the data and return the query results."
11139,"def set_dish_price_by_dish_id(conn,DISH_ID):
	try:
		gui = conn.execute(""SELECT DISH_PRICE FROM dish WHERE DISH_ID=:DISH_ID"",{""DISH_ID"":DISH_ID}).fetchall()
		return gui
	except:
		print('fail')",尝试性使用$conn$查询dish表中DISH_ID为$DISH_ID$的所有DISH_PRICE，返回所有的查询结果。如果出现异常，则打印'fail'。,"Try to use $conn$ to query any DISH_PRICE in the dish where the ID of DISH is $DISH_ID$, and return all results. If an exception occurs, print 'fail'."
13924,"from sqlalchemy.sql import select
def get_regression(engine, regressions, regression_id):
	with engine.connect() as connection:
		sql = select([regressions]).where(regressions.c.regression_id == regression_id)
		vs = connection.execute(sql).fetchall()
		if vs:
			return vs[0]
		else:
			return None",使用with语句根据$engine$连接数据库。使用Python表达式的方式设置SQL语句（根据$regression_id$查询$regressions$表中的数据），执行SQL获取所有数据。如果执行结果存在，则返回执行结果的第0个元素，否则返回None。,"Use the with statement to connect the database according to $engine$. Use the Python expression to set the SQL statement (query the data in the $regressions$ table according to $regression_id$), execute SQL and get all the data. If the execution result exists, return the 0th element of the execution result; otherwise, return None."
11458,"from sqlalchemy.sql import select
def get_source(conn, users, name):
	sql = select([users]).where(users.c.name == name)
	result = conn.execute(sql).fetchall()
	for row in result:
		print(dict(row))
	return ""b""","根据python表达式设置SQL：（根据$name$查询$users$表中所有列）。通过$conn$执行SQL并获取所有数据，使用for循环将查询结果的每一条转化为dict并打印。返回""b""。","Set SQL based on the Python expression: (query all columns in $users$ table based on $name$). Execute SQL with $conn$ and get all the data, use for loop to convert each item of query result to dict, print and return ""b""."
11091,"def test_empty_output(conn,hash_cohort):
	count_t=conn.execute(""SELECT count(*) FROM events WHERE table_name=:hash_cohort"",{""hash_cohort"":hash_cohort}).first()
	assert len(count_t)==1
	return count_t",使用$conn$执行SQL（当table_name为$hash_cohort$的时候，查询events表中数据的数量）并获取去第一条数据。设置断言判断查询结果数量为1。最后返回数据。,"Use $conn$ to execute SQL (query the amount of data in the events table when table_name is $hash_cohort$) and get the first piece of data. Set the assertion to determine the number of query results to 1. Finally, return the data."
11468,"from flask import jsonify
def select_value(conn, isbn):
	books_sql = ""SELECT * FROM books WHERE isbn =: isbn""
	data = conn.execute(books_sql,{""isbn"":isbn}).fetchall()
	return jsonify(data)","设置sql（根据$isbn$查询books表中全部信息）,使用$conn$执行SQL并获取所有查询结果，并返回转化为json格式的查询结果。","Set up SQL (query all the information in the books table based on $isbn$), use $conn$ to execute the SQL and get all the query results. Return the query results converted to json format."
14094,"from flask import render_template, request, redirect
def query(conn,username):
	if request.method == ""POST"":
		result = conn.execute(""SELECT * FROM users WHERE username = :username"",{""username"": username}).fetchall()
		if result == None:
			return render_template(""error.html"")
		return redirect(""/"")
	else:
		return render_template(""login.html"")","若request模块发送请求的方式为post，则使用$conn$连接执行SQL：根据$username$获取users表中的所有列，并获取所有数据。如果查询结果为空，渲染并返回""error.html""；如果不为空，则使用redirect返回""/""。若request模块发送请求的方式不是post，渲染并返回""login.html""。","If the request module sends the request in a post method, use the $conn$ connection to execute SQL: To get all the columns in the users table based on the $username$ and get all the data. If the query result is empty, render and return ""error.html""; if not, use redirect to return ""/"". If the request module sends the request not in a post way, render and return""login.html""."
11466,"from sqlalchemy import create_engine
def select_value(test_pymysql, val):
	engine = create_engine(test_pymysql)
	with engine.acquire() as conn:
		query_sql = ""SELECT * FROM tbl WHERE val =: val""
		results = conn.execute(query_sql,{""val"":val})
		vals = [dict(zip(tuple(results.keys()), record)) for record in results.cursor]
		for row in vals:
			print(row.id, row.val)
	engine.close()",通过$test_pymysql$获取数据库引擎并使用with语句建立连接。设置SQL（根据$val$查询tbl表中所有列），执行sql，使用for循环遍历获取执行结果的cursor，将每条数据的keys与值接连转化为tuple，zip和dict，并存到一个list中。使用for遍历这个list并打印每条数据的id与val。最后关闭连接。,"Get the database engine via $test_pymysql$ and use 'with' statement to establish a connection. Set up the SQL (query all the columns in the tbl table based on $val$), and execute the SQL, use for loop to iterate through to get the cursor of the execution result. Convery 'keys' and 'value' of each piece of data into tuple, zip and dict, and stor in a list. Use for loop to iterate through the list and print 'id' and 'val' of each piece of data. Finally, close the connection."
13538,"import json
from sqlalchemy.exc import SQLAlchemyError
def adopt_pet(conn,id):
	try:
		res=conn.execute(""select * from tables WHERE user_id =:id"",{""id"":id}).fetchall()
		print(res)
	except SQLAlchemyError as e:
		print(str(e))
	return json.dumps({'status': 200, 'message': ""OK""})","尝试使用$conn$执行SQL（根据user_id为$id$查询tables表中所有列）获取所有数据并打印。如果执行时出现SQLAlchemyError异常，打印转化为字符串的异常，将字典：'status'为200, 'message'为""OK""转化为json并返回。","Try to use $conn$ to execute SQL (query all the columns in the 'tables' table where user_id is $id$), get all the data and print. If a SQLAlchemyError exception occurs during execution, print the exception converted to a string and convert the dictionary whose  'status' is 200 and 'message' is ""OK"" to json and return."
13843,"from flask import render_template
def get_books(conn, isbn,title):
	query = ""SELECT * FROM books WHERE isbn = :isbn AND title = :title""
	rows = conn.execute(query, {""isbn"": isbn, ""title"": title})
	if rows.rowcount == 0:
		return render_template(""error.html"")
	books = rows.fetchall()
	return render_template(""results.html"", books=books)","设置SQL语句（根据$isbn$和$title$获取books中的所有列），使用$conn$连接执行SQL语句，如果查询结果的行数目为0，渲染并返回""error.html""。获取所有的数据，渲染并返回""results.html""，其中books参数的结果为获取到的所有的数据。","Set up the SQL statement (get all columns in books based on $isbn$ and $title$), execute the SQL statement through the $conn$ connection. If the number of rows of the query results is 0, render and return ""error.html"". Get all the data, render and return ""results.html"", where the result of the books parameter is all the data obtained."
14114,"from flask import render_template
def get_books(connection):
	books = connection.execute(""SELECT * FROM books"").fetchall()
	assert len(books)>1
	return render_template(""books.html"", books=books)","使用$connection$连接执行SQL语句：查询books表中的全部列，并获取所有数据。设置断言判断查询结果的长度大于1，渲染并返回""books.html""，其中books参数为查询结果。","Use the $connection$ connection to execute the SQL statement: Query all the columns in the books table and get all the data. Set the assertion to determine that the length of the query result is greater than 1 and render and return ""books.html"", where the books parameter is the query result."
11540,"def stations(conn, id):
	stations = conn.execute(""SELECT * FROM station WHERE id = :id"", {""id"": id}).fetchall()
	stations2 = [i[0] for i in stations]
	return stations2",使用$conn$连接执行SQL语句，其内容为根据$id$获取station中的所有列，并获取所有数据。将查询结果每一项的第0个元素存储为list并返回。,Use $conn$ connection to execute SQL statement: Get all columns in station based on $id$ and get all data. Store the 0th element of each item of the query result as list and return it.
11612,"from flask import render_template
def search(db,title,author):
	all_isbn = db.execute(""select isbn from books where title=:title and author=:author"",{""title"":title,""author"":author}).fetchall()
	return render_template(""home.html"", result=all_isbn)","使用$db$执行SQL(根据$title$和$author$获取books表中的isbn列)并获取所有数据，返回渲染后的""home.html""，其中result参数为查询结果","Use $db$ to execute SQL (get the isbn column in the books table based on $title$ and $author$), get all the data, and return the rendered ""home.html"", where the result parameter is the query result."
11522,"from sqlalchemy.sql import select
def test_get_info(conn,t1,column):
	stmt = select(t1.c.q).where(t1.c.column == column)
	info = conn.execute(stmt).fetchall()
	return info",通过$conn$连接，使用Python表达式的方式设置SQL语句（根据$column$查询$t1$表中的所有q数据），执行SQL语句获取数据，返回所有的查询结果。,"Through $conn$ connection, set up the SQL statement using the Python expression (query all q data in the $t1$ table based on $column$), execute the SQL statement to get the data and return all the query results."
11183,"def getDetalleHistorial(conn,orderid):
	query = ""SELECT * FROM orderdetail WHERE orderid=:orderid""
	moviedata=conn.execute(query, {""orderid"":orderid}).fetchall()
	return [dict(row) for row in moviedata]",设置SQL语句为根据$orderid$获取orderdetail中的全部列，通过$conn$连接执行SQL语句获取所有数据，将查询结果每一项转化为dict存储为list并返回。,"Set the SQL statement to get all the columns in orderdetail where the id of order is $orderid$, execute the SQL statement to get all the data through the $conn$ connection, and store each query result item as a dict in a list and return."
11199,"def select_res(conn,BLOG,TITLE):
	row = conn.query(BLOG).filter(BLOG.TITLE == TITLE).first()
	return row[0]",通过$conn$连接，使用ORM方式执行SQL（根据$TITLE$查询$BLOG$中的第一条数据）返回查询结果的第0个元素。,Execute SQL (query the first data in $BLOG$ where TITLE is $TITLE$) using ORM through a $conn$ connection to return the 0th element of the query result.
11304,"from sqlalchemy.sql import select
def hashes_exists(conn, hash_table,addonid):
	query = select(hash_table).where(hash_table.c.addonid == addonid)
	res = conn.execute(query)
	try:
		return res .fetchall()
	finally:
		res.close()",使用$conn$执行Python表达式（根据$addonid$获取$hash_table$表中的所有列），尝试获取所有数据。最终确保数据库连接关闭,Use $conn$ to execute the Python expression (get all the columns in the $hash_table$ table based on $addonid$) and try to get all the data. Finally ensure that the database connection is closed.
11407,"def select_book(conn, user_id):
	sql = ""SELECT id FROM book WHERE user_id =: user_id""
	ids = conn.execute(sql,{""user_id"":user_id}).fetchall()
	conn.close()
	return ids",设置SQL（根据$user_id$查询book表中id列），根据$conn$执行SQL并获取所有查询结果，关闭连接，并将数据返回。,"Set up the SQL (query the id column in the book table based on $user_id$), execute the SQL based on $conn$ and get all the query result, close the connection, and return the data."
13414,"from flask import render_template
def book(conn, id):
	book_sql = ""SELECT book_name FROM books WHERE id =: id""
	book_names = conn.execute(book_sql,{""id"":id}).fetchall()
	if book_names is None:
		return render_template(""error.html"")
	return render_template(""book.html"", book_names=book_names)","使用$conn$执行SQL（根据$id$获取books表中的book_name列）并获取所有数据，如果获取的结果不为None，则返回渲染后的""error.html""，最后返回渲染后的""book.html""，其中book_names参数为执行SQL获取的数据","Use $conn$ to execute the SQL (get the book_name column in the books table based on $id$) and get all the data. If the obtained result is not None, then return the rendered ""error.html"", and finally return the rendered ""book.html"", where the book_names parameter is the data obtained by executing the SQL."
13869,"def find_drinker(engine, name):
	with engine.connect() as con:
		query = ""SELECT * FROM drinkers WHERE name = :name""
		result = con.execute(query, {""name"": name}).fetchall()
		if result is None:
			return None
		return dict(result)",使用with语句根据$engine$连接数据库。设置SQL语句：查询drinkers表中name为$name$的所有列，执行SQL获取全部数据。如果查询结果为空，返回None；否则以字典形式返回查询结果。,"Use the with statement to connect to the database based on $engine$. Set SQL statement: Query all columns in the drinkers table with name as $name$ and execute SQL to get all the data. If the query result is empty, return None; otherwise return the query results in the form of the dictionary."
11104,"from sqlalchemy.sql import select
def values(conn,table,col):
	sql = select(table.c.value).where(table.c.col == col)
	reccol = conn.execute(sql).fetchall()
	result = [x[0] for x in reccol]
	return result",使用Python表达式的方式设置SQL（通过$col$查询$table$中的value列），使用$conn$执行SQL并获取所有数据。将查询结果每一项的第0个元素存储为list并返回。,"Set up the SQL using a Python expression (query the value in $table$ according to $col$), execute the SQL using $conn$ and get all the data. Store the 0th element of each item of the query result as a list and return."
11309,"from flask import request
from flask import render_template
def login(conn,check_password_hash):
	if request.method == ""POST"":
		rows = conn.execute(""SELECT request FROM POST where check_password_hash = :check_password_hash"", {""check_password_hash"": check_password_hash}).fetchall()
		return [it for it in rows]
	else:
		return render_template(""login.html"")","如果数据请求方法为POST，则使用$conn$执行SQL（根据$check_password_hash$和$check_password_hash$查询POST表中request列的所有数据），将查询结果存储为list并返回。否则返回渲染后的""login.html""页面","If the data request method is POST, use $conn$ to execute SQL (query all data in the 'request' column of the POST table based on $check_password_hash$ and $check_password_hash$), store the query result as list and return. Otherwise, return the rendered ""login.html"" page."
13072,"def dbhost(conn,host):
	results = conn.execute(""SELECT * FROM detail WHERE host=:host"", {""host"": host})
	rs = results.fetchall()
	print(rs)
	return rs",使用$conn$执行SQL（根据$host$查询detail表中的所有列）。获取所有查询结果，打印并返回。,"Use $conn$ to execute SQL (query all columns in the detail table based on $host$). Get all query results, print and return."
13489,"def database_for_sqlite_select(connection, id):
	cursor = connection.cursor()
	sql = ""SELECT * FROM user WHERE id =: id""
	values = cursor.execute(sql,{""id"":id}).fetchall()
	cursor.close()
	connection.close()
	print(values)",利用$connection$的游标方法执行SQL（根据$id$获取user表中的所有列）并获取所有数据，然后关闭游标方法，再关闭数据库连接，最后打印查询结果,"Use the cursor method of $connection$ to execute the SQL (get all columns in the user table based on $id$) and get all the data. Then close the cursor method, close the database connection and finally print the query results."
11122,"import csv
def querydb(conn):
	f = open(""books.csv"")
	reader = csv.reader(f)
	for author in reader:
		texts = conn.execute(""SELECT title FROM books WHERE author=:author"",{""author"":author}).fetchall()
		print(texts)",打开给定的book.csv文件，通过for循环读取文件每一项数据，然后使用$conn$连接执行SQL查询语句（当author等于读取的每一项数据时，获取books表中对应的title）并获取所有数据。最后打印查询结果。,"Open the given book.csv file, read each item of data in the file through a for loop, then execute the SQL query statement using the $conn$ connection (when the author equals each item of data read, get the corresponding title in the books) and get all the data. Print the query result at last."
13250,"def select_count(conn, name):
	sql = ""SELECT count(*) from table where name='name'""
	results = conn.execute(sql,{""name"":name}).fetchall()
	return results[0]",设置SQL（根据$name$查询table中符合条件的数据行数），使用$conn$执行SQL获取所有数据并返回查询结果的第0项。,"Set SQL (query the number of eligible rows in the table where name is $name$) , execute SQL with $conn$ to get all the data and return the 0th of the query results."
11651,"def find_beersname(engine,bid):
	with engine.connect() as con:
		results = con.execute(""select name from Beers where id=:bid"",{""bid"":bid}).fetchall()
		return [dict(r) for r in results]",使用with语句利用$engine$连接数据库并执行SQL（根据id为$bid$获取Beers表中的name列）并获取所有数据，使用for循环对查询结果的每一项转化为字典类型并返回,Use the with statement and $engine$ to connect the database and execute SQL (get the name column in the Beers table where id is $bid$) and get all the data. Use for loop to convert each item of the query result to a dictionary type and return.
11176,"def query_page(engine,temp_min,temp_max):
	try:
		connection = engine.connect()
		res_data=connection.execute(""SELECT temp FROM weather_info WHERE temp_min=:temp_min AND temp_max=:temp_max"",{""temp_min"":temp_min,""temp_max"":temp_max}).fetchall()
		return [dict(row) for row in res_data]
	except Exception as e:
		print(e)",尝试性通过$engine$连接数据库，执行SQL（根据$temp_min$和$temp_max$获取weather_info中的全部temp）将查询结果每一项转化为dict存储为list并返回。,"Try to connect to the database with $engine$, execut SQL (get all of the weather_info where temp_min is $temp_min$ and temp_max is $temp_max$) to convert each query result into a dict store as a list and return."
14190,"from sqlalchemy import create_engine
def sql_import(localhost, datname):
	engine = create_engine(localhost)
	conn = engine.connect()
	value = conn.execute(""select count(*) from pg_database where datname =:datname"",{""datname"":datname}).fetchone()
	return value",通过$localhost$创建数据库引擎并进行连接。执行SQL语句（根据$datname$查询pg_database表中所有列的数量）获取第一条数据，返回所获取的数据。,Create the database engine and connect via $localhost$. Execute the SQL statement (query the number of all columns in the pg_database table based on $datname$) to get the first piece of data and return the obtained data.
13178,"def init(conn,message_te):
	try:
		res=conn.execute(""select * from table where message_te=:message_te"",{""message_te"":message_te}).fetchall()
		return res
	except Exception as e:
		print(e)",尝试使用$conn$执行SQL（根据$message_te$获取table表中的所有列）并获取所有数据，再返回查询结果，如果执行时出现异常，则打印异常,"Try to use $conn$ to execute SQL (get all the columns in the table where message is $message_te$) , get all the data, return the query results, and print an exception if an exception occurs during execution."
14289,"def getEventName(con, id):
	ret = con.execute(""select event_name, event_date from events where id =:id"",{""id"":id}).fetchone()
	return ret",通过$con$执行SQL语句（查询events表中id为$id$的第一条event_name和event_date），返回查询结果。,Execute the SQL statement through $con$ (query the first event_name and event_date in the events table where id is $id$) and return the query results.
14065,"def geoi_run(engine):
	with engine.connect() as con:
		query = ""SELECT count(*) FROM lookup_schema""
		row_count=con.execute(query).fetchone()
		for row in row_count:
			print(row)",通过with语句根据$engine$连接数据库。设置SQL查询语句：查询lookup_schema表中所有列的统计值，执行SQL获取第一条数据，使用for循环遍历查询结果并打印。,"Connect to the database according to $engine$ through the with statement. Set up the SQL query statement: Query the number of all columns in lookup_schema, execute SQL to get the first piece of data, and use for loop traversal to query the results and print."
13210,"from sqlalchemy.sql import select
def get_source(conn, filehash, source_file):
	query = select([source_file]).where(source_file.c.hash == filehash)
	results = conn.execute(query).fetchall()
	return results",使用python表达式的方式设置SQL语句，使用$conn$执行SQL语句（根据$filehash$查询$source_file$表中hash列），获取所有数据并返回。,"Set up SQL statements using Python expressions and execute SQL statements using $conn$ (query hash column in $source_file$ according to $filehash$), obtain all the data and return."
14290,"def update_friend_table(con,Friend,right_id):
	result = con.query(Friend).filter(Friend.right_id==right_id).all()
	for friend in result:
		print(friend)
	return result",通过$con$连接使用ORM方式 执行SQL语句：查询$Friend$表中right_id为$right_id$的所有数据，for循环遍历所有查询结果并打印，返回所有的查询结果。,"Use ORM method to execute the SQL statement through the $con$ connection: Query all the data in the $Friend$ table where a right_id is $right_id$, and use for loop traversal to query the results, print them, and return all the query results."
13478,"def get_item(conn, item_id):
	query = ""SELECT * FROM ic_item WHERE _id =: item_id""
	items = conn.execute(query,{""item_id"":item_id}).fetchall()
	if items:
		return True",使用$conn$执行SQL（根据_id为$item_id$获取ic_item表中的所有列）并获取所有数据，如果查询结果为真，则返回True,"Use $conn$ to execute SQL (get all columns in the ic_item table with _id as $item_id$) and get all the data. If the query result is true, return True."
13248,"from flask import render_template
def search(conn):
	books = conn.execute(""SELECT * FROM book"").fetchall()
	return render_template(""display.html"",books = books)","使用$conn$执行SQL（查询book中的所有列），获取所有数据。返回渲染后的""display.html""，其中参数books为查询结果。","Execute SQL (query all columns in book) with $conn$ to get all the data. Returns ""display.html"" after rendering, of which the argument books is the result of the query."
13790,"def get_models_ids(conn,model_group_id):
	sql = ""SELECT model_id FROM model_metadata WHERE model_group_id = :model_group_id""
	query = conn.execute(sql,{""model_group_id"":model_group_id}).fetchall()
	return [row for row in query]","设置sql（根据$model_group_id$查询model_metadata表中model_id列）,使用$conn$执行SQL并获取所有查询结果，使用for循环将查询结果的每一条插入list并返回。","Set sql (query the model_id column in the model_metadata table based on $model_group_id$), execute the SQL with $conn$, get all the query results, use for loop to insert each item of the query result into list and return."
11459,"from flask import render_template
def details(conn, book_id):
	sql = ""SELECT * FROM books WHERE id =: id""
	books = conn.execute(sql,{""id"":book_id}).fetchall()
	if books is None:
		return render_template(""error.html"", message=""No such book exists here."")
	rating = books[0]['average_rating']
	return render_template(""details.html"", book=books, rating=rating)","设置sql（根据id为$book_id$查询books表中全部信息）,使用$conn$执行SQL并获取所有查询结果。如果查询结果为空，返回渲染后的""error.html""页面，参数message为""No such book exists here.""。否则返回渲染后的""details.html""页面，其中参数book为查询结果, rating为查询结果第0条数据的'average_rating'字段。","Set SQL (query all the information in the books table based on id $book_id$), use $conn$ to execute SQL and get all the query results. If the query result is empty, return the rendered ""error.html"" page with the 'message' parameter: ""No such book exists here."" Otherwise, return the rendered ""details.html"" page with the 'book' parameter book being the query result and 'rating' is the 'average_rating' field of the 0th data of the query result."
11542,"def get_information(engine, name):
	conn = engine.connect()
	try:
		query = conn.execute(""SELECT * FROM tableDB WHERE name = :name"", {""name"": name}).fetchall()
		conn.close()
		return query
	except Exception as e:
		print(e)",通过$engine$连接数据库。尝试性查询tableDB表中name为$name$的所有列，并获取所有数据，确保数据库连接关闭并返回查询结果。如果出现Exception异常，打印异常信息。,"Connect to the database through $engine$. Try to query all the columns in the tableDB table with name as $name$ and get all data, make sure the database connection is closed and return the query result. If an Exception exception occurs, print the exception message."
11221,"def test_listen_targets_scope(conn,search_criteria):
	query = ""select * from books where search_criteria=:search_criteria""
	res=conn.execute(query,{""search_criteria"":search_criteria}).fetchall()
	conn.close()
	return res",通过$conn$执行SQL（根据$search_criteria$获取books表中的所有列）并获取所有数据，然后关闭$conn$，最后返回查询结果,Execute SQL via $conn$ (get all columns in the books table based on $search_criteria$) and get all the data. Close $conn$ and finally return the query result.
11338,"def RenameTable(conn, NewName,path):
	file = conn.execute(""select * FROM Name where NewName=:NewName and path=:path"", {""NewName"": NewName,""path"":path}).fetchone()
	conn.close()
	return file",使用$conn$执行SQL（根据$NewName$和$path$查询Name表中的第一行数据），关闭连接，并将数据返回。,"Use $conn$ to execute SQL (query the first row of data in the Name table based on $NewName$ and $path$), close the connection, and return the data."
13506,"from flask import request, redirect, url_for
def signup(db,password):
	if request.method == 'POST':
		login=db.execute(""select name from users where password=:password)"",{""password"": password}).fetchall()
		assert len(login)
		return redirect(url_for('login'))
	return redirect(url_for('signupp'))","如果请求方式为""POST""，利用$db$执行SQL（根据$password$查询users表中name列），并获取所有查询结果，设置断言判断查询结果长度，返回重定向的'login'页面。否则返回重定向的'signupp'页面。","If the request method is ""POST"", use $db$ to execute SQL (query the name column in the users table based on $password$), get all the query results, set the assertion to determine the query result length, and return the redirected 'login' page. Otherwise, return the redirected 'signupp' page."
13940,"def getOrderState(conn, orderId):
	sql = ""SELECT * FROM orderState WHERE orderId =: orderId""
	OrderStates = conn.execute(sql,{""orderId"":orderId}).fetchall()
	return [dict(row) for row in OrderStates]",设置SQL语句（根据$orderId$获取orderState中的全部列），使用$conn$连接执行SQL语句获取所有数据。将查询结果每一项转化为dict存储为list并返回。,"Set the SQL statement (get all the columns in the orderState table based on $orderId$), use the $conn$ connection to execute the SQL statement and get all the data. Convert each item of the query result to dict, store as list and return."
13907,"def get_pelis_en_categoria(conn, categoria):
	sql = ""SELECT * FROM generopeliculas WHERE categoria =: categoria""
	result = conn.execute(sql,{""categoria"":categoria}).fetchall()
	peliscat = []
	for a in result:
		peliscat.append(a)
	return peliscat",设置SQL语句，其内容为：根据$categoria$查询generopeliculas表中的所有列，通过$conn$执行SQL获取所有数据。使用for循环将执行结果中的每一项元素都存储到list中并将list内容返回。,"Set the SQL statement and the content is as follows: Query all the columns in the generopeliculas table based on $categoria$ and executes SQL, use $conn$ to get all the data. Use for loop to store each element in the execution result in list and return the list."
13093,"def loaddata(conn):
	stdin_val = conn.execute(""SELECT stdin FROM copy_name"").fetchall()
	return stdin_val",使用$conn$执行SQL（查询copy_name中的stdin）并获取所有数据。最后返回查询结果。,"Use $conn$ to execute SQL (query stdin in copy_name) and get all the data. Finally, return the query results."
14107,"from flask import render_template
def flight(conn, flight_id):
	flight = conn.execute(""SELECT * FROM flights WHERE id = :id"", {""id"": flight_id}).fetchone()
	if flight is None:
		return render_template(""error.html"")
	return flight","使用$conn$查询flights表中id为$flight_id$的所有列，并获取第一条数据。如果查询结果为空，渲染并返回""error.html""；否则返回查询结果。","Use $conn$ to query all columns in the flights table with an id of $flight_id$ and get the first piece of data. If the query result is empty, render and return ""error.html""; otherwise, return the query results."
13357,"from flask import render_template
def book(db,book_id):
	book_info=db.execute(""SELECT * FROM books WHERE id=:book_id"",{""book_id"":book_id}).fetchall()
	if len(book_info) != 1:
		return render_template(""error.html"")
	reviews = db.execute(""SELECT * FROM reviews WHERE book_id = :book_id"",{""book_id"": book_id}).fetchall()
	return render_template(""book.html"", book_info=book_info[0], reviews=reviews)","使用$db$执行SQL（根据id为$book_id$查询books表中所有列），并获取所有查询结果，如果查询结果长度不为1，返回渲染后的""error.html""页面。否则执行SQL（根据为$book_id$查询reviews表中所有列），并获取所有查询结果，返回渲染后的""book.html""页面，其中将参数book_info设定为第一次查询结果的第0个元素，参数reviews设定为第二次的查询结果。","Use $db$ to execute SQL (query all columns in the books table based on the condition that id is $book_id$) and get all the query results. If the length of the query results is not 1, return the rendered ""error.html"" page; otherwise, execute SQL (query all the columns in the reviews table for $book_id$), get all the query results, and return the rendered ""book.html"" page, where the parameter book_info is set to the 0th element of the first query result, and the parameter reviews is set to the second query result."
13991,"from flask import render_template, request
def books(conn, search):
	if request.method == ""POST"":
		sql = ""SELECT * FROM books WHERE title =: search""
		books = conn.execute(sql,{""search"":search}).fetchall()
		if books is None:
			return None
		return render_template(""search.html"", books = books)
	return render_template(""index.html"")","如果request模块发送请求的方式为post，则设置SQL（查询books中title为$search$的所有列），使用$conn$执行SQL获取所有数据。如果执行结果为空，返回None；否则，渲染并返回""search.html""，其中books参数为执行结果。如果request模块发送请求的方式不是post，渲染并返回""index.html""。","If the request module sends the request as post, set the SQL (query all columns in books with 'title' as $search$) and uses $conn$ to execute the SQL to get all the data. If the result is null, return None; otherwise, render and return ""search.html"", where the books parameter is the execution result. If the request module sends the request in a way other than post, render and return ""index.html""."
11428,"def get_likes(engine, name):
	with engine.connect() as con:
		query = ""SELECT itemId FROM likes WHERE drinkerId =: name""
		rs = con.execute(query,{""name"":name})
		return [row['item'] for row in rs]","使用with语句根据$engine$连接数据库。设置sql（根据drinkerId为$name$查询likes表中itemId列）,执行SQL，用for循环遍历获取的所有查询结果，将每条数据的'item'字段插入一个list中，并返回这个list。","Use the with statement to connect to the database based on $engine$. Set up the SQL (query the itemId column in the likes table based on 'drinkerId': $name$) and execute the SQL. Use for loop to iterate through all the obtained query results, insert the 'item' field of each piece of data into a list, and return the list."
13984,"from flask import request
def login(conn, email):
	if request.method == 'POST':
		sql = ""SELECT * FROM users WHERE email =: email""
		results = conn.execute(sql,{""email"":email}).fetchall()
		print(results)
		if results is None:
			return False
		else:
			return True",如果request模块通过POST方式发送请求，则设置SQL语句：根据$email$查询users表中所有列，使用$conn$执行SQL获取所有数据并打印。如果执行结果为空，返回False；否则返回True。,"If the request module sends the request through POST, set the SQL statement: Query all the columns in the users table based on $email$, use $conn$ to execute SQL to get all the data and print. If the execution result is empty, return False; otherwise return True."
13548,"def selectDataById(conn, id):
	sql = ""SELECT weather FROM home_list WHERE id =:id""
	res = conn.execute(sql,{""id"":id}).fetchall()
	if res:
		print(res)
		return res","设置sql（根据$id$查询home_list表中weather列）,使用$conn$执行SQL并获取所有查询结果，如果获取到数据，打印并返回查询到的结果。","Set up sql (query the weather column in the home_list table according to $id$), use $conn$ to execute SQL and get all the query results. If the data is obtained, print and return the query results."
11346,"from flask import jsonify
def submit_message(conn,channel):
	result = conn.execute(""SELECT message FROM username where channel=:channel"", {""channel"": channel}).fetchall()
	print(result)
	return jsonify({'message_uid': result})",使用$conn$执行SQL（根据$channel$查询表username中message列的所有数据），输出查询的结果，并将数据作为字典'message_uid'键的值，以json格式返回。,"Use $conn$ to execute SQL (query all the data in the message column of the username table based on $channel$), output the results of the query, take the data as the value of the dictionary 'message_uid' key and return with json format."
11559,"import csv
def get_books(conn, isbn, title):
	f = open(""books.csv"")
	reader = csv.reader(f)
	for isbn, title in reader:
		vals = conn.execute(""SELECT * FROM books WHERE isbn = :isbn AND title = :title"", {""isbn"": isbn,""title"": title}).fetchall()
		print(vals)",打开books.csv文件并读取文件。for循环遍历读取的文件，使用$conn$连接执行SQL语句：根据$isbn$和$title$查询books表中的所有列，并获取所有数据，并打印查询结果。,"Open and read the books.csv file. Use for loop iterate through the read file, use the $conn$ connection to execute the SQL statement: query all columns in the books table based on $isbn$ and $title$ and get all the data and print the query results."
14032,"def get_beers(engine):
	with engine.connect() as con:
		rs = con.execute(""SELECT name, manf FROM beers"").fetchone()
		return [dict(row) for row in rs]",使用with语句根据$engine$连接数据库。执行SQL语句：从beers表中查询第一条name和manf数据，将查询结果每一项转化为dict存储为list并返回。,"Use the with statement to connect to the database according to $engine$. Execute the SQL statement: Query the first 'name' and manf data from the beers table, convert each item of the query result to dict, store it as list, and return."
13092,"from flask import render_template
def re_login(conn,username,password):
	try:
		sql = ""SELECT id FROM users WHERE username=:username AND password:=password""
		id = conn.execute(sql, {""username"": username, ""password"":password}).fetchone()
		return id
	except ValueError:
		return render_template(""error.html"")","尝试性执行如下代码：设置SQL（根据$username$和$password$查询users中的id）；使用$conn$执行SQL并获取第一条数据；返回查询结果。如果出现ValueError异常，则返回渲染后的""error.html""。","Try to execute the following code: Set up the SQL (query the id in users based on $username$ and $password$); use $conn$ to execute SQL and get the first piece of data and return the query results. If a ValueError exception occurs, return the rendered ""error.html""."
13768,"def main(conn,title,author,year):
	sql = ""SELECT isbn FROM books where title = :title and author = :author and year = :year""
	f = conn.execute(sql, {""title"": title, ""author"": author,""year"":year}).fetchall()
	print(f)","设置sql（根据$title$，$author$和$year$查询books表中isbn列）,使用$conn$执行SQL并获取所有查询结果，打印查询结果。","Set sql (query the isbn column in the books table based on $title$, $author$ and $year$), use $conn$ to execute SQL, get all the query results, and print them."
11556,"def get_word(conn, id):
	query = ""SELECT * FROM words WHERE id = :id""
	ret_value = conn.execute(query, id).fetchall()
	return ret_value",设置SQL语句为根据$id$获取words表中的全部列，使用$conn$连接执行SQL获取全部数据，返回所有获取到的数据。,"Set the SQL statement to get all the columns in the words table based on $id$, use $conn$ connection to execute the SQL to get all the data, and return all the obtained data."
11698,"def search_key(engine,key_id):
	with engine.connect() as conn:
		key = conn.execute(""select key_word from table where key_id=:key_id"",{""key_id"":key_id}).fetchone()
		return key",使用with语句利用$engine$连接数据库并执行SQL（根据$key_id$获取table表中的key_word列）并获取第一条数据，最后返回查询结果,"Use the with statement and $engine$ to connect the database and execute SQL (get the key_word column in the 'table' table according to $key_id$), get the first piece of data, and finally return the query result."
11268,"def remove_equation(con,equation):
	res=con.execute('SELECT * FROM samples WHERE equation=:equation', {""equation"":equation}).fetchall()
	con.close()
	return res",使用$con$执行SQL（根据$equation$获取samples中的所有列）并获取所有数据，然后关闭$con$连接，最后返回查询到的结果,Use $con$ to execute SQL (get all columns in 'samples' based on $equation$) and get all the data. Close the $con$ connection and finally return the query result.
14220,"def file(conn,id):
	res = conn.execute(""select file from structure where id=:id"", {""id"":id})
	return res.fetchone()",通过$conn$执行SQL语句：根据$id$查询structure表中的file，获取查询结果的第一条数据并返回。,"Execute the SQL statement through $conn$: Query file in structure table based on the $id$, get the first piece of data and return."
11222,"def test_pre_ping_db_stays_shutdown(engine,pool_pre_ping):
	conn = engine.connect()
	sql=""select * from pool where pool_pre_ping=:pool_pre_ping""
	res=conn.execute(sql,{""pool_pre_ping"":pool_pre_ping}).fetchall()
	return res",通过$engine$连接数据库并执行SQL（根据$pool_pre_ping$查询pool表中的所有列）并获取所有数据，最后将获取的结果返回,"Connect to the database via $engine$ and execute SQL (query all columns in the pool table based on $pool_pre_ping$), get all the data, and finally return the obtained result."
13366,"def select(conn,Users,fr):
	users = conn.query(Users).filter(Users.projid == fr).all()
	for i, users in enumerate(users):
		print(i,users)",使用ORM的方式，利用$conn$执行SQL（根据projid为$fr$，查询$Users$表中全部信息），并获取查询到的所有数据，使用for循环遍历查询结果的索引序列，并输出其数据下标和数据。,"Use the ORM method and $conn$ to execute SQL (query all the information in the $Users$ table according to the condition that projid is $fr$,), get all the queried data, use for loop to traverse the index sequence of the query results, and output the data subscript and data."
13001,"from flask import render_template
def book_page(conn,isbn):
	values = conn.execute(""SELECT comments FROM ratings WHERE isbn=:isbn"",{""isbn"":isbn}).fetchall()
	get_more = False
	if len(values) > 1:
		get_more = True
	return render_template(""bookpage.html"", row=values[0], get_more=get_more)","使用$conn$执行SQL（根据$isbn$查询ratings表中的comments）并获取所有数据。默认设置存在多条数据的标签为False，如果查询结果长度大于1，则设置存在多条数据的标签为True。返回渲染后的""bookpage.html""，其中row参数为查询结果的第0个元素，get_more参数为是否存在多条数据的标签。","Use $conn$ to execute SQL (query the comments in the ratings table based on $isbn$) and get all the data. The default setting is False for the label of existing multiple data, and True for the label of existing multiple data if the query result length is greater than 1. Return the rendered ""bookpage.html"", where the row parameter is the 0th element of the query result, and the get_more parameter is the label of whether there are multiple pieces of data."
13307,"from flask import request,render_template
def TransactionEntry(conn,comment, item, payer, amount, status):
	if request.method == 'POST':
		sql =""SELECT entry_date FROM transaction WHERE comment=:comment AND item=:item AND payer=:payer AND amount=:amount AND status=:status ""
		entry_date = conn.execute(sql,{""comment"":comment, ""item"":item, ""payer"":payer, ""amount"":amount, ""status"":status}).fetchone()
		return render_template('transaction_form.html', date=entry_date)","如果请求方式为'POST'，设置sql（根据$comment$，$item$，$payer$，$amount$和$status$查询transaction表中entry_date列）,使用$conn$执行SQL并获取第一条数据，返回渲染后的'transaction_form.html'页面，其中date参数应赋值为查询到的数据。","If the request method is' POST', set sql (query the entry_date column in the transaction table based on $comment$, $item$, $payer$, $amount$ and $status$), use $conn$ to execute SQL, get the first piece of data, and return the rendered 'transaction_form.html' page, where the date parameter should be assigned to the queried data."
13039,"def testAbort(conn):
	try:
		res_information = conn.execute(""SELECT iduser FROM exis_table"").fetchall()
		return [dict(rr) for rr in res_information]
	except:
		return False",尝试性使用$conn$执行SQL（查询exis_table表中的iduser）并获取所有数据。将查询结果中的每一项数据转化为dict类型并存入list中返回。如果出现异常，则返回False。,"Try to use $conn$ to execute SQL (query iduser in the exis_table table) and get all the data. Convert each item of data in the query result to a dict type, store in list and return. If an exception occurs, return False."
13281,"def search_records(conn):
	records = conn.execute(""SELECT * FROM table"").fetchall()
	return records",使用$conn$执行SQL（获取table表中的所有列），获取所有数据并返回,"Execute SQL (get all the columns in the table) with $conn$, get all the data, and return."
13216,"import pandas as pd
from sqlalchemy import create_engine
def fine_temp(elephantsql):
	db = create_engine(elephantsql)
	temps = db.execute(""SELECT * FROM Temperature_avg_table"")
	df = pd.DataFrame(temps.fetchall())
	df.columns = temps.keys()
	return df",通过$elephantsql$获取数据库引擎，执行SQL语句（查询Temperature_avg_table表中的所有列）。将获取到的所有数据转化为DataFrame形式，其中列名称为查询结果的keys。最后返回处理后的数据。,"Get the database engine with $elephantsql$ and execute the SQL statement (query all columns in the Temperature_avg_table) . Convert all the data obtained to the DataFrame form, where the column name is the keys of the query result. Finally, the processed data is returned."
11582,"def get_value(session,Teams,team_id):
	output = session.query(Teams).filter(Teams.team_id == team_id).first()
	session.commit()
	session.close()
	return output",使用ORM方式通过$session$执行SQL语句：根据$team_id$查询$Teams$表中的第一条数据。使用commit()方法更新数据，确保$session$关闭，返回查询结果。,"Use the ORM method to execute the SQL statement through $session$: Query the first piece of data in the $Teams$ table based on $team_id$. Use the commit () method to update the data, make sure that $session$ is closed, and return the query results."
13086,"def getone(conn,datum):
	rows = conn.execute(""SELECT * FROM table WHERE datum=:datum"", {""datum"": datum}).fetchall()
	return rows",使用$conn$执行SQL（根据$datum$查询table中的所有列）并获取所有数据。返回查询结果。,Use $conn$ to execute SQL (query all columns in table based on $datum$) and get all the data. Return the query results.
13069,"def get_all(conn,clause):
	if clause is not None:
		table_names = conn.execute(""SELECT * FROM table_name WHERE clause_string=:clause"", {""clause"": clause}).fetchall()
		table_l = []
		for i in table_names:
			table_l.append(i)
		return table_l",如果$clause$不为None，则使用$conn$执行SQL（查询当clause_string等于$clause$时table_name表中的所有列）并获取所有数据。使用for循环将数据转化为list并返回。,"If $clause$ is not None, use $conn$ to execute SQL (query all columns in the table_name table when clause_string equals $clause$) and get all the data. Use for loop to convert the data to list and return."
13729,"from flask import render_template, request
def search(conn,isbn):
	if request.method == ""POST"":
		res = conn.execute(""SELECT * FROM books WHERE isbn = :isbn"",{""isbn"":isbn}).fetchall()
		if len(res) < 1:
			return render_template(""apology.html"")
		return render_template(""results.html"", res=res)
	else:
		return render_template(""search.html"")","如果请求方式为""POST""：使用$conn$执行SQL（根据$isbn$查询books表中所有列），并获取所有查询结果，如果查询结果长度小于1：返回渲染后的""apology.html""页面，否则返回渲染后的""results.html""页面，并设置res参数为查询结果。若不为""POST""，则返回渲染后的""search.html""页面。","If the request method is ""POST"", use $conn$ to execute SQL (query all columns in the books table according to $isbn$), and get all the query results. If the query result length is less than 1, return the rendered ""apology.html"" page; otherwise, return the rendered ""results.html"" page and set the res parameter to the query result. If the request method is not ""POST"", return the rendered ""search.html"" page."
11014,"def get_all_trades(conn,evdate):
	result_all_trades = conn.execute(""SELECT * FROM FRC_ALL_TRADES WHERE evdate=:evdate"",{""evdate"":evdate}).fetchall()
	return result_all_trades",使用$conn$执行SQL（根据$evdate$查询FRC_ALL_TRADES表中的所有列）并获取所有数据。最后返回所有查询结果。,"Use $conn$ to execute the SQL (query all columns in the FRC_ALL_TRADES table based on $evdate$) and get all the data. Finally, return all the query results."
13634,"from flask import render_template, request
from sqlalchemy.sql import select
def index(db,users,username,password):
	if request.method == ""GET"":
		return render_template('login.html')
	else:
		sql = select([users.id]).where(users.c.username == username and users.c.password == password)
		result = db.execute(sql,{""username"": username, ""password"": password}).fetchone()
		return render_template(""search.html"", result=result)","如果request请求方法为GET则直接返回渲染后的'login.html'。否则使用python表达式设置SQL（根据$username$和$password$查询$users$表中的id）。使用$db$执行SQL并获取第一条数据。返回渲染后的""search.html""并将查询结果传给result参数。","If the request method is GET, return the rendered 'login.html'. Otherwise, use the python expression to set the SQL (query the id in the $users$ table where username is $username$ and password is $password$) . Use $db$ to execute the SQL and get the first data. Return the rendered 'search.html' and passe the query result to the result parameter."
14156,"from flask import render_template
def book_search(conn):
	books = conn.execute(""SELECT * FROM books"").fetchone()
	if len(books)<=0:
		return False
	return render_template(""booklist.html"", books=books)","通过$conn$执行SQL：查询books表中的所有列，并获取第一条数据。如果获取数据的长度小于等于0，返回False；否则渲染并返回""booklist.html"", 其中books参数为获取的数据。","Execute SQL via $conn$: Query all columns in the books table and get the first piece of data. If the length of the obtained data is less than or equal to 0, return False; otherwise render and return ""booklist.html"", where the books parameter is the obtained data."
14030,"def get_total_spawns_count(conn, pokemon_id):
	result = conn.execute('SELECT COUNT(id) FROM sightings WHERE pokemon_id = :pokemon_id', {""pokemon_id"":pokemon_id}).fetchone()
	return result[0]",使用$conn$查询sightings表中pokemon_id为$pokemon_id$的第一条id统计值，返回查询结果的第0个元素。,Use $conn$ to query the first id statistic in the sightings table whose pokemon_id is $pokemon_id$ and return the pth element of the query result.
11239,"def postgresql_trace(conn,Date):
	try:
		query = 'select * FROM my_table WHERE Date =: Date'
		res=conn.execute(query,{""Date"":Date}).fetchall()
		result = []
		for item in res:
			result.append(item)
		return result
	except Exception:
		return 500",尝试使用$conn$执行SQL（根据$Date$获取my_table表中的所有列）并获取所有数据，，使用for循环对查询到的每一项数据都存储为list类型，然后返回list列表，如果出现异常，则返回500,"Try to use $conn$ to execute SQL (get all the columns in the 'my_table' based on $Date$), get all the data, use for loop to store every item of queried data as list, and then return the list. If an exception occurs, return 500."
14140,"def get(conn,t):
	tables = conn.execute(""SELECT tablename FROM pg_tables WHERE t =:t"",{""t"":t}).fetchall()
	for table in tables:
		print(table)
	return tables",通过$conn$执行SQL语句：通过$t$查询pg_tables表中的所有tablename，for循环遍历所有查询结果并将其打印，返回所有的查询结果。,Execute SQL statement via $conn$: Query all tablename in pg_tables table by $t$. For loop iterates through all query results and prints. Return all query results.
14110,"from sqlalchemy.sql import select
def getPersonId(conn, persons, name):
	firstRow = conn.execute(select([persons.c.Id],persons.c.Name == name)).fetchone()
	if firstRow == None:
		return None
	else:
		return firstRow[0]",使用Python表达式的方式，通过$conn$执行SQL语句：查询$persons$表中Name为$name$的第一条Id。如果查询结果为空，则返回None，否则返回查询结果的第0个元素。,"Use the Python expression to execute the SQL statement through $conn$: Query the first Id in the $persons$ table where Name is $name$. If the query result is empty, return None, otherwise return the 0th element of the query result."
11433,"def execute(conn):
	max_date = conn.execute(""SELECT max(latest_date) FROM account_latestfetchdate"").fetchall()
	if(max_date==None or max_date[0] == None):
		return None
	else:
		return max_date",利用$conn$执行SQL（查询account_latestfetchdate表中latest_date列的最大值），并获取所有查询结果，如果查询结果为空，或者查询结果的第0个元素为空，返回None，否则将查询结果返回。,"Use $conn$ to execute SQL (query the maximum value of the latest_date column in the account_latestfetchdate table) and get all the query results. If the query result is empty, or the 0th element of the query result is empty, return None, otherwise return the query result."
11558,"def test_roundtrip(conn, name):
	query = conn.execute(""SELECT * FROM frame_roundtrip WHERE name = :name"", {""name"": name}).fetchall()
	return [dict(row) for row in query]",使用$conn$连接执行SQL语句（根据$name$获取frame_roundtrip中的全部列）并获取所有数据，将查询结果转化为dict存储为list并返回。,"Use $conn$ connection to execute SQL statement (get all columns in frame_roundtrip based on $name$) and get all the data, convert query result into dict, store it as list and return it."
13887,"def get_update(conn, prix, link, id):
	query = ""SELECT * FROM record WHERE prix = :prix AND link = :link AND id = :id""
	res = conn.execute(query, {""prix"": prix, ""link"": link, ""id"": id}).fetchall()
	return res",设置SQL语句：通过$prix$、$link$和$id$查询record表中的所有列，使用$conn$连接执行SQL语句获取全部数据，返回所获取的数据。,"Set up SQL statement: Query all columns in the record table through $prix$, $link$ and $id$. Use $conn$ connection to execute SQL statement to get all the data. Return the obtained data."
11301,"def create_database(conn,DATABASE_SERVER,DATABASE_URI):
	sql = ""select * from DATABASES where DATABASE_SERVER=:DATABASE_SERVER and DATABASE_URI=:DATABASE_URI""
	log_start = conn.excute(sql,{""DATABASE_SERVER"":DATABASE_SERVER,""DATABASE_URI"":DATABASE_URI}).fetchone()
	return log_start",设置SQL（根据$DATABASE_SERVER$和$DATABASE_URI$查询DATABASES表中所有列），根据$conn$执行SQL并获取第一条数据，并将数据返回。,"Set up SQL (query all columns in the DATABASES table based on $DATABASE_SERVER$ and $DATABASE_URI$), execute SQL based on $conn$ and get the first piece of data, and return the data."
11345,"from flask import request,redirect
def process_login(db):
	email = request.form.get(""email"")
	password = request.form.get(""password"")
	if db.execute(""SELECT id FROM users WHERE email = :email, AND password = :password"", {""email,"": email, ""password"": password}).rowcount == 0:
		return ""Incorrect Email or Password.""
	else:
		return redirect(""/database"")","从页面中获取email与password，如果使用$db$执行SQL（根据email和password查询users表中id列数据）的长度为0，返回""Incorrect Email or Password.""，否则返回跳转命令""/database""。","Get email and password from the page. If the length is 0 when use $db$ to execute SQL (query the data of id column in the users table based on email and password), return ""Incorrect Email or Password"". otherwise, return the jump command ""/ database""."
13822,"from sqlalchemy.sql import select
import logging
def mirco_devices(conn,mtable,devid):
	try:
		s = select(mtable.c.vendor).where(mtable.c.devid == devid)
		out = conn.execute(s).fetchall()
		return [item for item in out]
	except Exception as e:
		logging.error(e)",尝试性使用Python表达式的方式设置SQL查询语句为：查询$mtable$表中devid为$devid$的所有vendor，使用$conn$连接执行SQL语句获取数据，并返回存储为list的查询结果。若出现Exception异常，则使用logging.error（）方法输出错误信息。,"Try to set up SQL query statement using the Python expression as follows: Query all vendor with devid as $devid$ in the $mtable$ table, use the $conn$ connection to execute the SQL statement to get the data and return the query results stored as list. If Exception occurs, output the error message using the logging.error() method."
13204,"from flask import redirect,url_for
def search(conn, session):
	if session.get(""current_user"") == []:
		return redirect(url_for('index'))
	else:
		results = conn.execute(""SELECT * FROM Books"").fetchall()
		return results","如果使用$session$.get方法获得到的""current_user""为空list，则返回使用url_for和redirect方法处理后的'index'。否则使用$conn$执行SQL（查询Books中的所有列），获取所有数据并返回。","If the ""current_user"" obtained by $session$.get method is an empty list, return 'index' after processing using the url_for and redirect methods. Otherwise, execute SQL (query all columns in Books) with $conn$, get all the data and return."
14161,"from sqlalchemy.sql import select
def test_expanding(testing, t ,m_FOO):
	with testing.connect() as conn:
		res = conn.execute(select([t]).where(t.c.foo == m_FOO)).fetchall()
		return res",使用with语句根据$testing$连接数据库。使用Python表达式的方式执行SQL语句：选取$t$表中foo为$m_FOO$的所有数据，返回所有的查询结果。,"Use the with statement to connect to the database based on $testing$. Use Python expression to execute the SQL statement: Select all the data in the $t$ table where foo is $m_FOO$, and return all the query results."
11024,"def teardown_db(admin_engine,DATAid):
	conn = admin_engine.connect()
	valsql = conn.execute(""SELECT val FROM DATABASE WHERE DATAid=:DATAid"",{""DATAid"":DATAid}).fetchall()
	conn.close()
	return valsql",通过$admin_engine$获取连接。执行SQL（根据$DATAid$查询DATABASE表中的val信息）并获取全部数据。关闭连接并返回查询结果。,Get the connection through $admin_engine$. Execute SQL (query the val information in the DATABASE table based on $DATAid$) and get all data. Close the connection and return the query results.
13076,"from flask import redirect, url_for
def query_login(conn,User,identity_url):
	user = conn.query(User.id).filter(User.openid==identity_url).first()
	if user is not None:
		return user
	else:
		return redirect(url_for('create_profile'))",在ORM方式下，使用$conn$执行SQL（查询openid等于$identity_url$时，$User$表中的id）并获取第一条数据。如果查询结果不为None，则返回查询结果。否则返回使用redirect和url_for处理后的'create_profile'。,"In ORM mode, use $conn$ to execute SQL (query the id in the $User$ table when openid equals $identity_url$) and get the first piece of data. If the query result is not None, return the query results. Otherwise, return 'create_profile' after being processed by redirect and url_for."
13359,"from sqlalchemy.sql import select
def listaCronologiaController(conn,devices,idController):
	s = select(devices).where(devices.c.controller== idController)
	recordQuery = conn.execute(s).fetchall()
	storyList=[]
	for record in recordQuery: 
		storyList.append({'mac': record['cronologia_mac'],'name': record['devices_name']})
	return storyList",根据python表达式设置SQL：（根据controller为$idController$查询$devices$表中所有列）。通过$conn$执行SQL并获取所有数据，使用for循环遍历每一项查询结果，每一条的cronologia_mac字段设置为字典'mac'对应的值，devices_name字段设置为字典'name'对应的值。并将其插入到一个list中，最后返回这个list。,"Set SQL based on the python expression (query all columns in the $devices$ table based on the condition that controller is $idController$). Execute SQL with $conn$, get all the data, use for loop to traverse each query result. Each cronologia_mac field is set to the value corresponding to the dictionary 'mac', and the devices_name field is set to the value corresponding to the dictionary' name'. And insert it into a list, and finally return the list."
13061,"def book_query(conn,myString):
	selections = conn.execute(""SELECT * FROM books WHERE title =:myString"",{""myString"":myString}).fetchall()
	for book in selections:
		print(book)",使用$conn$执行SQL（查询当title等于$myString$时books表中的所有列）并获取所有数据。使用for循环打印查询结果中的每一项。,Use $conn$ to execute SQL (query all columns in the books table when title equals $myString$) and get all the data. Use for loop to print each item in the query results.
14058,"from flask import render_template, request, redirect, url_for
def index(connection, username, password):
	if request.method == ""POST"":
		user = connection.execute(""SELECT * FROM users WHERE username = :username AND password = :password"", {""username"": username, ""password"": password}).fetchone()
		if user is None:
			return redirect(url_for('index'))
		return user
	if request.method == ""GET"":
		return render_template(""index.html"")","如果request模块发送请求的方式为post，则使用$connection$执行SQL（通过$username$和$password$查询users中的所有列）并获取第一条数据。如果查询结果为空，则使用redirect返回url_for拼接出的'index'；否则返回查询结果。若request模块发送请求的方式为GET，渲染并返回""index.html""。","If the request module sends the request as post, then use $connection$ to execute SQL (query all columns in users through $username$ and $password$) and get the first piece of data. If the query result is empty, use redirect to return the 'index' spliced by url_for; otherwise, return the query result. If the request module sends the request in a GET way, render and return ""index.html""."
13332,"from sqlalchemy.sql import select
def mark_article(conn,ta,id):
	s = select(ta.c.values).where(ta.c.id == id)
	recs = conn.execute(s).fetchall()
	return recs",根据python表达式设置SQL：（根据$id$查询$ta$表中values列）。通过$conn$执行SQL并获取所有数据，返回查询结果。,"Set SQL based on the python expression (query the values column in the $ta$ table based on $id$). Execute SQL through $conn$, get all the data, and return the query results."
11551,"def query_books(conn, isbn, title):
	res = conn.execute(""SELECT * FROM books WHERE isbn = :isbn AND title = :title"", {""isbn"": isbn,""title"": title}).fetchall()
	for i in res:
		print(i)",使用$conn$连接执行SQL语句（根据$isbn$和$title$查询books表中的所有列）并获取所有数据，for循环遍历查询结果并将其打印。,Use the $conn$ connection to execute the SQL statement (query all columns in the books table based on $isbn$ and $title$) and get all the data. Use for loop iterate through the query results and print them.
13938,"def select_university(conn, motto):
	sql = ""SELECT * FROM universities WHERE motto =: motto""
	universities = conn.execute(sql,{""motto"":motto}).fetchall()
	for uni in universities:
		print(uni)
	return universities",设置SQL语句为根据$motto$获取universities表中的所有列，使用$conn$连接执行SQL并获取数据。for循环遍历执行结果并打印，返回执行结果。,"Set the SQL statement to get all the columns in the universities table based on $motto$, and use the $conn$ connection to execute SQL and get the data. Use for loop to travers the execution result, print it, and return the execution result."
11508,"def main(db):
	books = db.execute(""SELECT isbn, title, author, year FROM books"").fetchall()
	for book in books:
		print(f""{book.isbn}, title: {book.title}, author: {book.author}, publication year: {book.year}."")","通过$db$执行SQL语句：查询books表中所有的isbn, title, author, year数据。使用for循环遍历查询结果，并将获取的数据打印。","Execute SQL statement through $db$: Query all the isbn, title, author, year data in the books table. Use for loop iterate the query results and print the obtained data."
14109,"def getitems(connection, label):
	items = connection.execute(""select ite from db_cols where label=:label"",{""label"":label}).fetchall()
	return list(items)",使用$connection$查询db_cols表中label为$label$的所有ite，将查询结果转化为list并返回。,"Use $connection$ to query all ite in the db_cols table with label $label$, convert the query results into a list and return."
11537,"def countAllCommandsOnHost(session, id):
	out = session.execute(""SELECT title FROM commands WHERE id = :id"", {""id"": id}).fetchone()
	session.close()
	return out","通过$session$执行SQL语句（使用$id$查询commands表中的第一条title数据），确保$session$关闭,返回所有的查询结果。","Execute the SQL statement through $session$ (query the first piece of title data in the commands table using $id$), make sure $session$ is closed, and return all the query results."
13656,"def get_Table(conn, table_schema):
	cur = conn.cursor()
	query = ""SELECT table_name FROM tables WHERE table_schema=%s""%table_schema
	rows = cur.execute(query).fetchone()
	print(rows)
	table_list = []
	for row in rows:
		table_list.append(row)
	return table_list",使用$conn$获取游标。使用%操作符设置SQL：根据$table_schema$查询tables表中的table_name。使用游标执行SQL并获取第一条数据。打印查询结果并使用for循环将查询结果存入list。最后返回list。,"Get the cursor with $conn$. Set up SQL with the % Operator: query the table_name in the tables where table_schema is $table_schema$. Execute the SQL using the cursor and get the first data. Print the query results and use the for loop to store the query results in a list. Finally, return list."
11071,"from flask import request, render_template
def query_book(conn,book_id):
	if request.method == ""POST"":
		username=conn.execute(""SELECT username FROM users WHERE book_id=:book_id"",{""book_id"":book_id}).fetchone()
		return username
	else:
		return render_template(""book.html"")","如果执行request的请求方法为""POST""，则使用$conn$执行SQL（根据$book_id$查询users中的username）并获取第一条数据，最后返回数据。否则返回渲染后的""book.html""。","If the request method to execute request is ""POST"", use $conn$ to execute SQL (query username in users based on $book_id$), get the first piece of data, and finally return the data. Otherwise, return the rendered ""book.html""."
13168,"def mobile_homes_endpoint(conn,home):
	c = conn.cursor()
	results = c.execute(""SELECT * FROM mobile_homes where home=:home"",{""home"":home}).fetchone()
	mh_data = []
	for result in results:
		mh_data.append(result)
	return mh_data",使用$conn$的游标方法执行SQL（根据$home$获取mobile_homes表中的所有列）并获取第一条数据，然后使用for循环对查询结果的每一项转化为list类型，最后返回list内容,"Use the $conn$ cursor method to execute SQL (get all the columns in mobile_homes where home is $home$) and get the first data, then use the for loop to convert each item of the query result to a list type and return the list content."
11368,"def getNA(conn,countTotal):
	try :
		query = conn.execute(""SELECT * FROM datasourceId where countTotal=:countTotal"",{""countTotal"": countTotal}).fetchall()
		result = []
		for i in query:
			result.append(i)
		return result
	except Exception as e:
		return ['error']",尝试使用$conn$执行SQL（根据$countTotal$查询datasourceId表中全部信息的所有查询结果），并使用for循环将数据逐条插入一个list中，返回这个list。如果执行时出现Exception异常，则返回转化为list的'error'。,"Try to use $conn$ to execute SQL (query all the query results of all the information in the datasourceId table based on $countTotal$), and use for loop to insert the data one by one into a list, and return this list. If an Exception occurs during execution, return the 'error' that converted to list."
11256,"def update_table(engine,user):
	with engine.connect() as con:
		try:
			query=""SELECT * FROM Table where user=:user""
			rs = con.execute(query,{""user"":user}).fetchall()
			return rs
		except ValueError as e:
			print(e)",使用with语句通过$engine$连接数据库，尝试执行SQL（根据$user$获取Table中的所有列）并获取所有数据，返回获取的结果，如果执行时出现ValueError异常，则打印异常,"Use the with statement to connect to the database via $engine$, try to execute the SQL (get all the columns in the Table according to $user$) and get all the data. Return the obtained result and print an exception if a ValueError exception occurs during execution."
11147,"from flask import jsonify
def test(conn,id):
	infor_node = conn.execute(""SELECT * FROM nodes WHERE id_node=:id"",{""id"":id}).fetchall()
	print(infor_node)
	return jsonify(infor_node)",使用$conn$执行SQL语句（查询当id_node为$id$时，nodes表中的所有列）并获取所有数据，打印查询结果，并使用jsonify返回查询结果。,"Execute the SQL statement using $conn$ (query all columns in the nodes where id_node is $id$) and get all the data, print the query results, and use jsonify to return the query results."
13381,"from sqlalchemy import create_engine
from flask import render_template
def select_index(localhost,File,File_id):
	engine = create_engine(localhost)
	files = engine.query(File).filter(File.id == File_id).first()
	return render_template('index.html', files=files)",通过$localhost$获取数据库引擎，使用ORM的方式，执行SQL（根据id为$File_id$查询$File$表中所有列），并获取第一条数据，返回渲染后的'index.html'页面，其中参数files为查询结果。,"Get the database engine through $localhost$, use ORM method to execute SQL (query all columns in the $File$ table according to the condition that id is $File_id$), get the first piece of data, and return the rendered 'index.html' page, where the parameter files is the query results."
14139,"def get_key_id(session, Key, acc_name):
	try:
		key = session.query(Key).filter(Key.account == acc_name).first()
		if key is None:
			return False
	finally:
		session.close()
	return key.key_id",通过$session$使用ORM方式执行SQL语句：查询$Key$表中account为$acc_name$的第一条数据。如果查询结果为空，则返回False，最后确保$session$关闭，返回查询结果中key_id对应的值。,"Use ORM to execute SQL statement via $session$: Query $Key$ table for the first data whose 'account' is $acc_name$. If the query result is empty, return False, and finally make sure that $session$ is turned off and return the value corresponding to key_id in the query result."
13375,"from sqlalchemy import create_engine
def drop_user(uri,user_name):
	default_engine = create_engine(uri)
	try:
		conn = default_engine.connect()
		res=conn.execute(""SELECT id FROM ROLE WHERE user_name=:user_name"",{""user_name"":user_name}).fetchall()
		conn.close()
		return res
	except Exception as e:
		print(e)",通过$uri$获取数据库引擎。尝试建立连接，执行SQL语句（根据$user_name$查询ROLE表中id列），并获取所有数据，关闭连接，将查询结果返回。如果捕获到Exception异常，打印这个异常。,"Get the database engine through $uri$. Try to establish a connection, execute the SQL statement (query the id column in the ROLE table according to $user_name$), get all the data, close the connection, and return the query results. If an Exception is caught, print the exception."
11006,"def test_opt(conn,id):
	data_colb = conn.execute(""SELECT data_col FROM testtable WHERE id=:id"",{""id"":id}).fetchall()
	data_colist=[]
	for i in data_colb:
		data_colist.append(i[0])
	assert len(data_colist)!=0
	return data_colist",使用$conn$执行SQL：根据$id$查询testtable表中的所有data_col。 每个查询到的数据利用for循环存入到list中并设置断言判断list长度不为0。最后返回存储的list。,"Use $conn$ to execute SQL: Query all data_col in the testtable table based on $id$. Each query is stored in list using for loop and the assertion is set to determine that the list length is not 0. Finally, return the stored list."
11021,"def load_sparse_vector_data_structures(conn,corpusid):
	texts = conn.execute(""SELECT year FROM count_vectors WHERE corpusid='{}'"".format(corpusid)).fetchall()
	years=[]
	for i in texts:
		print(i)
	return years",使用$conn$执行SQL（根据$corpusid$查询count_vectors表中的year信息）并获取所有查询结果。将查询结果用for循环打印其中每一个元素。最后返回查询结果。,"Use $conn$ to execute SQL (query the year information in the count_vectors table based on $corpusid$) and get all the query results. Use for loop to print each of these elements of the query results. Finally, return the query results."
13813,"from sqlalchemy.sql import select
def check_select(conn,table,updatetime):
	s = select(table.c.task).where(table.c.updatetime == updatetime)
	out = conn.execute(s).fetchall()
	for t in out:
		print(t)",使用Python表达式的方式设置SQL语句为根据$updatetime$获取$table$中的所有task，使用$conn$连接执行SQL并获取数据。for循环遍历所有的查询结果并打印。,Use the Python expression to set up the SQL statement to get all the tasks in the $table$ based on $updatetime$. Use $conn$ connection to execute the SQL and get the data. Use for loop iterate through all the query results and print them.
13455,"def getRecord(conn, id):
	sql = ""SELECT login FROM USER WHERE id =: id""
	results = conn.execute(sql,{""id"":id}).fetchall()
	return results",利用$conn$执行SQL（根据$id$获取USER表中的login列）并获取所有数据，最后返回查询结果,Use $conn$ to execute SQL (get the login column in the USER table based on $id$) and get all the data. Finally return the query results.
13635,"from flask import render_template, redirect
def index(connect,user):
	sele = ""SELECT name FROM users WHERE user_id = :user""
	user = connect.execute(sele,{""user"":user}).fetchall()
	if len(user) != 0:
		return render_template(""index.html"",user=user)
	else:
		return redirect(""/login"")","设置SQL：查询当user_id为$user$时users表中的name。使用$connect$执行SQL并获取所有数据。如果查询结果长度不为0，则返回渲染后的""index.html""，并将查询结果传入user参数。否则使用redirect重定向到""/login""。","Set SQL: query name in the users table where the user_id is $user$. Execute the SQL using $connect$ and get all the data. If the query result length is not 0, then return to rendered 'index.html' and pass the query result to the user parameter. Otherwise redirect to ""/login"" using redirect."
13652,"def example_query(db,Question,question_id):
	title = db.query(Question.title).filter(Question.question_id == question_id).all()
	assert len(title)!=0
	for res in title:
		print(res)",在ORM方式下，使用$db$执行SQL（根据$question_id$查询$Question$中的title信息）并获取所有数据。设置断言判断查询结果长度不为0。使用for循环打印查询结果中的每一项数据。,"In ORM, SQL is executed using $db$ (query title information in $Question$ based on $question_id$) and get all the data.  Set assertion to determine that the length of the query result is not 0. Use the for loop to print each item of data in the query results."
13403,"from sqlalchemy import create_engine
def select_value(db, url):
	e = create_engine(db, echo=True)
	webnames = []
	with e.connect() as c:
		sql = ""SELECT webname FROM web WHERE url =: url""
		results = c.execute(sql,{""url"":url}).fetchall()
		for row in results:
			webnames.append(row[0])
		return webnames",通过$db$获取数据库引擎，其中echo参数为True，然后使用with语句连接数据库并执行SQL（根据$url$获取web表中的webname列），再使用for循环对查询结果的每一项的第0个元素存储为list，最后返回list内容,"Get the database engine through $db$, where the echo parameter is True, then use the with statement to connect to the database and execute the SQL (get the webname column in the web table based on $url$). Use for loop to store the 0th element of each item of the query result as list, and finally return the list contents"
11240,"def main(conn,destination):
	flights = conn.execute(""SELECT origin FROM flights where destination=:destination"",{""destination"":destination}).fetchall()
	for flight in flights:
		print(f""{flight.origin}"")
	return flights",使用$conn$执行SQL（根据$destination$获取flights的origin列）并获取所有数据，然后使用for循环将查询结果的每一项使用f格式打印origin列数据，最后返回查询结果,"Use $conn$ to execute SQL (get the origin column of flights based on $destination$), get all the data, use for loop to print the origin column data in f format for each item of the query result, and finally return the query result."
14235,"def course(university_name, conn):
	university = conn.execute(""SELECT * FROM universities WHERE name=:name;"", {'name':university_name}).fetchone()
	return university",通过$conn$连接执行SQL语句：查询universities表中name为$university_name$的所有列，并获取第一条数据。返回执行结果。,Execute the SQL statement through the $conn$ connection: Query all columns in the universities table where name is $university_name$ and get the first piece of data. Return the execution result.
13497,"def pre_process(conn, quiz_type):
	sql = ""SELECT * FROM chapters WHERE quiz_type =: quiz_type""
	results = conn.execute(sql,{""quiz_type"":quiz_type}).fetchall()
	if results:
		return results",使用$conn$执行SQL（根据$quiz_type$获取chapters表中的所有列）并获取所有数据，如果查询结果为真，则返回查询结果,"Use $conn$ to execute SQL (get all columns in the chapters table based on $quiz_type$) and get all the data. If the query result is true, return the query result."
13285,"from sqlalchemy import create_engine
def verificaId_filme(db_string, titulo):
	db = create_engine(db_string)
	connection = db.connect()
	sql = ""SELECT id_filme FROM filme WHERE titulo =: titulo""
	results = connection.execute(sql,{""titulo"":titulo}).fetchall()
	connection.close()
	return results",通过$db_string$获取数据库引擎并建立连接，执行SQL语句（根据$titulo$获取filme表中的id_filme列）并获取所有数据。断开数据库连接后返回查询结果,"Get the database engine with $db_string$ and make the connection, execute the SQL statement (get the id_filme column in the Filme where titulo is $titulo$) and get all the data. Return the result of a query after disconnecting the database."
11084,"from sqlalchemy.sql import select
from sqlalchemy import create_engine
def query(sqlite,sleep,too_old):
	e = create_engine(sqlite)
	s = select(sleep.c.id).where(sleep.c.time == too_old)
	idsleep = e.execute(s).fetchall()
	for cmd in idsleep:
		print(cmd)",根据$sqlite$创建引擎，通过python表达式设置SQL（当time为$too_old$的时候，查询$sleep$表中的id）。执行SQL并获取所有数据。最后通过for循环打印数据每一项内容。,"Create the engine based on $sqlite$ and set the SQL through the python expression (when time is $too_old$, query the id in the $sleep$ table). Execute the SQL and get all the data. Finally, each item of the data is printed through for loop."
13993,"import logging
def count_table_rows(conn):
	try:
		sql = ""SELECT count(*) from table""
		res = conn.execute(sql).fetchall()
		return res
	except Exception as ex:
		logging.error(ex)",尝试设置SQL语句，其内容为：从table表中查询所有列的数量，使用$conn$执行SQL语句获取所有数据并返回。如果出现Exception，则使用logging.error()返回异常信息。,"Try to set the SQL statement: Query the number of all columns from the table table, use $conn$ to execute the SQL statement to get all the data and return. If an Exception occurs, use logging.error() to return exception information."
13873,"def get_otu_id(conn, id):
	res = conn.execute(""SELECT * FROM samples WHERE id = :id"", {""id"": id}).fetchall()
	res_list = []
	for row in res:
		print(row)
		res_list.append(row)
	return res_list",通过$conn$执行SQL语句，其内容为：根据$id$查询samples中的所有列，并获取全部数据。使用for循环遍历查询结果并打印，然后将查询结果存储到list中并将list内容返回。,Execute the SQL statement through $conn$ with the following contents: Query all the columns in samples based on $id$ and gets all the data. Use for loop iterate through the query results and print them. Then store the query results into list and return the contents of the list.
13903,"from sqlalchemy.sql import select
def select_file(connection, features):
	features_res = connection.execute(select([features])).fetchall()
	return features_res",通过$connection$使用Python表达式的方式执行SQL：获取$features$表中的所有数据，将获取到的数据返回。,Use $connection$ and the Python expression to execute SQL: Get all the data in the $features$ table and return the obtained data.
11670,"def get_lastloadedtime(conn,id):
	ts = conn.execute(""select max(TIMESTAMP) from eq_eod_data where id=:id"",{""id"":id}).fetchall()
	return ts[0][0]",利用$conn$执行SQL（根据$id$获取eq_eod_data表中被最大值函数处理过的TIMESTAMP列）并获取所有数据，最后返回查询结果的第0行的第0个元素,"Execute SQL with $conn$ (get the TIMESTAMP column in the eq_eod_data table processed by the maximum function according to $id$), get all the data, and finally return the 0th element of the 0th row of the query result."
13837,"from flask import render_template
def query_professor(db, university_name, professor_name):
	university = db.execute(""SELECT * FROM universities WHERE name=:name;"", {'name': university_name}).fetchone()
	professor = db.execute(""SELECT * FROM professors WHERE uni_id=:uni_id AND l_name=:l_name"", {'uni_id': university.id, 'l_name':professor_name}).fetchone() 
	courses = db.execute(""SELECT * FROM courses WHERE professor_id=:professor_id"", {'professor_id':professor.id})
	publications = db.execute(""SELECT * FROM publications WHERE professor_id=:professor_id"", {'professor_id':professor.id})
	return render_template('professor.html', publications=publications, courses=courses, professor=professor, university=university)","step1：通过$db$连接执行SQL语句（根据$university_name$查询universities中的所有列）并获取第一条数据。step2：通过$db$连接执行SQL语句（当uni_id等于step1查询结果中的id属性和l_name等于$professor_name$时，查询professors中的列）并获取第一条数据。step3：通过$db$连接执行SQL语句（当professor_id等于step2查询结果中的id属性时查询courses表中的所有列）。step4：通过$db$连接执行SQL语句（当professor_id等于step2查询结果中的id属性查询publications中的所有列）。渲染并返回'professor.html'，其中publications参数为step4的查询结果, courses参数为step3的查询结果, professor参数为step2的查询结果, university参数为step1的查询结果。","Step1: Execute SQL statement through $db$ connection (query all columns in universities based on $university_name$) and get the first piece of data. Step2: Execute SQL statement through $db$ connection (query columns in professors where uni_id is the id attribute in step1 query and l_name is $professor_name$) and get the first piece of data. Step3: Execute SQL statement through $db$ connection (query all columns in the courses table where professor_id is the id attribute in step2 query result). Step4: Execute SQL statement through $db$ connection (query all columns in publications where professor_id is the id attribute in step2 query result). Render and return 'professor.html', where the publications parameter is the query result of step4, the courses parameter is the query result of step3, the professor parameter is the query result of step2, and the university parameter is the query result of step1."
11692,"def get_dates(e,id):
	conn = e.connect()
	seeks = ""select date from GBP where id=:id""
	dates = conn.execute(seeks, {""id"":id}).fetchall()
	return [dd for dd in dates]",利用$e$连接数据库并执行SQL（根据$id$获取GBP表中的date列）并获取所有数据，然后使用for循环对查询结果的每一项存储为list类型并返回,"Use $e$ to connect the database and execute SQL (get the date column in the GBP table according to $id$), get all the data, then use for loop to store each item of the query result as a list type and return."
13185,"def sqlite3_via_index(conn, name):
	c = conn.cursor()
	c.execute('select * from table_name where name=:name',{""name"":name}).fetchall()
	for row in c:
		start = row[0]
		stop = row[1]
		score = row[2]
		calc = start + stop + score
	return calc",使用$conn$的游标方法执行SQL（根据$name$获取table_name表中的所有列）并获取所有数据，使用for循环对查询结果的每一项的第0个元素、第1个元素和第2个元素相加并返回,"Use the $conn$ cursor method to execute SQL（get all the columns in the 'table_name' where name is $name$) and get all the data, and use the for loop to add and return the 0th, 1st, and 2nd elements of each item in the query result."
13080,"from sqlalchemy.sql import select
def get_movie_main(conn,tc,movieID):
	s = select(tc.c.id).where(tc.c.tconst == movieID)
	movie = conn.execute(s).fetchone()
	return movie[0]",使用python表达式方式设置SQL：查询当tconst等于$movieID$时$tc$中的id。使用$conn$执行SQL并获取第一条数据。返回查询结果的第0号元素。,Use python expressions to set SQL: Query the id in $tc$ when tconst equals $movieID$. Use $conn$ to execute SQL and get the first data. Return the 0th of the query results.
13130,"from flask import render_template
def search(conn,searchstring):
	sql=""SELECT * FROM books where isbn=:searchstring and author =:searchstring and title =:searchstring""
	rbooks = conn.execute(sql,{""searchstring"":searchstring}).fetchall()
	return render_template(""search.html"", rbooks = rbooks)","使用$conn$执行SQL（根据isbn为$searchstring$、author为$searchstring$和title为$searchstring$获取books表中的所有列）并获取所有数据，最后返回渲染后的""search.html""，其中rbboks参数为查询结果","Execute the SQL with $conn$ (get all the columns in the books where isbn is $searchstring$, author is $searchstring$ and title is $searchstring$) and get all the data, and finally return the rendered ""search.html"" with the rbboks parameter as the result of the query."
11608,"def search_table(conn,table_id):
	try:
		tb = conn.execute(""select tablename from table where table_id=:table_id"",{""table_id"":table_id}).fetchone()
		return tb
	except Exception as e:
		print(e)",尝试使用$conn$执行SQL（根据$table_id$获取table表中的tablename列）并获取第一条数据，返回查询结果，如果执行时出现异常，则打印异常,"Try to use $conn$ to execute SQL (get the tablename column in the 'table' table according to $table_id$), get the first piece of data and return the query result. If an exception occurs during execution, the exception is printed."
11103,"def contain_percents_character_query(conn,datetime):
	texts = conn.execute(""SELECT * FROM date_parse WHERE datetime=:datetime"",{""datetime"":datetime}).fetchall()
	assert texts!=[]
	return texts",使用$conn$连接执行SQL语句（根据$datetime$查询date_parse中的所有列）并获取全部数据，设置断言判断返回结果不为空list，最后返回数据。,"Use the $conn$ connection to execute the SQL statement (based on all columns in the date_parse where the datetime is  $datetime$) and get all the data, set the assertion that the return result is not an empty list, and then return the data."
13793,"def drop_table(conn,name_table):
	result = conn.execute(""SELECT * from drop_table WHERE name_table=:name_table"", {""name_table"": name_table}).fetchall()
	return result",利用$conn$执行SQL（根据$name_table$查询drop_table表中所有列），并获取所有数据，将查询结果返回。,"Use $conn$ to execute SQL (query all columns in the drop_table according to $name_table$), get all the data, and return the query result."
11058,"def test_sqlite3(conn,rows):
	myname_list = []
	for row in rows:
		myname=conn.execute(""SELECT name FROM customer WHERE row=:row"",{""row"":row})
		myname_list.append(myname)
	return myname_list",在for循环中，对于$rows$中的每一项数据，利用$conn$根据该数据查询$customer$表中name信息，最后将查询结果加入到list中。最后返回list中存储的所有数据。,"In for loop, for each item of data in $rows$, use $conn$ to query the name information in the $customer$ table based on that data, and finally add the query results to the list. Finally, all the data stored in list is returned."
13014,"from flask import jsonify
def show_hdi(conn,year):
	results = conn.execute(""SELECT country FROM Aquastat WHERE mid_year=:year"",{""year"":year}).fetchall()
	countries=[]
	hdi=[]
	for result in results:
		countries.append(result[0])
	year_dict = {""country"": countries}
	return jsonify(year_dict)","使用$conn$执行SQL（查询当mid_year为$year$时，Aquastat表中的country信息）并获取所有数据。将查询结果中每一项的第0号元素存入list中。将存第0号元素的list放到字典中""country""对应的值。最后jsonify返回处理后的字典。","Use $conn$ to execute SQL (query the country information in the Aquastat table when mid_year is $year$) and get all the data. Store 0th element of each item in the query result into list. Put the list of oth element into the dictionary corresponding to ""country"". Finally, jsonify returns the processed dictionary."
13053,"def drop_table(conn):
	try:
		value = conn.execute(""SELECT * FROM new_table_name"").fetchone()
		return value
	except:
		return",尝试性使用$conn$执行SQL（查询new_table_name表中的所有列）并获取第一条数据。返回查询结果。如果出现结果则直接返回。,"Try to use $conn$ to execute SQL (query all columns in the new_table_name table) and get the first piece of data. 
Return the query results. If the result appears, it will be returned directly."
13685,"def searchUser(conn,Password,UserType):
	query = ""select username from LoginData where Password=:Password and UserType=UserType""
	user = conn.execute(query,{""Password"":Password,""UserType"":UserType}).fetchone()
	return user",设置SQL：根据$Password$和$UserType$查询LoginData中的username。使用$conn$执行SQL并获取第一条数据。最后返回查询结果。,"Set SQL: query username in LoginData where Password is $Password$ and UserType is $UserType$. Execute SQL with $conn$ and get the first data. Finally, return the query results."
13523,"from sqlalchemy.sql import select
def iteritems(conn,tb,col8):
	query = select([tb.table]).where(tb.col8 ==col8)
	result = conn.execute(query).fetchall()
	res=[]
	for row in result:
		key = row[0]
		res.append(key)
	return res",根据python表达式设置SQL：（根据$col8$查询$tb$表中table列）。通过$conn$执行SQL并获取所有数据，使用for循环遍历每一项查询结果，并将每条数据的第0个元素插入到list，最后返回这个list。,"Set SQL based on the python expression (query the 'table' column in the $tb$ table based on $col8$). Execute SQL with $conn$ and get all the data, use for loop to traverse each query result, and insert the 0th element of each piece of data into list, and finally return the list."
13141,"def url_is_in_database(conn, url):
	sql = ""select * from weburls where url =: url""
	res_proxy = conn.execute(sql,{""url"":url}).fetchall()
	results = [item for item in res_proxy]
	return len(results)",使用$conn$执行SQL（根据$url$获取weburls表中的所有列）并获取所有数据，然后使用for循环对查询结果的每一项存储为list类型，最后返回list内容的长度,"Use $conn$ to execute SQL (get all the columns in the weburls table where url is $url$) and get all the data, then use the for loop to store the list type for each item of the query result, and finally return the length of the list content."
11241,"def getStateCode(conn, stateId):
	execStr = ""SELECT * FROM statusCode WHERE stateId =:stateId ""
	res=conn.execute(execStr,{""stateId"":stateId}).fetchall()
	return res",使用$conn$执行SQL(根据$stateId$获取statusCode的所有列)并获取所有数据，最后返回获取的结果,"Use $conn$ to execute SQL (get all the columns of statusCode based on $stateId$), get all the data, and finally return the obtained result."
11169,"def post_iter(conn,BLOG_ID):
	qeury = ""SELECT ID FROM POST WHERE BLOG_ID=""+BLOG_ID
	results=conn.execute(qeury)
	for row in results:
		print(row)","设置SQL语句（通过$BLOG_ID$查询POST中的ID）,通过$conn$执行SQL语句，for循环遍历所有的查询结果并将其打印。","Set the SQL statement (query the ID in the POST where the id of blog is $BLOG_ID$) , execute the SQL statement with $conn$, and query the for loop iterates through all the query results and print them."
11276,"import sqlalchemy
def test_evolve_compat(host,id):
	engine = sqlalchemy.create_engine(host)
	Session = sqlalchemy.orm.sessionmaker(bind=engine)
	session = Session()
	rows = session.execute(""SELECT COUNT(*) FROM stucco_evolution where id=:id"",{""id"":id}).fetchall()
	return rows",使用$host$获取数据库引擎，使用orm的sessionmaker绑定$engine$，然后通过Session方法执行SQL(根据$id$获取stucco_evolution中被计数方法处理过的所有列)并获取所有数据，最后返回查询结果,"Use $host$ to get the database engine, use orm's sessionmaker to bind $engine$, execute SQL through the Session method (get all the columns processed by the counting method in the stucco_evolution based on $id$), get all the data, and finally return the query result."
13253,"def select_value(conn, isbn):
	try:
		sql = ""SELECT * FROM books WHERE isbn =: isbn""
		results = conn.execute(sql,{""isbn"":isbn}).fetchall()
		return results
	except:
		return False",尝试使用$conn$执行SQL语句（根据$isbn$选取books表中的所有列）并在获取所有数据后返回。如果出现异常则返回False,Try to use $conn$ to execute the SQL statement (select all the columns in the books where isbn is $isbn$) and return with all the data. Returns False if an exception occurs.
11146,"def get_devtraffic_data(conn,user_id):
	s = ""SELECT * FROM user WHERE user_id={}"".format(user_id)
	userexin = conn.execute(s).fetchall()
	return userexin","设置SQL语句（使用format()函数格式化输出字符串,通过字符串$user_id$查询user表中的所有列）,使用$conn$连接执行SQL语句获取所有数据，并返回所获取的数据。","Set up the SQL statement（Use the format () function to format the output string and query all columns in the user where the id of user is $user_id$) , execute the SQL statement with the $conn$ connection to get all the data and return."
14256,"def api(conn, title):
	year = conn.execute(""SELECT year FROM tbook WHERE title = %s""%title).fetchall()
	if len(year) == 0:
		return None
	return year","通过$conn$连接执行SQL语句，内容为:通过$title$查询tbook表中的所有year数据,使用%操作符匹配SQL字符串中的条件。如果查询结果的长度为0，返回None。最后返回所有的查询结果。","Execute the SQL statement through the $conn$ connection, and the content is as follows: Query all year data in the tbook table through $title$, use % operator to match the conditions in the SQL string. Return None if the length of the query result is 0. Finally, return all the query results."
11417,"from sqlalchemy import create_engine
def test_fetchall(value):
	engine = create_engine()
	sql = ""SELECT * FROM cars WHERE value =: value""
	rows = engine.execute(sql,{""value"":value}).fetchall()
	assert len(rows) == 1",获取数据库引擎并建立连接。设置SQL语句（根据$value$查询cars表中所有列），执行sql并获取所有数据，设置断言判断查询结果长度是否等于1。,"Get the database engine and establish a connection. Set the SQL statement (query all the columns in the cars table based on $value$), execute the SQL and get all the data. Set the assertion to determine whether the query result length is equal to 1."
11569,"from sqlalchemy import create_engine
def main(DB, id):
	engine = create_engine(DB)
	connection = engine.connect()
	outs = connection.execute(""SELECT name FROM sample_table WHERE id = :id"", {""id"": id}).fetchone()
	return outs",通过$DB$获取数据库引擎并建立连接。执行SQL语句（根据$id$查询sample_table表中的第一条name数据），返回查询结果。,Get the database engine and establish a connection through $DB$. Execute the SQL statement (query the first name data in the sample_table table based on $id$) and return the query result.
11037,"from flask import request
def messages_inf(conn, channel, load_home):
	if request.method == 'POST':
		messages_res = conn.execute(""SELECT words FROM messages WHERE channel=:channel"",{""channel"":channel}).fetchall()
		print([row.values() for row in messages_res])
	else: 
		return load_home(channel)",如果request请求方法为POST，则使用$conn$执行SQL（根据$channel$获取messages表中的words信息）并获取所有数据。利用list将结果分开，并存储每个结果的values，打印处理后的结果。如果不是POST方法，则将$channel$传入$load_home$函数并返回。,"If the request method of request is POST, use $conn$ to execute SQL (get the words information in the messages table based on $channel$) and get all the data. Use list to separate the results, store the values of all result and print the dealt results. If it is not the POST method, pass $channel$ into the $load_home$ function and return."
11622,"def get_nonexistent_pokemon(conn,pid):
	query = conn.execute(""SELECT pokemon_id FROM sightings WHERE pokemon_id=:pid"",{""pid"":pid})
	db_ids = [r[0] for r in query.fetchall()]
	result = []
	for pokemon_id in range(1, 152):
		if pokemon_id not in db_ids:
			result.append(pokemon_id)
	return result","使用$conn$执行SQL（根据pokemon_id为$pid$获取sightings表中pokemon_id列），进一步使用for循环将获取所有数据结果的每一项的第0个元素存储为list类型，再使用for循环对范围为(1,152)中的每一个数字判断，如果不在list内容中，则将这些数字转化为list类型并返回","Use $conn$ to execute SQL (get the pokemon_id column in the sightings table where the pokemon_id is $pid$), further use for loop to store the 0th element of each item of the obtained data results as a list type, and then use for loop to judge each number in the range (1,152). If it is not in the list content, convert these numbers to the list type and return."
11629,"def get_users(session,uid):
	try:
		conn = session.connection()
		users = conn.execute(""select * from test_users where user_id=uid"",{""uid"":uid}).fetchall()
		return users
	except:
		pass",尝试使用$session$连接数据库并执行SQL（查询当user_id等于$uid$时，test_users表中的所有列）并获取所有数据，返回查询结果，否则通过,"Try to use $session$ to connect the database and execute SQL (get all the columns in the test_users table where user_id is $uid$), get all the data, and return the query results; otherwise, pass it."
13840,"def images(conn, id):
	irs = conn.execute(""SELECT * FROM sci_mod WHERE id =: id"", {""id"": id}).fetchall()
	for row in irs:
		print(row)
	return irs",使用$conn$连接查询sci_mod表中id为$id$的所有列，并获取全部数据，通过for循环遍历查询结果并打印，返回所有的查询结果。,Use $conn$ connection to query all columns in the sci_mod table with id as $id$ and get all the data. Use for loop iterate through the query results and print them. Return all the query results.
11396,"from flask import render_template, request
def search(conn,search):
	if request.method == ""POST"":
		rows = conn.execute(""select * from books where search =:search"", {""search"": search}).fetchone()
		return render_template(""search.html"", rows=rows)
	else:
		return render_template(""error.html"", message=""Sorry"")","如果请求方法为""POST""，使用$conn$执行SQL（根据$search$查询books表中的所有列），并获取第一条查询结果，返回渲染后的""search.html""页面，其中参数rows为查询结果，否则返回渲染后的""error.html""页面, 其中参数message设定为""Sorry""。","If the request method is ""POST"", use $conn$ to execute SQL (query all columns in the books table based on $search$), get the first query result, and return the rendered ""search.html"" page, where the parameter rows is the query result; otherwise, return the rendered ""error.html"" page, where the parameter message is set to ""Sorry""."
13764,"from flask import render_template
from sqlalchemy.sql import select
def listaCronologiaControllerWeb(conn,devices,controller):
	s = select(devices).where(devices.c.controller==controller)
	recordQuery = conn.execute(s).fetchall()
	return render_template(""story.html"", lista = recordQuery)","根据python表达式设置SQL：（根据$controller$查询$devices$表中所有列）。通过$conn$执行SQL并获取所有数据，返回渲染后的""story.html""页面，其中lista参数设置为查询结果。","Set SQL based on the python expression (query all columns in the $devices$ table based on $controller$). Execute SQL through $conn$, get all the data, and return the rendered ""story.html"" page, where the lista parameter is set to the query result."
13586,"def get_bars(conn,style):
	rs = conn.execute(""SELECT * FROM Bars where style=:style"",{""style"":style}).fetchall()
	rs=[dict(row) for row in rs]
	return rs","利用$conn$执行SQL（根据$style$查询Bars表中所有列），并获取所有查询结果，使用for循环将查询结果的每一条转化为dict,并以list存储，返回这个list。","Execute SQL with $conn$ (query all columns in the Bars table according to $style$), get all the query results, use for loop to convert each of the query results into dict, store them in list, and return this list."
11539,"from sqlalchemy.exc import SQLAlchemyError
def predict_by_knn(engine, p_code):
	conn = engine.connect()
	try:
		info = conn.execute(""SELECT * FROM policy WHERE p_code = :p_code"", {""p_code"": p_code}).fetchall()
		return info
	except SQLAlchemyError as e:
		print(e)",通过$engine$连接数据库。尝试性查询policy表中p_code为$p_code$的所有列，并获取所有数据，返回所有的查询结果。如果出现SQLAlchemyError异常，则打印异常信息。,"Connect to the database through $engine$. Try to query all columns in the policy table with p_code as $p_code$, get all data and return all query results. If SQLAlchemyError exception occurs, print the exception message."
13236,"from flask import jsonify
def select_value(db, isbn):
	sql = ""SELECT * FROM books WHERE isbn=:isbn""
	book = db.execute(sql,{""isbn"":isbn}).fetchall()
	if book is None:
		return jsonify({""error"": ""Invalid ISBN""})
	book_id = book['id']
	reviews = db.execute('SELECT * FROM reviews WHERE book_id=:book_id', {'book_id': book_id}).fetchall()
	count = 0
	if reviews is not None:
		for review in reviews:
			count += 1
	return jsonify({""title"": book['title'],""author"": book['author'],""review_count"": count})","step1: 设置SQL（根据$isbn$查询books的所有列），使用$db$执行SQL语句并获取所有查询结果。如果查询结果为None，则使用jsonify返回({""error"": ""Invalid ISBN""}。否则获取查询结果中的'id'对应的值。 step2: 使用$db$执行SQL（当book_id等于'id'对应的值时，查询reviews的所有列）并获取所有数据。如果获取到数据不为None，则使用for循环，统计行数。将step1中查询结果的'title'和'author'值分别作为字典中'title'和'author'关键字对应的值。字典中'review_count'对应的值为step2中对应的查询结果。最后使用jsonify返回处理后的字典。","SETP1: set SQL (query all the books columns where isbn is $isbn$) , execute the SQL statement with $DB$ and get all the query results. If the query result is None, then use jsonify to return ({""error"": ""Invalid ISBN""}. Otherwise, get the value corresponding to 'id' in the query result. SETP2: execute SQL using $db$(query all columns of reviews when the book_id equals the value of 'id') and fetch all the data. If the fetched data is not None, the for loop is used to count the rows. The 'title' and 'author' values of the query result in STEP1 are used as the corresponding values for the 'title' and 'author' keywords in the dictionary, respectively. The value of 'review_count' in the dictionary is the result of the query in STEP2. Finally, use jsonify to return the processed dictionary."
11621,"def gamecategorymap_id(conn, gid, cid):
	sql = ""SELECT gamecategorymap_id FROM GameCategoryMap WHERE game_id=:gid AND category_id=:cid""
	result = conn.execute(sql,{""gid"":gid,""cid"":cid}).fetchone()
	gamecategorymap_id = result[0] if result else None
	return gamecategorymap_id",使用$conn$执行SQL（获取GameCategoryMap表中game_id为$gid$和category_id为$cid$的gamecategorymap_id列）并获取第一行数据，如果结果为真则查询结果的第0个元素转化为list并返回，否则返回None,"Use $conn$ to execute SQL (get the gamecategorymap_id column in the GameCategoryMap table where game_id is $gid$ and category_id is $cid$) and get the first row of data. If the result is true, convert the 0th element of the query result to list and return; otherwise, return None."
14280,"from sqlalchemy import create_engine
from sqlalchemy.orm.session import sessionmaker
def init(db):
	engine = create_engine(db)
	DBSession = sessionmaker(bind=engine)
	session = DBSession()
	items = session.execute(""select NAMES from driver"").fetchall()
	return items",运用$db$获取数据库引擎。使用sessionmaker()创建一个配置过的DBSession类并通过bind绑定数据库引擎。实例化DBSession，然后执行SQL语句：查询driver表中的所有NAMES数据。返回查询结果。,"Use $db$ to get the database engine. Use sessionmaker () to create a configured DBSession class and bind the database engine through 'bind'. Instantiate DBSession, and then execute the SQL statement: Query all NAMES data in the driver table. Return the query results."
13007,"from sqlalchemy import create_engine
def test_minimal(sqlite, activities):
	e = create_engine(sqlite)
	data = e.execute(""SELECT * FROM myengine WHERE activities=:activities"",{""activities"":activities}).fetchall()
	return data",通过$sqlite$创建数据库引擎。使用引擎执行SQL（根据$activities$查询myengine表中的所有列）并获取所有数据。最后返回查询结果。,"Create the database engine through $sqlite$. Use the engine to execute SQL (query all columns in the myengine table based on $activities$) and get all the data. Finally, return the query result."
14073,"def test_sqlite3(conn):
	c = conn.cursor()
	result = c.execute(""select name from customer"").fetchall()
	print(result)
	return result",通过$conn$创建游标对象，并通过游标对象执行SQL：查询customer表中的所有name，打印查询结果并将其返回。,"Create a cursor object through $conn$, and execute a SQL through the cursor object: Query all the name in the customer table, print the query results and return them."
13581,"def get_active_stats(conn,value):
	result_proxy = conn.execute('SELECT * FROM active_stats where value=:value',{""value"":value}).fetchall()
	active_stats_df=[]
	for row in result_proxy:
		active_stats_df.append(row)
	return active_stats_df",利用$conn$执行SQL（根据$value$查询active_stats表中所有列），并获取所有查询结果，用for循环遍历获取的所有查询结果，将每条数据插入一个list中，并返回这个list。,"Execute SQL with $conn$ (query all columns in the active_stats table according to $value$), get all the query results, use for loop traverse all obtained query results, insert each piece of data into a list, and return the list."
11494,"from sqlalchemy import create_engine
def select_value(db_string, id):
	db = create_engine(db_string) 
	query_sql = ""SELECT * FROM tb_vendedores WHERE id =: id""
	vendedores = db.execute(query_sql,{""id"":id}).fetchall()
	return vendedores",通过$db_string$获取数据库引擎，设置SQL语句（根据$id$查询tb_vendedores表中所有列），执行sql并获取所有数据，将查询结果返回。,"Get database engine by $db_string$, set SQL statement (query all columns in tb_vendedores table based on $id$), execute SQL and get all the data. Return the query result."
14167,"def get_beers_name(engine):
	with engine.connect() as con:
		rs = con.execute(""SELECT name FROM Beer"").fetchall()
		return [row for row in rs]",使用with语句根据$engine$连接数据库。执行SQL语句:查询Beer表中的name信息，并获取所有数据，将查询结果存储为list并返回。,"Use the with statement to connect to the database based on $engine$. Execute the SQL statement: Query 'name' information in the Beer table, get all the data, store the query results as list and return."
11042,"def query_dynamic(engine,bike_stands,last_update,bikes):
	try:
		conn = engine.connect()
		sql =""SELECT number FROM bike_dynamic WHERE bike_stands=:bike_stands AND last_update=:last_update AND bikes=:bikes""
		bike = conn.execute(sql,{""bike_stands"":bike_stands,""last_update"":last_update,""bikes"":bikes}).fetchall()
		return bike
	except Exception as err:
		print (""An error occurred: "", err)","尝试执行如下代码：用$engine$获取连接；设置SQL：根据$bike_stands$,$last_update$和$bikes$查询bike_dynamic表中的number；执行SQL并获取所有数据；最后返回查询结果。如果出现异常，则将异常信息打印在""An error occurred: ""之后。","Try to execute the following code: get the connection with $engine$; set SQL: Query the number in the bike_dynamic table based on the $bike_stands$, $last_update$ and $bikes$; execute SQL and get all the data; finally, return the query results. If an exception occurs, the exception information should be printed after ""An error occurred:""."
13562,"from flask import render_template, request
def register(conn,password):
	if request.method == ""POST"":
		res=conn.execute(""select username from users where password=:password"",{""password"": password}).fetchall()
		return res
	else:
		return render_template(""register.html"")","如果请求方式为""POST""，利用$conn$执行SQL（根据$password$查询users表中username列），并获取所有查询结果，将查询结果返回。否则返回渲染后的""register.html""页面。","If the request method is ""POST"", use $conn$ to execute SQL (query the username column in the users table based on $password$), get all the query results, and return them. Otherwise, return the rendered ""register.html"" page."
13946,"def select_record(engine, id):
	conn = engine.connect()
	record_sql = ""SELECT * FROM sometable WHERE id =: id""
	result = conn.execute(record_sql,{""id"":id}).fetchall()
	assert len(result)!=0",使用$engine$连接数据库，设置SQL语句为：查询sometable表中id为$id$的所有列，执行SQL获取所有信息，设置断言判断执行结果的长度不为0.,"Use $engine$ to connect the database, set the SQL statement to: Query all the columns in the sometable table whose id is $id$, execute SQL, get all the information, and set the assertion to determine that the length of the execution result is not 0."
13939,"from sqlalchemy import create_engine
def search_default_table(url, id):
	engine = create_engine(url)
	sql = ""SELECT * FROM testtable WHERE id =: id""
	results = engine.execute(sql,{""id"":id}).fetchall()
	return results[0]",通过$url$获取数据库引擎。设置SQL语句（查询testtable表中id为$id$的全部列），执行SQL获取所有数据，返回执行结果的第0个元素。,"Get the database engine through $url$. Set the SQL statement (query all columns in the 'testtable' table where id is $id$), execute SQL, get all the data, and return the 0th element of the execution result."
13480,"from sqlalchemy.sql import select
def get_source(conn, counters, counter_id):
	sql = select([counters]).where(counters.c.counter_id == counter_id)
	results = conn.execute(sql).fetchall()
	assert len(results)!= 0",根据python表达式的方式执行SQL（获取$counters$表中counter_id为$counter_id$的所有列）并利用$conn$执行SQL获取所有数据，最后设置断言查询结果的长度不为0,Execute SQL based on the Python expression (get all columns in the $counters$ table with counter_id as $counter_id$) and use $conn$ to execute SQL to get all the data. Finally set the assertion that the length of the query result is not 0.
13830,"from flask import render_template
def book_flight(conn, flight_id):
	try:
		rs = conn.execute(""SELECT * FROM flights WHERE id =: id"", {""id"": flight_id}).fetchone()
		if rs:
			return render_template(""success.html"")
	except Exception as e:
		print(e)",尝试性使用$conn$查询flights表中id为$flight_id$的所有列，并获取第一条信息。如果查询结果存在，渲染并返回'success.html'；如果出现Exception，则打印异常信息。,"Try to use $conn$ to query all columns in the flights table with id as $flight_id$ and get the first piece of  message. If the query result exists, render and return 'success.html'; if Exception occurs, print the exception message."
14045,"from sqlalchemy import create_engine
from flask import jsonify
def get_state(db):
	engine = create_engine(db)
	conn = engine.connect()
	sql = ""select * from Alltypes""
	res = conn.execute(sql).fetchone()
	conn.close()
	return jsonify(res)",通过$db$获取数据库引擎并建立连接。执行SQL语句（查询Alltypes表中的所有列），执行SQL语句获取第一条数据，关闭数据库连接，返回jsonify处理后的查询结果。,"Get the database engine and establish a connection through $db$. Execute the SQL statement (query all the columns in the Alltypes table), execute the SQL statement to get the first piece of data, close the database connection, and return the query results after jsonify processing."
13937,"from sqlalchemy import create_engine
def index(localhost, value):
	engine = create_engine(localhost)
	connection = engine.connect()
	sql = ""SELECT user FROM mysql WHERE value =: value""
	results = connection.execute(sql,{""value"":value}).fetchall()
	connection.close() 
	return results",通过$localhost$获取数据库引擎并建立连接。设置SQL语句（根据$value$查询mysql表中的user数据），执行SQL获取所有数据，关闭数据库连接，返回执行结果。,"Get the database engine and establish a connection through $localhost$. Set the SQL statement (query the user data in the mysql table according to $value$), execute SQL to get all the data, close the database connection, and return the execution result."
13878,"def get_all_table_if_exists(session, db):
	try:
		query = ""SELECT table_name FROM tables WHERE db = :db""
		out = session.execute(query, {""db"": db}).fetchall()
		return [dict(row) for row in out]
	except Exception as e:
		print(e)
	finally:
		session.close()",尝试性设置SQL语句：使用$db$查询tables表中的table_name数据，使用$session$执行SQL语句并获取所有查询数据，将查询结果每一项转化为dict存储为list并返回。如果出现Exception异常，则打印异常信息，最后确保$session$关闭。,"Try to set up the SQL statement: Use $db$ to query the table_name data in the 'tables' table, use $session$ to execute the SQL statement and get all the query data. Convert each item of the query results into dict to store it as list and return it. If Exception occurs, print the exception message and finally make sure $session$ is closed."
13350,"def get_SSID_array(conn,trip_id):
	sql = ""SELECT pass_ssid FROM ssid_array WHERE trip_id=%s""%trip_id
	row = conn.execute(sql).fetchall()
	return row[0]","设置sql（根据$trip_id$查询ssid_array表中pass_ssid列）,使用$conn$执行SQL并获取所有查询结果，并返回查询结果的第0个数据。","Set up sql (query the pass_ssid column in the ssid_array table according to $trip_id$), use $conn$ to execute SQL, get all the query results, and return the 0th data of the query results."
13794,"def test_is_modified(conn,dirty):
	ch = conn.execute(""SELECT * from user_table WHERE dirty=:dirty"", {""dirty"": dirty}).fetchall()
	assert len(ch) > 0",利用$conn$执行SQL（根据$dirty$查询user_table表中所有列），并获取所有数据，设置断言判断查询结果长度是否大于0。,"Use $conn$ to execute SQL (query all columns in the user_table according to $dirty$), get all the data, and set the assertion to determine whether the query result length is greater than 0."
13738,"import csv
def main(conn):
	f = open(""flights.csv"")
	reader = csv.reader(f)
	for destination, duration in reader:
		query = conn.execute(""select * from flights where destination = :destination and duration = :duration"",{""destination"":destination,""duration"":duration}).fetchall()
		print(query)","利用open语句打开并读取文件""flights.csv""，使用for循环遍历读取的文件，并获取每一条destination, duration的值：使用$conn$执行SQL（根据destination, duration查询flights表中所有列），并获取所有查询结果，打印查询结果。","Open and read the file ""flights.csv"" with the 'open' statement, use for loop to traverse the read file, and get the value of each destination and duration: Use $conn$ to execute SQL (query all columns in the flights table according to destination and duration), get all the query results, and print them."
11515,"def test_basic_query(conn, name):
	q = ""SELECT * FROM one_row WHERE name = :name""
	rows = conn.execute(q, {""name"": name}).fetchall()
	assert len(rows) == 1
	assert len(rows[0]) == 1",设置SQL语句为：通过$name$查询one_row表中的所有列，使用$conn$连接执行SQL语句获取全部数据，设置断言判断返回结果的长度为1，设置断言判断返回结果的第0个元素的长度为1,"Set the SQL statement to: query all columns in the one_row table through $name$, use $conn$ connection to execute the SQL statement to get all the data, set the assertion to determine the length of the returned result to 1, set the assertion to determine the length of the 0th element of the returned result to 1"
11675,"from sqlalchemy import create_engine
def get_data(connection_string,name):
	engine = create_engine(connection_string)
	conn = engine.connect()
	try:
		datas = conn.execute(""select data from sql where name=:name"",{""name"":name}).fetchall()
		return datas
	finally:
		conn.close()",利用$connection_string$获取数据库引擎并连接数据库，尝试执行SQL（根据$name$获取sql表中的data列）并获取所有数据，返回查询结果，最终确保关闭连接,"Use $connection_string$ to get the database engine and connect the database, try to execute SQL (get the data column in the sql table according to $name$), get all the data, return the query results, and finally ensure that the connection is closed."
13596,"def event(conn,Event,col3):
	event = conn.query(Event.c.col5).filter(Event.c.col3==col3).all()
	event=[dict(row) for row in event]
	return event","使用ORM的方式，利用$conn$执行SQL（根据$col3$查询$Event$表中col5列），并获取查询到的所有数据，使用for循环将查询结果的每一条转化为dict,以list存储并返回。","Use ORM method and $conn$ to execute SQ (query the col5 column in the $Event$ table according to $col3$), get all the queried data, use for loop to convert each item of the query result into dict, store it in list and return."
11140,"def testBulkUpdate(engine,User,lastname):
	conn = engine.connect()
	values = conn.query(User).filter(User.lastname == lastname).fetchall()
	assert len(values)==2",通过$engine$连接数据库。使用ORM方式执行SQL语句，其内容为：根据$lastname$获取$User$表中的所有数据。设置断言判断返回结果的长度为2。,Connect to the database according to $engine$. Execute the SQL statement in ORM with the contents: get all the data in the $User$ based on $lastname$. Set the length of the result returned by the assertion determination to be 2.
11152,"from flask import request,render_template
def query_login(conn,username):
	if request.method==""GET"":
		return render_template(""login.html"")
	else: 
		my_login=conn.execute(""SELECT * FROM login WHERE username=:username"",{""username"":username}).fetchall()
		return my_login",如果request模块发送请求的方式为GET，渲染并返回'login.html'。否则，使用$conn$连接执行SQL（通过$username$查询login中的所有列）并获取所有数据，返回查询到的数据,"If the request module sends the request as GET, render and return 'login.html'. Otherwise, execute SQL (query all columns in login where username is $username$) using the $conn$ connection and get all the data back to the query."
13136,"def main(conn,isbn,title,author,year):
	res=conn.execute(""select isbn, title, author, year from books where isbn=:isbn and title=:title and author=:author and year=:year"",{""isbn"": isbn, ""title"": title, ""author"": author, ""year"": year}).fetchall()
	return res","使用$conn$执行SQL（根据$isbn$、$title$、$author$和$year$获取books表中的isbn, title, author, year四列数据）并获取所有数据，最后返回查询结果","SQL is executed with $conn$ (obtain isbn, title, author, year where isbn is $isbn$, title is $title$, author is $author$, year is $year$ in books) and all the data in four columns in the books) and return the result of the query."
11177,"from sqlalchemy.sql import select
def check_if_hash_in_db(conn,Media,hash):
	s = select(Media).where(Media.c.hash == hash)
	hash_row = conn.execute(s).fetchall()
	if hash_row:
		return hash_row
	else:
		return None",使用Python表达式的方式设置SQL语句（查询$Media$中hash为$hash$的所有信息），通过$conn$连接执行查询语句获取所有数据。如果查询结果存在，则返回所有的查询结果，否则返回None。,"Set up the SQL statement using a Python expression (query all information in $Media$ where hash is $hash$) and execute the query statement over a $conn$ connection to get all the data. If the query result exists, all query results are returned, otherwise None is returned."
13917,"from flask import render_template,request
def login(conn, user):
	if request.method == ""GET"":
		return render_template(""index.html"")
	else:
		sql = ""SELECT * FROM users WHERE user =: user""
		row = conn.execute(sql,{""user"":user}).fetchall()
		if len(row) != 1:
			return render_template(""index.html"")
		return render_template(""user.html"",user=row)","如果request模块发送请求的方式为GET，渲染并返回""index.html""，否则，设置SQL（通过$user$查询users表中的所有列），使用$conn$连接执行SQL获取所有数据。如果执行结果的长度不为1，渲染并返回""index.html""；否则渲染并返回""user.html"",其中user参数为执行结果。","If the request module sends the request in a GET way, render and return ""index.html""; otherwise, set SQL (query all columns in the users table through $user$), execute SQL and get all the data with the $conn$ connection. If the length of the execution result is not 1, render and return ""index.html""; otherwise, render and return ""user.html"", where the user parameter is the execution result."
13550,"def main(conn,destination):
	flights = conn.execute(""SELECT origin FROM flights where destination=:destination"",{""destination"":destination}).fetchall()
	for flight in flights:
		print(flight)",利用$conn$执行SQL（根据$destination$查询flights表中origin列），并获取所有查询结果，用for循环遍历打印所有查询结果。,"Execute SQL with $conn$ (query the origin column in the flights table according to $destination$), get all the query results, and use for loop traversal to print all the query results."
14087,"from flask import render_template
def login_attempt(conn, username, password):
	result = conn.execute('SELECT COUNT(id) FROM users WHERE USERNAME = :USERNAME AND PASSWORD = :PASSWORD', {'USERNAME': username, 'PASSWORD': password}).fetchone() 
	if result:
		return render_template('index.html')
	else:
		return render_template('login.html')",使用$conn$执行SQL：当USERNAME等于$username$和PASSWORD等于$password$时查询users表中的id数目，获取第一条数据。如果查询结果不为空，渲染并返回'index.html'；否则渲染并返回'login.html'。,"Use $conn$ to execute SQL: Query the number of id in the users table where  USERNAME is $username$ and PASSWORD is $password$ and get the first piece of data. If the query result is not empty, render and return 'index.html'; otherwise, render and return' login.html'."
13632,"from flask import jsonify
def get_tobs(db,date):
	data = db.execute(""SELECT tobs FROM Measurement where date=:date"",{""date"":date}).fetchall()
	list = []
	for record in data:
		list.append(record)
	return jsonify(list)",使用$db$执行SQL（根据$date$查询Measurement表中的tobs）并获取所有数据。使用for循环将查询结果每一项存储到list中，并使用jsonify返回处理后的list。,Execute the SQL using $db$ (query tobs in the Measurement table where date is $date$) and get all the data. Use A for loop to store each query result in a list and use jsonify to return the processed list.
13987,"from flask import render_template
def getSightings(engine, name):
	connection = engine.connect()
	sighting = connection.execute(""SELECT * FROM SIGHTINGS WHERE NAME = :NAME"",{""NAME"":name}).fetchall()
	finalList = []
	for i in sighting:
		finalList.append(i)
	connection.close()
	return render_template('sightings.html', sighting=finalList)",通过$engine$连接数据库。执行SQL语句：查询SIGHTINGS表中NAME为$name$的所有列，并获取全部数据。for循环将查询结果中的每一项元素都存储到list中，关闭数据库连接，渲染并返回'sightings.html'，其中sighting参数为list内容。,"Connect to the database through $engine$. Execute the SQL statement: Query all columns in the SIGHTINGS table with 'NAME': $name$ and get all the data. For loop stores every element in the query result in list. Close the database connection, render and return' sightings.html', where the sighting parameter is the list content."
13649,"def getToken(db,token_id):
	data = db.execute(""SELECT token1_id_str FROM pde_pool_pairs WHERE token_id=:token_id"",{""token_id"":token_id}).fetchall()
	result = []
	for i in data:
		result.append(i[0])
	return result",使用$db$执行SQL（根据$token_id$查询pde_pool_pairs表中的token1_id_str）并获取所有数据。使用for循环将查询结果中每一项的第0号元素存入list中并返回。,Execute the SQL using $db$ (query token1_id_str in the pde_pool_pairs based on $token_id$) and get all the data. Use the for loop to put element 0 for each item in the query result into the list and return.
11211,"def recarga_saldo(conn,saldo):
	res=conn.execute(""select clientes from table where saldo =: saldo "",{""saldo"":saldo}).fetchall()
	return res",使用$conn$执行SQL（根据$saldo$获取table中的clientes）并获取所有数据，返回查询结果。,"Use $conn$ to execute SQL (get the clientes in table based on $saldo$), get all the data and return the query result."
14255,"def all_seasons(engine, s_time):
	with engine.begin() as conn:
		res = conn.execute(""select s_id from seasons where s_time =:s_time"",{""s_time"":s_time}).fetchall()
		for each in res:
			print(each)
		return res",使用with语句根据$engine$连接数据库。使用$conn$查询seasons表中s_time为$s_time$的所有s_id。for循环遍历查询结果并打印，返回所有的查询结果。,"Use the with statement to connect to the database according to $engine$. Use $conn$ to query all s_id in the seasons table whose s_time is $s_time$. Use for loop traversal to query and print the results, and return them."
13720,"def fetchByQuery(conn,id):
	fetchQuery = conn.execute(""SELECT * FROM query where id = :id"",{""id"":id})
	for data in fetchQuery.fetchall():
		print(data)",利用$conn$执行SQL（根据$id$查询query表中所有列），用for循环遍历获取的所有查询结果，打印每一条查询数据。,"Execute SQL with $conn$ (query all columns in the query table according to $id$), use for loop to traverse all the obtained query results, and print each piece of query data."
13954,"def list_student(conn, name):
	sql = ""SELECT count(*) FROM wordlist WHERE student = :name""
	count = conn.execute(sql,{""name"":name}).fetchall()
	return count[0]",设置SQL语句为：查询wordlist表中student为$name$的所有列的数目，使用$conn$执行SQL获取所有数据，返回执行结果的第0个元素。,"Set the SQL statement: Query the number of all columns in the wordlist table where student is $name$, use $conn$ to execute SQL, get all the data, and return the oth element of the execution result."
13732,"def getTargetsByUUID(conn,Target, ids):
	values = conn.query(Target).filter(Target.ids == ids).all()
	if values == None:
		return False
	else:
		return values",使用ORM的方式，利用$conn$执行SQL（根据$ids$查询$Target$表中全部信息），并获取查询到的所有数据，如果查询结果为空，返回False，否则返回执行语句的结果,"Use the ORM method and $conn$ to execute SQL (query all the information in the $Target$ table according to $ids$), and get all the data queried. If the query result is empty, return False; otherwise, return the result of executing the statement."
11380,"def tabulate_checkins(conn,business_id,checkin_date):
	try:
		cur = conn.cursor()
		sql_command = ""select * from Checkins where business_id = :business_id and checkin_date = :checkin_date""
		res = cur.execute(sql_command, {""business_id"": business_id, ""checkin_date"": checkin_date}).fetchall()
		return res
	except Exception as error:
		print(error)
	finally:
		if conn is not None:
			conn.close()","尝试设置sql（根据$business_id$和$checkin_date$查询Checkins表中全部信息),使用$conn$执行SQL获取所有查询结果，并返回查询数据，如果执行时出现Exception异常，打印这个异常，最后如果连接非空，关闭连接。","Try to set up sql (query all the information in the Checkins table based on $business_id$ and $checkin_date$), use $conn$ to execute SQL to get all the query results and return the query data. Print this exception if an Exception occurs during execution, and finally close the connection if the connection is not empty."
11335,"def convert_default_arg(conn,CURRENT, flag):
	if flag.lower() == 'ture':
		sa = conn.execute(""select * FROM TIMESTAMP where CURRENT=:CURRENT"", {""CURRENT"": CURRENT}).fetchone()
		return sa
	elif flag.lower() == 'false':
		return False",如果字符串$flag$小写版本为'ture'，使用$conn$执行SQL（根据$CURRENT$查询TIMESTAMP表中的第一行数据），并将数据返回，如果字符串$flag$小写版本为'false'，返回False,"If the string $flag$ lowercase version is' ture', use $conn$ to execute SQL (query the first row of data in the TIMESTAMP table based on $CURRENT$) and return the data. If the string $flag$ lowercase version is' false', return False."
11375,"from sqlalchemy.sql import select
def actualizar_estado(session, id_ejer_det, estado):
	sql = select(id_ejer_det).where(id_ejer_det.c.estado == estado)
	jie = session.execute(sql).fetchall()
	session.close()
	return jie",根据python表达式设置sql（根据$estado$查询$id_ejer_det$表中所有列），使用$session$执行并获取所有数据，关闭连接，并将数据返回。,"Set sql according to the python expression (query all columns in the $id_ejer_det$ table based on $estado$), use $session$ to execute and get all the data, close the connection, and return the data."
13425,"from flask import render_template
def search(conn, username):
	if not username:
		return render_template(""error.html"")
	user = conn.execute(""SELECT email FROM users WHERE username = :username"",{""username"": username}).fetchone()
	if user is not None:
		return user","如果对$username$取反，则返回渲染后的""error.html""，然后使用$conn$执行SQL（根据$username$获取users表中的email列）并获取第一条数据，如果查询结果不为None，则返回查询结果","If invert $username$, return the rendered ""error.html"", then use $conn$ to execute the SQL (get the email column in the users table based on $username$) and get the first piece of data. If the query result is not None, then return the query result."
14170,"def user_loader(conn, username):
	result = conn.execute(""SELECT * FROM usertable WHERE username = :username"", {""username"": username}).fetchone()
	return result",通过$conn$执行SQL语句，内容为：根据$username$查询usertable表中的所有列并获取第一条数据，返回获取的结果。,"Execute the SQL statement via $conn$: Query all columns in the usertable table based on $username$, get the first piece of data and return the obtained result."
13508,"def get_sample_data(engine,table):
	connection = engine.connect()
	try:
		statement = ""SELECT column FROM database where table=:table""
		result = connection.execute(statement,{""table"":table}).fetchall()
		return result
	finally:
		connection.close()",通过$engine$连接数据库。尝试设置SQL语句（根据$table$查询database表中column列），执行SQL并获取所有数据，将查询结果返回，最后关闭连接。,"Connect the database through $engine$. Try to set up the SQL statement (query the 'column' column in the database table according to $table$), execute SQL, get all the data, return the query results, and finally close the connection."
11604,"def main(db,isbn,title,year):
	authers = ""SELECT auther FROM books WHERE isbn=:isbn AND title=:title AND year=:year""
	authers = db.execute(authers,{""isbn"":isbn,""title"":title,""year"":year}).fetchone()
	return authers",使用$db$执行SQL（根据$isbn$、$title$和$year$获取books表中的auther列）并获取第一条数据，最后返回查询结果,"Use $db$ to execute SQL (get the auther column in the books table based on $isbn$, $title$ and $year$), get the first piece of data, and finally return the query result."
13481,"from flask import render_template
def book(conn, isbn):
	book = conn.execute(""SELECT * FROM books WHERE isbn = :isbn"", {""isbn"": isbn}).fetchone()
	if book is None:
		return render_template(""error.html"")
	else:
		return render_template(""book.html"", book=book)","使用$conn$执行SQL（根据$isbn$获取books表中的所有列）并获取第一条数据，如果查询结果是None，则返回渲染后的""error.html""，否则返回渲染后的""book.html""，其中book参数为查询结果","Use $conn$ to execute SQL (get all columns in the books table based on $isbn$) and get the first piece of data. If the query result is None, then return the rendered ""error.html"", otherwise return the rendered ""book.html"", where the book parameter is the query result."
11581,"def test_raw_sql(conn, email):
	out = conn.execute(""SELECT name FROM users WHERE email = :email"", {""email"": email}).fetchone()
	assert out != []
	return out",使用$conn$执行SQL语句（根据$email$查询users中的第一条name数据），设置断言判断返回结果不为空list，最后返回查询到的数据。,"Use $conn$ to execute the SQL statement (query the first name data in the users based on $email$), set the assertion to determine that the return result is not the empty list, and finally return the queried data."
11315,"def main(conn,title,author,pub_year):
	try:
		sql = ""select user from books where title = :title and author = :author and pub_year = :pub_year""
		feel = conn.execute(sql, {""title"": title, ""author"": author,""pub_year"":pub_year}).fetchall()
		return feel
	except ValueError:
		print('error')",尝试使用$conn$执行SQL（根据$title$，$author$和$pub_year$查询books表中user列的所有数据），并返回查询结果。如果执行时出现ValueError异常，则输出error。,"Try to use $conn$ to execute SQL (query all data in the user column of the books table based on $title$,$author$ and $pub_year$) and return the query results. If a ValueError exception occurs during execution, output error."
11659,"def query(eng,taglist,code_no):
	conn = eng.connect()
	rows = conn.execute(taglist.select(taglist.c.tab).where(taglist.c.code_no==code_no)).fetchall()
	for row in rows:
		print(row)",使用$eng$连接数据库并根据python表达式的方式执行SQL（获取$taglist$表中code_no为$code_no$的tab列）并获取所有数据，然后使用for循环打印查询结果的每一项,"Use $eng$ to connect the database and execute SQL according to the python expression (get the tab column in the $taglist$ table whose code_no is $code_no$), get all the data, and then use for loop to print each item of the query result."
13682,"from flask import jsonify
def api(db,isbn):
	review_info = db.execute(""SELECT AVG(rating) FROM reviews WHERE isbn=:isbn"",{""isbn"":isbn}).fetchall()
	review_count = review_info[0][1]
	average_score = review_info[0][0]
	json_info = {""review_count"": review_count, ""average_score"": average_score}
	return jsonify(json_info)",使用$db$执行SQL（根据$isbn$查询reviews表中rating的平均值）并获取所有数据。将查询结果中[0][1]号元素存储为字典中review_count对应的值，第[0][0号元素存储为]字典中average_score对应的值，最后返回使用jsonify处理后的字典。,"Execute the SQL using $db$ (query the average rating in the reviews table where isbn is $isbn$) and get all the data. The [0][1] element is stored as the value of review_count in the dictionary, the [0][0] element is stored as the value of average_score in the dictionary, and finally return the processed dictionary using jsonify."
13400,"from sqlalchemy.sql import select
def getUser(conn,tbl_user,key):
	s = select([tbl_user]).where(tbl_user.c.UID == key)
	recs = conn.execute(s).fetchall()
	return [item for item in recs]",根据python表达式设置SQL：（根据UID为$key$查询$tbl_user$表中所有列）。通过$conn$执行SQL并获取所有数据，使用for循环遍历每一项查询结果，并存储为list，最后返回这个list。,"Set SQL based on the python expression (query all columns in the $tbl_user$ table based on the condition that UID is $key$). Execute SQL with $conn$, get all the data, use for loop to traverse each query result, store it as list, and finally return the list."
14284,"def get_movies_count(engine):
	with engine.connect() as conn:
		query = 'select count(movieID) from movies'
		result = conn.execute(query).fetchall()[0]
		return result",使用with语句根据$engine$连接数据库。设置SQL语句：查询movies表中的movieID数目。执行SQL获取所有数据的第0个元素，返回执行结果。,Use the with statement to connect the database according to $engine$. Set the SQL statement: Query the number of movieID in the movies table. Execute SQL to get the 0th element of all the data and return the execution result.
14176,"from sqlalchemy.sql import select ,func
def make_query_sum(connection, cookies):
	s = select([func.count(cookies.c.cookie_name)])
	result = connection.execute(s).fetchone()
	print(result)
	return result",使用Python表达式的方式设置SQL语句，其内容是：查询$cookies$表中的cookie_name数目，通过$connection$执行SQL获取第一条数据，打印获取的数据并将其返回。,"Use the Python expression to set up the SQL statement: Query the number of cookie_names in the $cookies$ table, execute the SQL via $connection$ to get the first piece of data, print the obtained data and return."
13753,"def player_id(conn,player):
	sql = 'SELECT player_id FROM Players WHERE player=:player'
	result = conn.execute(sql, {""player"":player}).fetchall()
	player_id = result[0][0] if result else None
	return player_id","设置sql（根据$player$查询Players表中player_id列）,使用$conn$执行SQL并获取所有查询结果，如果获取到查询结果，返回第0条的第0个元素。否则返回None。","Set up sql (query the player_id column in the Players table according to $player$), use $conn$ to execute SQL and get all the query results. If the query result is obtained, return the 0th element of article 0; otherwise, return None."
13418,"def select_value(conn, name):
	sql = ""SELECT fullname FROM User WHERE name =: name""
	results = conn.execute(sql,{""name"":name}).fetchall()
	fullname = []
	for i in results:
		fullname.append(i)
	return fullname",使用$conn$执行SQL（根据$name$获取User表中的fullname列）并获取所有数据，然后使用for循环对查询结果的每一项存储为list，最后返回list内容,Use $conn$ to execute the SQL (get the fullname column in the User table based on $name$) and get all the data. Then use for loop to store each item of the query result as list and finally return the contents of list.
13749,"def main(conn,flight_id):
	passengers = conn.execute(""SELECT name FROM passengers WHERE flight_id=:flight_id"",{""flight_id"": flight_id}).fetchall()
	if len(passengers)==0:
		print(""fail"")
	for passenger in passengers:
		print(passenger.name)","利用$conn$执行SQL（根据$flight_id$查询passengers表中name列），并获取所有数据，如果查询结果长度等于0，输出""fail""，否则用for循环遍历获取的所有查询结果，并输出每一条查询结果的name字段。","Use $conn$ to execute SQL (query the name column in the passengers table according to $flight_id$) and get all the data. If the query result length is equal to 0, output ""fail""; otherwise, use for loop to traverse all the query results and output the name field of each query result."
13958,"def select_value(conn, channel_name):
	sql = ""SELECT creator FROM channels WHERE channel_name =: channel_name""
	results = conn.execute(sql,{""channel_name"":channel_name}).fetchall()
	print(results)",设置SQL语句（查询$channels$表中channel_name为$channel_name$的creator信息）。使用$conn$执行SQL语句并获取所有查询结果。最后打印查询结果。,"Set the SQL statement (query the creator information in the $channels$ table where channel_name is $channel_name$). Use $conn$ to execute the SQL statement, get all the query results and print them."
13142,"def update(conn,adcode):
	sql = ""select polyline from boundary_data WHERE adcode =: adcode""
	res=conn.execute(sql,{""adcode"":adcode}).fetchall()
	return res",使用$conn$执行SQL（根据$adcode$获取boundary_data表中的polyline列）并获取所有数据，最后返回查询结果,"Execute the SQL (get the polyline column in the boundary_data table where adcode is $adcode$) with $conn$, get all the data, and return the query results."
13808,"import sqlalchemy
def get_dag_data(AIRFLOW_SQL_ALCHEMY_CONN_KEY, tag):
	engine = sqlalchemy.create_engine(AIRFLOW_SQL_ALCHEMY_CONN_KEY)
	data = engine.execute(""SELECT COUNT(*) FROM dag WHERE tag = :tag"", {""tag"": tag}).fetchone()
	return data",通过$AIRFLOW_SQL_ALCHEMY_CONN_KEY$获取数据库引擎。执行SQL语句（查询dag表中tag为$tag$的所有列的数目）并获取第一条数据，返回查询结果。,Get the database engine through $AIRFLOW_SQL_ALCHEMY_CONN_KEY$. Execute SQL statement (query the number of all columns in the dag table with tag as $tag$) and get the first piece of data. Return the query results.
11359,"def updateWebsite(conn,WName, PCode):
	engine = conn.execute('SELECT idProduct FROM Product WHERE WName =:WName and PCode=:PCode', {""WName"": WName,""PCode"":PCode}).fetchall()
	return [i for i in engine]",使用$conn$执行SQL（根据$WName$和$PCode$查询Product表中idProduct列的所有数据），并使用for循环遍历每一项查询结果，将数据逐条插入list返回。,"Use $conn$ to execute SQL (query all the data in the idProduct column of the Product table based on $WName$ and $PCode$), use for loop to traverse each query result, insert the data one by one into the list and return."
11423,"def selectOperate(conn, name):
	cursor = conn.cursor()
	sql = ""SELECT * FROM user_table WHERE name =: name""
	cursor.execute(sql,{""name"":name})
	conn.commit()
	print (""Total records of rows updated :"", cursor.rowcount)","通过$conn$建立游标，设置sql（根据$name$查询user_table表中全部信息）,执行SQL与提交操作，打印""Total records of rows updated :""与游标的rowcount属性。","Create cursor by $conn$, set SQL (query all information in user_table table based on $name$), execute SQL and commit operation, print ""Total records of rows updated :"" and 'rowcount' attribute of cursor."
13220,"def sqlite3_via_names(conn):
	results = conn.execute('SELECT * FROM table_name').fetchall()
	for row in results:
		print(row)",使用$conn$执行SQL语句（查询table_name的所有列），使用for循环打印查询结果中的每一项。,Execute the SQL statement (query all the columns of the table_name) with $conn$ and print each item in the query result using the for loop.
11579,"from flask import render_template, request
def book_info(conn, bid):
	if request.method == ""POST"":
		book_out = conn.execute(""SELECT author FROM books WHERE bid = :bid"", {""bid"": bid}).fetchone()
		return render_template(""book.html"", bookInfo=book_out)
	else:
		return render_template(""error.html"")","如果request模块发送请求的方式为post，则使用$conn$连接执行SQL（通过$bid$查询books中的第一条author数据），渲染并返回""book.html""，其中bookInfo参数为查询结果；否则渲染并返回""error.html""。","If the request module sends the request in a post method, use the $conn$ connection to execute SQL (query the first author data in the books through $bid$), render and return ""book.html"", where the bookInfo parameter is the query result; otherwise, render and return ""error.html""."
13692,"def getBookName(db,isbn):
	book_names = db.execute(""SELECT name FROM books WHERE isbn=:isbn"",{""isbn"":isbn}).fetchall()
	if book_names is None:
		return ""Error""
	return [n for n in book_names]","使用$db$执行SQL（根据$isbn$查询books表中的name信息）并获取所有数据。如果查询结果为None，则返回""Error""。否则使用list形式返回查询结果。","Execute the SQL using $db$(query the information of name in the books where isbn is $isbn$) and get all the data. If the result of the query is None, return Error. Otherwise, return the query as a list."
13456,"from sqlalchemy.sql import select
def getUserAttributes(conn, jUserAttrs, uid):
	sql = select([jUserAttrs]).where(jUserAttrs.c.user_id == uid)
	res = conn.execute(sql)
	for row in res:
		print(row)",使用python表达式的方式，通过$conn$执行SQL（获取$jUserAttrs$表中user_id为$uid$的所有列），然后使用for循环打印查询结果的每一项,Use the Python expression to execute SQL through $conn$ (get all columns in the $jUserAttrs$ table with user_id as $uid$). Then use for loop to print each item of the query results.
11046,"from flask import render_template,redirect,url_for
def settings(eng,ip,session):
	if session.get('logged_in'):
		with eng.connect() as conn:
			result = conn.execute(""SELECT * FROM logs WHERE ip=:ip"",{""ip"":ip}).fetchall()
			return render_template('settings.html', logs=result)
	return redirect(url_for('login'))",如果$session$获取到了logged_in的信息，则通过$eng$获取连接。执行SQL(根据$ip$查询logs表中的所有列)并获取所有数据，将查询结果传入logs参数为并返回渲染后的'settings.html'页面。如果没有获取到logged_in则通过url_for和redirect返回到'login'页面。,"If $session$ gets the information about logged_in, get the connection through $eng$. Execute SQL (query all columns in the logs table according to $ip$), get all the data, pass the query result into the logs parameter and return the rendered 'settings.html' page. If the logged_in is not obtained, return the 'login' page through url_for and redirect."
13766,"from sqlalchemy.sql import select
def get_article_publication(conn,articles_table,articleID):
	s = select(articles_table).where(articles_table.c.articleID==articleID)
	result = conn.execute(s)
	print(result.rowcount)",根据python表达式设置SQL：（根据$articleID$查询$articles_table$表中所有列）。通过$conn$执行SQL，返回查询结果的rowcount字段。,Set SQL based on the python expression (query all columns in the $articles_table$ table based on $articleID$). Execute SQL through $conn$ and return the rowcount field of the query result.
14300,"from sqlalchemy.sql import select
def query_table(lite_engine,table,name):
	with lite_engine.begin() as con:
		rows = con.execute(select([table.c.id])).where(table.c.name == name).fetchall()
		return rows","使用with语句根据$lite_engine$连接数据库。使用Python表达式的方式执行SQL语句（根据$name$查询$table$表中所有id数据）,返回执行结果。",Use the with statement to connect to the database according to $lite_engine$. Use the Python expression to execute the SQL statement (query all the id data in the $table$ table based on $name$) and return the execution result.
13558,"from sqlalchemy.sql import select
def get_scan(con, scans, date):
	if date:
		query = select([scans.c.time]).where(scans.c.date == date)
		res = con.execute(query).fetchall()
		result_dicts = []
		for row in res:
			result_dicts.append(dict(row))
		return result_dicts",根据python表达式设置SQL：（根据$date$查询$scans$表中time列）。通过$con$执行SQL并获取所有数据，使用for循环将每一项查询结果转化为dict，并存储为list，最后返回这个list。,"Set SQL based on the python expression (query the time column in the $scans$ table based on $date$). Execute SQL through $con$ and get all the data, use for loop to convert each query result to dict, store it as list, and finally return this list."
11439,"from sqlalchemy.exc import SQLAlchemyError
def make_pledge(conn,amount,user_id):
	try:
		events = conn.execute(""SELECT * FROM event WHERE amount = :amount and user_id = :user_id"",{""amount"": amount, ""user_id"": user_id}).fetchall()
		return [rs for rs in events]
	except SQLAlchemyError as e:
		print(str(e))",尝试使用$conn$执行SQL（根据$amount$和$user_id$查询event表中所有列），并获取所有数据，使用for循环将查询结果的每一条存储进一个list中。如果执行时出现SQLAlchemyError异常，则打印转为字符串形式的异常名称。,"Try to use $conn$ to execute SQL (query all columns in the event table based on $amount$ and $user_id$) and get all the data. Use for loop to store each piece of query results in a list. If a SQLAlchemyError exception occurs during execution, print the exception name as a string."
11548,"def test_inheritance(conn, id):
	try:
		numbers = conn.execute(""SELECT * FROM Class WHERE id = :id"", {""id"": id}).fetchall()
		return numbers
	except AttributeError:
		raise Exception(""must fail"")","尝试性使用$conn$查询Class表中id为$id$的所有列，并获取所有数据，返回查询结果。如果出现AttributeError异常，则使用raise抛出异常并通过Exception()附带异常信息""must fail""。","Try to use $conn$ to query all columns in the Class table with id as $id$ and get all the data and return the query result. If an AttributeError exception occurs, use raise to throw the exception and attach the exception message ""must fail"" through the Exception ()."
11366,"def generate_abridged_index_set(conn,rarity,layout):
	query = conn.execute(""SELECT * FROM artist where rarity=:rarity and layout=:layout"", {""rarity"": rarity,""layout"":layout}).fetchall()
	new_card_set = []
	for i in query:
		new_card_set.append(i)
	return new_card_set",使用$conn$执行SQL（根据$rarity$和$layout$查询表artist中全部信息的所有查询结果），并使用for循环将数据逐条插入一个list中，返回这个list。,"Use $conn$ to execute SQL (query all the query results of all the information in the artist table based on $rarity$ and $layout$), use for loop to insert the data one by one into a list, and return this list."
13181,"def dashboard(conn,username):
	query = conn.execute('select * from results where username=:username',{""username"":username})
	all_results = query.fetchall()
	return all_results",使用$conn$执行SQL（根据$username$获取results表中的所有列）并获取所有数据，最后返回查询结果,"Execute the SQL (get all the columns in the results where the name of user is $username$) with $conn$, get all the data, and return the query results."
13603,"from flask import jsonify
def books_api(db,isbn):
	sql = ""SELECT title FROM books WHERE isbn = :isbn""
	book_info = db.execute(sql,{""isbn"": isbn}).fetchone()
	if book_info == None:
		return jsonify({""error"":""Invalid isbn""})
	return jsonify(book_info)","设置SQL：根据$isbn$查询books表中的title信息。使用$db$执行SQL并获取第一条数据。如果查询结果等于None，则返回序列化后的{""error"":""Invalid isbn""}。否则返回序列化后的查询结果。","Set up SQL: Query the title information in the books table where isbn is $isbn$. Use $db$ to execute SQL and get the first data. If the query result is equal to None, then return to the serialized {""error"":""Invalid isbn""}. Otherwise, return to the serialized query result. "
13286,"def search_book_id(conn):
	book_ids = conn.execute(""SELECT book_id FROM book"").fetchall()
	for i in book_ids:
		print(i)",使用$conn$执行SQL语句（获取book表中的book_id列），获取所有数据并使用for循环打印查询结果中的每一项,"Execute the SQL statement with $conn$ (get the book_id column in the book) , get all the data, and print each item in the query results using the for loop."
13893,"def test_do(conn, addend1, addend2):
	res = conn.execute(""SELECT * FROM database WHERE addend1 = :addend1 AND addend2 = :addend2"", {""addend1"": addend1, ""addend2"": addend2}).fetchall()
	res_list = []
	for row in res:
		res_list.append(row)
	return res_list",使用$conn$执行SQL语句，其内容为：根据$addend1$和$addend2$查询database中的所有列，并获取全部数据。使用for循环将查询结果中的每一项元素都存储到list中并将list内容返回。,Execute the SQL statement using $conn$ with the following contents: Query all the columns in the database based on $addend1$ and $addend2$ and get all the data. Use for loop to store each element of the query results in the list and return the contents of the list.
13872,"from flask import render_template
def search(conn, title, author, year):
	selections = conn.execute(""SELECT * FROM books WHERE title = :title AND author = :author AND year = :year"", {""title"": title, ""author"": author, ""year"": year}).fetchall()
	return render_template('list_selections.html', selections=selections)","通过$conn$执行SQL语句：根据$title$、$author$和$year$查询books表中的所有列，并获取全部数据，渲染并返回'list_selections.html', 其中selections参数为查询结果。","Execute SQL statement through $conn$: Query all columns in the books table based on $title$, $author$ and $year$ and get all the data. Render and return 'list_selections.html', where the selections parameter is the query result."
11153,"def query_page(session,typeslice):
	conn = session.connection()
	try:
		data =conn.execute(""SELECT * FROM tooth WHERE typeslice=:typeslice"",{""typeslice"":typeslice}).fetchall()
		return data
	except:
		return False","通过$session$连接数据库。尝试执行SQL语句（根据$typeslice$获取tooth表中的所有列）并获取所有数据,返回所有的查询结果。如果出现异常则返回False。","Connect to the database according to $session$. Try to execute the SQL statement (get all the columns in the tooth  where typeslice is $typeslice$) and get all the data, return all the query results. Return False if an exception occurs."
11068,"def query_PostGres(conn,mtr):
	try:
		res = conn.execute(""SELECT * FROM merged_imw WHERE mtr=:mtr"",{""mtr"":mtr}).fetchall()
		return res 
	except Exception:
		pass",尝试性使用$conn$执行SQL（根据$mtr$查询merged_imw表中所有列）并获取所有数据，返回查询结果。如果出现异常，则直接pass。,"Try to use $conn$ to execute SQL (query all columns in the merged_imw table based on $mtr$), get all the data, and return the query results. If an exception occurs, pass directly."
13139,"def test_strlen(conn,name):
	sql = ""SELECT name FROM accounts where username=:name""
	result=conn.execute(sql,{""name"":name}).fetchall()
	assert result != []",使用$conn$执行SQL（根据username为$name$获取accounts表中的name列）并获取所有数据，然后设置断言查询结果不等于list类型,"Execute the SQL with $conn$ (get the name column in the accounts where the username is $name$) and get all the data, then set the assertion query result not equal to the list type."
13719,"import sqlalchemy
def tearDown(db_uri,name):
	engine = sqlalchemy.create_engine(db_uri)
	conn = engine.connect()
	e = conn.execute(""SELECT * FROM database WHERE name= :name"", {""name"": name}).fetchall()
	conn.close()
	return e",通过$db_uri$获取数据库引擎并建立连接。执行SQL语句（根据$name$查询database表中所有列），并获取所有数据，关闭连接，将查询结果返回。,"Get the database engine and establish a connection through $db_uri$. Execute the SQL statement (query all the columns in the database table according to $name$), get all the data, close the connection, and return the query results."
13034,"from sqlalchemy.sql import select
def query_email(conn,users,user_id):
	query = select(users.c.email).where(users.c.id == user_id)
	res = conn.execute(query)
	return res.rowcount == 1",使用python表达式的方式设置SQL（查询当id为$user_id$时$users$表中的email信息）。使用$conn$执行SQL，返回执行结果的rowcount属性等于1的判断结果。,"Use the way of a python expression to set SQL (query the email information in the $users$ table when id is $user_id$). Use $conn$ to execute SQL, return the judgment result that the rowcount attribute of the execution result is equal to 1."
11015,"def create_user(conn,tab_name):
	cursor = conn.cursor()
	idtext = cursor.execute(""SELECT id FROM tableName WHERE tab_name=:tab_name"",{""tab_name"":tab_name}).fetchall()
	print(cursor.rowcount)
	cursor.close()
	conn.commit()
	conn.close()
	return idtext",通过$conn$创建游标，并通过游标执行SQL：根据$tab_name$查询tableName表中的所有id。打印查询结果的行数并关闭索引器。通过$conn$提交，关闭连接并返回结果。,"Create cursor via $conn$ and execute SQL via cursor: Query all ids in tableName table based on $tab_name$. Print number of rows of query result and close indexer. Commit via $conn$, close the connection and return the results."
13457,"from flask import render_template
def search(conn, isbn):
	sql = ""SELECT title FROM books WHERE isbn =: isbn""
	rows = conn.execute(sql,{""isbn"":isbn})
	if rows.rowcount == 0:
		return render_template(""error.html"")
	books = rows.fetchall()
	return render_template(""results.html"", books=books)","通过$conn$执行SQL（根据$isbn$获取books表中的title列），如果查询结果的行数为0，则返回渲染后的""error.html""，然后获取所有查询数据，最后返回渲染后的""results.html""，其中books参数为所有查询数据","Execute the SQL through $conn$ (get the title column in the books table based on $isbn$). If the number of rows of the query result is 0, return the rendered ""error.html"". Then get all the query data and finally return the rendered ""results.html"", where the books parameter is all the query data."
14166,"def flight(connection, flight_id):
	flight = connection.execute(""SELECT * FROM flights WHERE id = :id"", {""id"": flight_id}).fetchone()
	if flight is None:
		return None
	return flight",通过$connection$执行SQL语句：查询flights表中id为$flight_id$的所有列，并获取第一条数据。如果获取数据为空，返回None；否则返回获取的数据。,"Execute the SQL statement via $connection$: Query all columns in the flights table whose 'id' is $flight_id$ and get the first piece of data. If the obtained data is empty, return None;; otherwise, return the obtained data."
13777,"from sqlalchemy import create_engine
from sqlalchemy.orm.session import sessionmaker
def read_table_by_sql(db_algorithms,maker):
	engine = create_engine(db_algorithms)
	Session = sessionmaker(bind=engine)
	session = Session()
	row = session.execute(""SELECT engine FROM Sess WHERE maker = :maker "", {""maker"": maker})
	return row.fetchall()",通过$db_algorithms$获取数据库引擎，进一步获取Session对象。执行SQL语句（根据$maker$查询Sess表中engine列），返回获取的所有数据。,Get the database engine through $db_algorithms$ and further get the Session object. Execute the SQL statement (query the engine column in the Sess table according to $maker$) and return all the obtained data.
11070,"from flask import jsonify
def review_api(conn,average_score):
	review=conn.execute(""SELECT review_count FROM book WHERE average_score=:average_score"",{""average_score"":average_score}).fetchone()
	if review is None:
		return jsonify({""error"": ""Invalid""})
	return review","使用$conn$执行SQL（根据$average_score$查询book表中的review_count）并获取第一条数据。如果查询结果为None，则返会序列化后的{""error"": ""Invalid""}，否则返回查询结果。","Use $conn$ to execute SQL (query the review_count in the book table based on $average_score$) and get the first piece of data. If the query result is None, return the serialized {""error"": ""Invalid""}. Otherwise, return the query result."
13026,"from flask import request, render_template
def book(conn,book_id):
	if request.method == ""POST"":
		bookone = conn.execute(""SELECT onename FROM books WHERE id = :book_id"", {""book_id"": book_id}).fetchone()
		return render_template(""details.html"", bookone=bookone)","如果request的请求方法为""POST""，则使用$conn$执行SQL（查询当id等于$book_id$时，books表中的onename）并获取第一条数据。返回渲染后的""details.html""，并将查询结果传给bookone参数。","If the request method of request is ""POST"", use $conn$ to execute SQL (query the onename in the books table when id equals $book_id$) and get the first piece of data. Return the rendered ""details.html"" and pass the query result to the bookone parameter"
11637,"from sqlalchemy import create_engine
def get_temperatures(baasu,lat):
	db = create_engine(baasu)
	json_temps = db.execute(""select * from Temperature_table where lat=:lat"",{""lat"":lat}).fetchall()
	return json_temps",通过$baasu$获取数据库引擎并执行SQL（根据$lat$获取Temperature_table表中的所有列）并获取所有数据，最后返回查询结果,"Get the database engine through $baasu$ and execute SQL (get all the columns in the Temperature_table according to $lat$), get all the data, and finally return the query result."
13914,"from flask import jsonify
def getStudentInfo(conn, username):
	sql = ""SELECT hours FROM student WHERE username =: username""
	res = conn.execute(sql,{""username"":username}).fetchall()
	if (len(res) > 0):
		hours = str(res[0].hours)
		name = str(res[0].name)
	results = {""hours"": hours, ""name"": name}
	return jsonify(results)","设置SQL语句：通过$username$查询student表中的hours数据，使用$conn$连接执行SQL获取所有数据，如果执行结果的长度大于0，将执行结果第0个元素的hours和name都转化为str，将转化为str类型的结果分别作为""hours""和""name""对应的值，并使用jsonify返回。","Set the SQL statement: Query the hours data in the student table through $username$, use the $conn$ connection to execute SQL and get all the data. If the length of the execution result is greater than 0, convert the hours and name of the 0th element of the execution result to str, take the results converted to str type as the corresponding values of ""hours"" and ""name"" respectively, and use jsonify to return."
13540,"from sqlalchemy.sql import select
def fill_candidates(candidates, conn,name):
	clause =select([candidates.c.surname]).where(candidates.c.name==name)
	res=conn.execute(clause).fetchall()
	return res",根据python表达式设置SQL：（根据$name$查询$candidates$表中surname列）。通过$conn$执行SQL并获取所有数据，返回查询结果。,"Set SQL based on the python expression (query the surname column in the $candidates$ table based on $name$). Execute SQL through $conn$, get all the data and return the query results."
13502,"from sqlalchemy import create_engine
def select_database(postgresql_uri,PASSWORD):
	engine = create_engine(postgresql_uri)
	res=engine.execute('select ROLE from database where PASSWORD=:PASSWORD',{""PASSWORD"":PASSWORD}).fetchall()
	return res",通过$postgresql_uri$获取数据库引擎。执行SQL语句（根据$PASSWORD$查询database表中ROLE列），并获取所有数据，将查询结果返回。,"Get the database engine through $postgresql_uri$. Execute the SQL statement (query the ROLE column in the database table according to $PASSWORD$), get all the data, and return the query results."
13598,"from sqlalchemy.sql import select
def test_rollback_to_subtransaction(db,users,user_id):
	connection = db.connect()
	res=connection.execute(select([users]).where(users.c.user_id==user_id)).fetchall()
	connection.close()
	return res",使用$db$连接数据库，根据python表达式执行SQL：（根据$user_id$查询$users$表中所有列）并获取所有数据，关闭连接，返回查询结果。,"Connect the database with $db$, execute SQL according to the python expression (query all columns in the $users$ table based on $user_id$), get all the data, close the connection, and return the query results."
11288,"from sqlalchemy.sql import select
def all_tests(variants,t,conn): 
	r = select([t.c.name]).where(t.c.variants==variants)
	ret=conn.execute(r).fetchall()
	return ret",使用$conn$，根据python表达式的方式执行SQL（获取$t$表中variants为$variants$的name列）并获取所有数据，最后返回查询结果,"Use $conn$ to execute SQL based on the Python expression (get the name column in the $t$ table where 'variants' is $variants$) and get all the data, and finally return the query result."
13615,"def get_pg(pg_root_engine,username):
	if username is None:
		return False
	with pg_root_engine.connect() as conn:
		query = ""select page from database where username=:username""
		pg = conn.execute(query,{""username"":username}).fetchall()
		conn.close()
		return [dict(p) for p in pg]",如果$username$为None，则返回False。否则在with语句中使用$pg_root_engine$获取连接：设置SQL（根据$username$查询database表中的page信息）；使用数据库连接执行SQL并获取所有数据；关闭连接并将查询结果中每一项转化为dict类型返回。,"If $username$ is None, return to False. Otherwise, use $pg_root_engine$ in the with statement to get the connection: set the SQL (query the page information in the database where username is $username$). Execute the SQL using the database connection and get all the data. Close the connection and return each item in the query result as a dict type."
13090,"def books_api(conn,isbn):
	review_counts = conn.execute(""SELECT review_count FROM ana_books WHERE isbn=:isbn"", {""isbn"": isbn}).fetchone()
	if review_counts == None:
		return False
	else:
		return review_counts",使用$conn$执行SQL（根据$isbn$查询ana_books表中的review_count）并获取第一条数据。如果查询结果等于None，则返回Fasle。否则返回查询结果。,"Use $conn$ to execute SQL (query the review_count in the ana_books table based on $isbn$) and get the first piece of data. Return Fasle if the query result is equal to None. Otherwise, return the query results."
14086,"def test_mapped(sess,users,id):
	res = sess.execute(users.select(users.c.id ==id)).fetchall()
	assert len(res) > 1
	return res",通过$sess$使用Python表达式的方式设置SQL语句：查询$users$表中id为$id$的所有数据。设置断言判断查询结果的长度大于1，返回查询结果。,"Use the Python expression to set the SQL statement through $sess$: Query all data in the $users$ table where id is $id$. Set the assertion to determine that the length of the query result is greater than 1, and return the query result."
11225,"def check_for_run(db_connect,status):
	conn = db_connect.connect()
	query = conn.execute(""select conments from table_name where status=:status"",{""status"":status}).fetchall()
	return query",通过$db_connect$连接数据库并执行SQL（根据$status$查询table_name表中的conments）并获取所有数据，最后将获取的结果返回,"Connect to the database via $db_connect$ and execute SQL (query the conments in the table_name table based on $status$), get all the data, and finally return the result."
11296,"from flask import jsonify
def states(conn,tbl): 
	States = conn.execute(""SELECT * FROM states WHERE tbl=:tbl"",{""tbl"":tbl}).fetchall()
	return jsonify({'States': [dict(row) for row in States]})",使用$conn$执行SQL(根据$tbl$获取states中的所有列）并获取所有数据，最后使查询结果中的每一项转化为字典类型并使用jsonify处理'States'和字典内容,Execute SQL with $conn$ (get all columns in 'states' based on $tbl$) and get all the data. Finally convert each item in the query result into dictionary type and use jsonify to process 'States' and the dictionary content.
14106,"def test_serial_column(teng, table):
	with teng.connect() as conn:
		results = conn.execute(table.select()).fetchone()
		assert list(results) > 0
		return results",在with语句中使用$teng$连接数据库，使用Python表达式的方式执行SQL语句：获取$table$表中的第一条数据。设置断言判断转化为list的查询结果大于0，返回查询结果。,"Use $teng$ to connect to the database in the with statement and execute the SQL statement as a Python expression: Get the first piece of data in the $table$ table. Set the assertion to determine that the query result converted to list is greater than 0, and return the query results."
11484,"def setup_class(conn, user_id):
	query_sql = ""SELECT user_name FROM users WHERE user_id =: user_id""
	results = conn.execute(query_sql,{""user_id"":user_id}).fetchall()
	user_names = []
	for i in results:
		user_names.append(i)
	return user_names","设置sql（根据$user_id$查询users表中user_name列）,使用$conn$执行SQL并获取所有查询结果，用for循环遍历获取的所有查询结果，将每条数据插入一个list中，并返回这个list。","Set up SQL (query the user_name column in the users table based on $user_id$), execute SQL with $conn$ and get all the query results. Use for loop to iterate through all the query results, insert each piece of data into a list, and return the list."
13693,"from flask import render_template,request
def login(conn,email):
	if request.method == 'POST':
		data = conn.execute(""SELECT * FROM users WHERE email =:email"",{""email"":email}).fetchall()
		if len(data) == 0:
			return render_template('login.html')
		else:
			return render_template('login.html', data=data)",如果request请求方式为POST，则使用$conn$执行SQL（根据$email$查询users表中的所有列）并获取所有数据。如果查询数据长度等于0，则返回渲染后的'login.html'，否则返回渲染后的'login.html'并且将查询结果传递给data参数。,"If the request request mode is POST, execute the SQL (querying all columns in the users table where email is $email$) with $conn$ and get all the data. If the query data length is equal to 0, the rendered 'login.html', otherwise, return rendered 'login.html' and pass the query result to the data parameter."
13681,"def test_session_scope(conn,mock_engine):
	result = conn.execute(""SELECT * FROM RIDERS WHERE engine=:mock_engine"",{""mock_engine"":mock_engine}).fetchall()
	assert result!=[]
	return [r[0] for r in result]",使用$conn$执行SQL（查询engine为$mock_engine$时RIDERS表中的所有列）。设置断言判断查询结果不为空list，最后将查询结果中每一项数据的第0号元素存入list并返回。,"Execute the SQL using $conn$ (all columns in the RIDERS where the engine is $mock_engine$). Set the assertion that the query result is not an empty list, and finally store element 0 for each item of data in the query result in the list and return it."
11092,"def getPlayerName(conn,player_id):
	result=conn.execute(""SELECT name FROM player_master WHERE player_id=:player_id"",{""player_id"":player_id}).fetchall()
	for row in result:
		print(""PLAYER_NAME = ""+ str(row[0]))","使用$conn$执行SQL（根据$player_id$查询player_master表中的name）并获取所有数据。使用for循环，每一次打印""PLAYER_NAME = ""和查询结果每一项的第0号元素的string类型拼接在一起的字符串。","Use $conn$ to execute SQL (query the name in the player_master table based on $player_id$) and get all the data. Using for loop, each time print the strings concatenated ""PLAYER_NAME ="" with the string type of 0th element of each item in the query result."
13855,"import logging
def start(engine, taskid):
	with engine.connect() as cursor:
		allRows = cursor.execute(""SELECT result FROM database WHERE id = :id"", {""id"": taskid}).fetchone()
		for row in allRows:
			logging.info(row)",使用with语句根据$engine$连接数据库。查询database表中id为$taskid$的第一条result数据。for循环遍历查询结果，并使用logging.info（）将查询结果输出。,Use the with statement to connect to the database based on $engine$. Query the the first piece of result in the database table with id as $taskid$. Use for loop iterate through the query results and output the query results using logging.info().
11685,"def get_database(db,name):
	cursor = db.cursor()
	data = cursor.execute(""select * from DATABASE where name=:name"",{""name"":name}).fetchone()
	db.close()
	return data",利用$db$的游标方法执行SQL（根据$name$获取DATABASE表中的所有列）并获取第一条数据，然后保证$db$连接关闭，最后返回查询结果,"Use the cursor method of $db$ to execute SQL (get all the columns in the DATABASE table according to $name$), get the first piece of data, then ensure that the $db$ connection is closed, and finally return the query result."
13380,"def test_flulsh(testing,name):
	c = testing.connect()
	try:
		flulsh=c.execute(""SELECT * FROM users WHERE name=:name"",{""name"":name}).fetchall()
		return flulsh
	finally:
		c.close()",使用$testing$连接数据库，尝试执行SQL（根据$name$查询users表中所有列），并获取所有查询结果，将查询结果返回。最终确保关闭连接。,"Connect the database with $testing$, try to execute SQL (query all columns in the users table based on $name$), get all the query results, return the query results, and make sure that the connection is closed."
11283,"from flask import render_template
from sqlalchemy.sql import select
def useradmin(prtnr,engine,partner,session):
	if session.get('logged_in'):
		conn = engine.connect()
		select_st = select([prtnr]).where(prtnr.c.partner == partner)
		query = conn.execute(select_st).fetchall()
		return render_template('useradmin.html', query = query)
	else:
		return render_template('login.html')",如果使用$session$的get方法得到'logged_in'，则使用$engine$连接数据库，根据python表达式的方式执行SQL获取$prtnr$表中partner为$partner$的所有列并获取所有数据，然后返回渲染后的'useradmin.html'，其中query参数为查询结果，否则返回渲染后的'login.html',"If use the get method of $session$ to get 'logged_in', use $engine$ to connect to the database. Execute SQL based on the Python expression to get all the columns in the $prtnr$ table with 'partner' of $partner$ and get all the data. Return the rendered' useradmin.html', where the query parameter is the query result, otherwise return the rendered 'login.html'."
14215,"from flask import request
def query_id(conn,username):
	if request.method == ""POST"":
		try:
			user_id = conn.execute(""SELECT id FROM users WHERE username = :username"", {""username"": username}).fetchone()
			return user_id
		except:
			raise",如果request模块发送请求的方式为post，则尝试性通过$conn$连接执行SQL（通过$username$查询users中的第一条id），返回查询结果；若出现异常，则通过raise抛出异常。,"If the request module sends the request as post, try to execute SQL (query the first id in users by $username$) through $conn$ connection and return the query results; if there is an exception, throw out through raise."
13003,"def query_row(conn,vt):
	query = ""SELECT tn FROM mytable where vt={}"".format(vt)
	res = conn.execute(query).fetchall()
	return res",使用字符串format的方法设置SQL（根据$vt$查询mytable中的tn）。使用$conn$执行SQL并获取所有数据。最后返回查询结果。,"Use the string format method to set the SQL (query the tn in the mytable based on $vt$). Use $conn$ to execute SQL and get all the data. Finally, return the query results."
13945,"from sqlalchemy.sql import select
def get_table_summary(conn, table, name):
	sql = select(table).where(table.c.name == name)
	return conn.execute(sql).fetchall()",使用Python表达式的方式设置SQL语句（根据$name$获取$table$中的数据），使用$conn$连接执行SQL获取所有数据并返回。,"Set the SQL statement with the Python expression (get the data in $table$ table based on $name$), use the $conn$ connection to execute SQL, get all the data and return."
14075,"def api(conn, isbn):
	book_info = conn.execute(""select * from books where isbn = :isbn"", {""isbn"": isbn}).first()
	if book_info is None:
		return ""Error""
	return book_info","通过$conn$执行SQL：通过$isbn$查询books表中的所有列，并获取第一条数据，如果查询结果为空，返回""Error""；否则返回查询结果。","Execute SQL through $conn$: Query all the columns in the books table through $isbn$, get the first piece of data. Return ""Error"" if the query result is empty; otherwise, return the query result."
14196,"from flask import render_template
def submitreview(conn, isbn):
	try:
		user = conn.execute(""SELECT username FROM users WHERE id = :id"", {""id"": isbn}).fetchone()
		return user
	except:
		return render_template(""error.html"")","尝试性使用$conn$执行SQL：当id等于$isbn$时查询users表中的第一条username数据，返回查询结果。如果出现异常，渲染并返回""error.html""。","Try to use $conn$ to execute SQL: Query the first piece of username data in the users table where id is $isbn$ and return the query results. If an exception occurs, render and return ""error.html""."
11460,"def fetch(connection, name):
	sql = ""SELECT description FROM Kipartman_Parts WHERE name =: name""
	descriptions = connection.execute(sql,{""name"":name}).fetchall()
	for row in descriptions:
		print(row)
	connection.close()
	return descriptions","设置sql（根据$name$查询Kipartman_Parts表中description列）,使用$connection$执行SQL并获取所有查询结果，用for循环遍历获取的所有查询结果，打印每条数据。关闭连接，返回查询结果。","Set up SQL (query the description column in the Kipartman_Parts table based on $name$), execute SQL with $connection$ and get all the query results, use for loop to iterate through all the query results and print each piece of data. Close the connection and return the query result."
13859,"from flask import render_template
def result(conn, search):
	res = conn.execute(""SELECT * FROM books WHERE search =: search"", {""search"": search}).fetchall()
	if res!=[]:
		return render_template(""result.html"", books=res)","使用$conn$查询books表中search为$search$的所有列，并获取全部数据，如果查询结果不为空list,渲染并返回""result.html""，其中books参数为查询结果。","Use $conn$ to query all the columns in the books table with search as $search$ and get all the data. If the query result is not empty list, render and return ""result.html"", where the books parameter is the query results."
13956,"def select_table(conn, box_id):
	query_sql = ""SELECT * FROM box_data WHERE box_id =: box_id""
	results = conn.execute(query_sql,{""box_id"":box_id}).fetchall()
	return results",设置SQL语句为：根据$box_id$获取box_data中的所有列，通过$conn$连接执行SQL获取所有数据，返回获取到的数据。,"Set the SQL statement: Get all the columns in the box_data according to $box_id$, execute SQL through the $conn$ connection, get all the data, and return the obtained data."
13108,"from sqlalchemy import create_engine
def database_exists(url,database):
	try:
		engine = create_engine(url)
		result=engine.execute(""SELECT * FROM SCHEMATA WHERE SCHEMA_NAME =:database"",{""database"":database}).fetchall()
		return result
	except:
		return False",尝试使用$url$获取数据库引擎并执行SQL（根据SCHEMA_NAME为$database$获取SCHEMATA表中的所有列）并获取所有数据，返回查询结果，否则返回False,"Try to use $url$ to get the database engine and execute the SQL (get all columns from SCHEMATA where SCHEMA_NAME is $database$) and get all the data, return the query result, or return False."
11676,"def get_allData(connection,table_schema,creator):
	res = connection.query(table_schema).filter(table_schema.c.Creator==creator).all()
	connection.close()
	return res",使用ORM方式利用$connection$执行SQL（获取$table_schema$表中Creator为$creator$的所有列）并获取所有数据，然后保证$connection$连接关闭，最后返回查询结果,"Use the ORM method and $connection$ to execute SQL (get all the columns in the $table_schema$ table where Creator is $creator$), get all the data, then make sure that the $connection$ connection is closed, and finally return the query result."
13009,"from sqlalchemy.sql import select
def query_old_recs(engine,table,too_old):
	with engine.begin() as conn:
		s = select(table.c.id).where(table.c.col < too_old)
		old_recs = conn.execute(s).fetchall()
		return old_recs",在with语句中使用$engine$开始一次连接。使用python表达式方式设置SQL（查询当col为$too_old$时$table$表中的id）。使用连接执行SQL并获取所有数据。最后返回查询结果。,"Use $engine$ in the with statement to start a connection. Use python expressions to set SQL (query the id in the $table$ table when col is $too_old$). Use the connection to execute the SQL and get all the data. Finally, return the query result."
14046,"def getactors_movie(db_conn, id):
	db_result = db_conn.execute(""SELECT * FROM imdb_actormovies WHERE id = : id "",{""id"":id}).fetchall()
	return list(db_result)",使用$db_conn$连接执行SQL（通过$id$查询imdb_actormovies表中的所有列）并获取全部数据，返回list类型的查询结果。,"Use the $db_conn$ connection to execute SQL (query all columns in the imdb_actormovies table through $id$), get all the data, return query results of type list."
13542,"import sqlalchemy
def chk_DB(db,number):
	engine = sqlalchemy.create_engine(db, echo=False)
	try:
		result = engine.execute(""select * from users where number=:number"",{""number"":number}).fetchall()
		return result
	except sqlalchemy.exc.OperationalError:
		return False",通过$db$获取数据库引擎，echo参数设置为False。尝试执行SQL语句（根据$number$查询users表中所有列），并获取所有数据，将查询结果返回。如果捕获到OperationalError异常，返回False。,"Get the database engine through $db$, and the echo parameter is set to False. Try to execute the SQL statement (query all the columns in the users table according to $number$), get all the data, and return the query results. If an OperationalError exception is caught, return False."
11666,"from sqlalchemy import create_engine
def get_names(directory_uri,sqlite_master,type):
	engine = create_engine(directory_uri)
	sql = sqlite_master.select([sqlite_master.c.name]).where(sqlite_master.c.type==type)
	names = engine.execute(sql).fetchall()
	got = [row[0] for row in names]
	return got",使用$directory_uri$获取数据库引擎，根据python表达式的方式执行SQL（获取$sqlite_master$表中type为$type$的name列）并获取所有数据，使用for循环对查询结果的每一项的第0个元素存储为list类型并返回,"Use the $directory_uri$ to get database engine, execute SQL according to the python expression (get the name column in the $sqlite_master$ table whose type is $type$), get all the data, use for loop to store the 0th element of each item of the query result as a list type and return."
11660,"def get_foo(testing,id):
	with testing.connect() as conn:
		result = conn.execute(""select foo from test where id=:id"",{""id"":id}).fetchone()
		return result",使用with语句利用$testing$连接数据库并执行SQL（根据$id$获取test表中的foo列）并获取第一条数据，最后返回查询结果,"Use the with statement and $testing$ to connect the database and execute SQL (get the foo column in the test table according to $id$),  get the first piece of data, and finally return the query result."
13058,"def find_table_list(session,database_name):
	result = session.execute(""SELECT * FROM TABLES WHERE TABLE_SCHEMA =:database_name"",{""database_name"":database_name}).fetchall()
	result_list = []
	for r in result:
		result_list.append({'value': r[0], 'label': r[1]})
	session.close()
	return result_list",使用$session$执行SQL（查询当TABLE_SCHEMA等于$database_name$时，TABLES中的所有列）并获取所有数据。在for循环中，将查询结果每一项第0个元素作为字典中的'value'对应的值，第1个元素作为字典中的'label'对应的值，然后将该字典加入到list中。关闭$session$并返回处理后的list。,"Use $session$ to execute SQL (query all columns in TABLES when TABLE_SCHEMA equals $database_name$) and get all the data. In the for loop, the 0th element of each item of the query result is taken as the corresponding value of 'value' in the dictionary, the 1st element is used as the corresponding value of 'label' in the dictionary, and then add the dictionary to the list. Close $session$ and return the processed list."
13447,"def test_rollback_off_conn(conn, user_id):
	try:
		sql = ""SELECT * FROM query_users WHERE user_id =: user_id""
		result = conn.execute(sql,{""user_id"":user_id})
		assert len(result.fetchall()) != 0
	finally:
		conn.close()",尝试使用$conn$执行SQL（根据$user_id$获取query_users表中的所有列），然后设置断言为获取所有数据的长度不为0，最终确保$conn$连接关闭,Try to use $conn$ to execute SQL (get all columns in query_users table based on $user_id$). Then set assertion to get all data with non-zero length and finally make sure $conn$ connection is closed.
13545,"import csv
def main(conn):
	f = open(""books.csv"")
	reader = csv.reader(f)
	for id, author in reader:
		res=conn.execute(""select * from books where id=:id and author=:author"",{""id"":id, ""author"":author}).fetchall()
		print(res)","打开并读取文件""books.csv""，使用for循环遍历文件中id, author，利用$conn$执行SQL（根据$id$和$author$查询books表中所有列），并获取所有查询结果，将查询结果打印。","Open and read the file ""books.csv"", use for loop to traverse the id and author in the file, use $conn$ to execute SQL (query all the columns in the books table based on $id$ and $author$), get all the query results, and print them."
11406,"def select_value(e, carid):
	conn = e.connect()
	sql = ""SELECT price FROM cars WHERE carid =: carid""
	prices = conn.execute(sql,{""carid"":carid}).fetchall()
	return prices",利用$e$建立连接，设置SQL（根据$carid$查询cars表中price列），根据$conn$执行SQL并获取所有查询结果，返回执行结果。,"Use $e$ to establish the connection, set up the SQL (query the price column in the cars table based on $carid$), execute the SQL and get all the query result based on $conn$, and return the execution result."
13202,"def get_types(conn, schemaname, tablename):
	sql = ""SELECT * FROM INFORMATION_SCHEMA WHERE TABLE_SCHEMA =: schemaname AND TABLE_NAME =: tablename""
	res = conn.execute(sql,{""schemaname"":schemaname, ""tablename"":tablename}).fetchall()
	return{row[0]:row[1] for row in res}",使用$conn$执行SQL（查询当TABLE_SCHEMA等于$schemaname$和TABLE_NAME等于$tablename$时，INFORMATION_SCHEMA表中的所有列）并获取所有数据。将查询结果中每一项的第0和1个元素分别作为字典中的key和value，最后返回处理后的字典。,"Execute the SQL (get all the columns in the INFORMATION_SCHEMA where the TABLE_SCHEMA is $schemaname$ and the TABLE_NAME is $tablename$) using $conn$ and get all the data. The 0th and 1th elements of each item in the query result are treated as the key and value in the dictionary, and finally the processed dictionary is returned."
13817,"def flight(conn, flight_id):
	res = []
	flights = conn.execute(""SELECT flight FROM flights WHERE id =: id"",{""id"":flight_id}).fetchall()
	for row in flights:
		res.append(row)
	return res",通过$conn$连接数据库并执行SQL（根据$flight_id$查询flights中的所有flight数据），使用for循环将查询结果存储到list中，返回所有的查询结果。,Connect to the database through $conn$ and execute SQL (query all flight data in flights based on $flight_id$). Use for loop to store the query results into list and return all the query results.
11088,"from flask import redirect
def select_res(conn,usersTB,username,password,session):
	user = conn.query(usersTB).filter(usersTB.username == username,usersTB.password == password).one()
	if user:
		session['logged_in'] = True
		return redirect('/todo/page/1')
	return redirect('/login')",在ORM方式下，使用$conn$执行SQL（根据$username$和$password$查询$usersTB$表中所有信息）并获取第一条数据。如果查询数据存在，则将True写入$session$字典中中logged_in对应的值，并重定向至'/todo/page/1'，否则重定向至'/login'。,"In ORM mode, use $conn$ to execute SQL (query all the information in the $usersTB$ table based on $username$ and $password$) and get the first piece of data. If the query data exists, write True to the value corresponding to logged_in in the $session$ dictionary and redirect to '/ todo/page/1', otherwise redirect to '/ login'."
14169,"from flask import render_template
def search(conn, ID):
	rows = conn.execute(""SELECT author, year FROM books WHERE isbn =:ID"",{""ID"": ID})
	if rows.rowcount == 0:
		return render_template(""error.html"")
	books = rows.fetchall()
	return render_template(""results.html"", books=books)","通过$conn$执行SQL语句（查询books表中isbn为$ID$的author和year）。如果执行结果的行数为0，渲染并返回""error.html""。否则获取所有的执行结果，渲染并返回""results.html""，其中books参数为获取的所有执行结果。","Execute the SQL statement via $conn$ (query 'author' and 'year' in the books table whose isbn is $ID$).  If the number of rows of execution results is 0, render and return ""error.html"". Otherwise, render and return ""results.html"", where the books parameter is all the obtained results."
11023,"def save_name(conn,name_User):
	texts = conn.execute(""SELECT girl FROM users WHERE name_User=:name_User"",{""name_User"":name_User}).fetchall()
	if len(texts) == 0:
		print(""no data"")
	else:
		girls=[]
		for i in texts:
			girls.append(i[0])
		return girls","使用$conn$执行SQL（根据$name_User$查询users表中的girl信息）并获取所有数据。如果查询结果的长度为0，则打印""no data""。否则将查询结果每一项的第0个元素通过for循环存储并返回。","Use $conn$ to execute SQL (query the girl information in the users table based on $name_User$) and get all the data. If the length of the query result is 0, print ""no data"". Otherwise, use for loop to store the 0th element of each item of the query result and return."
13765,"import logging
from sqlalchemy import create_engine
def append_to_table(db_url,string_data_io):
	logger = logging.getLogger()
	try:
		db_engine = create_engine(db_url)
		with db_engine.connect() as connection:
			sql = 'SELECT table_name FROM STDIN WHERE string_data_io=:string_data_io'
			copy_cmd = connection.execute(sql, {""string_data_io"": string_data_io}).fetchall()
			return copy_cmd
	except Exception as e:
		logger.info(e)",初始化日志模块，尝试使用$db_url$获取数据库引擎，使用with语句连接数据库，设置SQL（根据$string_data_io$查询STDIN表中table_name列），执行sql并获取所有数据，返回查询结果。如果执行时出现异常，则输出info日志。,"Initialize the log module, try to use $db_url$ to get the database engine, use the with statement to connect the database, set SQL (query the table_name column in the STDIN table according to $string_data_io$), execute sql, get all the data, and return the query results. If an exception occurs during execution, output the info log."
11567,"def db_etl_byname(conn, name):
	query = ""SELECT * FROM tb WHERE name = %s""%name
	res = conn.execute(query).fetchall()
	return res","设置SQL语句，内容为:通过$name$查询tb中的所有列,使用%操作符匹配SQL字符串中的条件。使用$conn$连接执行SQL语句获取所有数据并返回所有的查询结果。","Set up the SQL statement: Query all the columns in tb through $name$, using the % operator to match the conditions in the SQL string. Use the $conn$ connection to execute the SQL statement to get all the data and return all the query results."
11306,"from flask import render_template
def flight(conn,gh_id):
	flight = conn.execute('SELECT * FROM flights WHERE gh_id = :gh_id', {'gh_id': gh_id}).fetchone()
	if flight is None:
		return render_template('error.html')
	return render_template('flight.html', flight=flight)","使用$conn$执行SQL（根据$gh_id$查询flights表中的第一行数据），如果未获取到数据，则返回渲染后的'error.html'，否则返回渲染后的'flight.html'页面,其中flight参数为查询结果。","Use $conn$ to execute SQL (query the first row of data in the flights table according to $gh_id$), and if no data is obtained, return the rendered 'error.html'; otherwise, return the rendered' flight.html' page, where the flight parameter is the query result."
14078,"def test_nesting(tlengine):
	external_connection = tlengine.connect()
	try:
		res = external_connection.execute(""select count(name) from query_users"").fetchone()
		return res
	finally:
		external_connection.close()",通过$tlengine$连接数据库，尝试执行SQL：查询query_users表中的name统计值，获取第一条数据，返回查询结果。最后关闭数据库连接。,"Connect to the database through $tlengine$, try to execute a SQL: Query the name statistics in the query_users table, get the first piece of data, and return the query results. Finally, close the database connection."
11577,"import sqlalchemy
def person(url, name, psd):
	con = sqlalchemy.create_engine(url, client_encoding='utf8')
	infos = con.execute(""SELECT * FROM person WHERE name = :name AND psd = :psd"", {""name"": name,""psd"": psd}).fetchall()
	for i in infos:
		print(i['name'])
		print(i['lastname'])
	return infos",通过$url$获取数据库引擎，其中client_encoding参数为'utf8'。通过$con$查询person表中name为$name$且psd为$psd$的所有列，并获取所有数据。for循环遍历查询结果，打印查询结果中name和lastname对应的值，返回所有的查询结果。,"Get the database engine through $url$, where the client_encoding parameter is 'utf8'. Query all columns in the person table where name is $name$ and psd is $psd$ through $con$, and get all the data. Use for loop to traverse the query results, print the corresponding values of name and lastname in the query results, and return all the query results."
13085,"def load(conn,User,name):
	restid = conn.query(User.ID).filter(User.NAME == name).first()
	if restid is not None:
		return restid
	else:
		return -1",在ORM方式下，使用$conn$执行SQL（查询当NAME等于$name$时，$User$表中的ID）并获取第一条数据。如果查询结果不为None，则直接返回。否则返回-1。,"In ORM mode, use $conn$ to execute SQL (query the ID in the $User$ table when NAME equals $name$) and get the first piece of data. If the query result is not None, return directly. Otherwise, return -1."
14237,"def validate_email(conn, email):
	user = conn.execute(""SELECT * from users where email = :email"", {""email"": email}).fetchone()
	if user:
		return user",通过$conn$连接执行SQL（根据$email$查询users中的所有列）获取第一条数据，如果获取的数据不为空，则将其返回。,Execute SQL through the $conn$ connection (query all columns in the users based on $email$) to get the first piece of data and return if the obtained data is not empty.
13279,"from sqlalchemy.sql import select,func
def get_source(conn, orders_intern):
	sql = select([func.max(orders_intern.c.werkorderID)])
	results = conn.execute(sql).fetchall()
	conn.close()
	return results",根据python表达式设置SQL（根据$werkorderID$获取$orders_intern$中的最大值）。使用$conn$执行SQL并获取所有数据。关闭$conn$并返回查询结果。,Set the SQL based on a python expression (get the maximum value in $orders_intern$ where the werkorderID is $werkorderID$) . Execute SQL with $conn$ and get all the data. Close $conn$ and return the query results.
11245,"def find_gis_datatype_oftable(conn, name):
	sql = ""SELECT STGeometryType FROM SHAPE where name=:name""
	st_type = conn.dbsession.execute(sql,{""name"":name}).fetchall()
	return st_type",使用$conn$的dbsession方法执行SQL（根据$name$获取SHAPE中的STGeometryType列）并获取所有数据。，最后返回查询结果,Use dbsession method of $conn$ to execute the SQL (get the STGeometryType column in SHAPE based on $name$) and get all the data. Finally return the query result.
13157,"from flask import jsonify
def select_records(conn,ratings_count):
	clause = ""select * from books where ratings_count =: ratings_count""
	res=conn.execute(clause,{""ratings_count"":ratings_count}).fetchall()
	return jsonify(res)",使用$conn$执行SQL（根据$ratings_count$获取books表中的所有列）并获取所有数据，最后返回jsonify处理的查询结果内容,"Execute the SQL (get all the columns in the books where  ratings_count is $ratings_count$) with $conn$, get all the data, and finally return the query result content handled by jsonify."
13254,"from flask import render_template
def select_booksvalue(conn, title):
	book_sql = ""SELECT * FROM books WHERE title =: title""
	book_res = conn.execute(book_sql,{""title"":title}).fetchall()
	return render_template(""search_result.html"", results = book_res)","使用$conn$执行SQL语句（根据$title$选取books表中的所有列）并获取所有数据。返回渲染后的""search_result.html""页面，其中results参数为查询结果。","Execute the SQL statement (select all columns in the books table where title is $title$) with $conn$ and get all the data. Return the rendered ""search_result.html"" page, where the results parameter is the query result."
13517,"def test_multiple_two_phase(testing,user_id):
	conn = testing.connect()
	res=conn.execute(""select user_name from users where user_id=:user_id"",{""user_id"":user_id}).fetchall()
	conn.close()
	return res",利用$testing$连接数据库，执行SQL（根据$user_id$查询users表中user_name列），并获取所有查询结果，关闭连接，将查询结果返回。,"Connect the database with $testing$, execute SQL (query the user_name column in the users table according to $user_id$), get all the query results, close the connection, and return the query results."
13664,"def get_databases(conn,schema_id):
	databases = []
	try:
		crs = conn.execute(""SELECT schema_name FROM schema WHERE schema_id=:schema_id"",{""schema_id"":schema_id})
		databases = [line[0] for line in crs.fetchall()]
	except Exception as e:
		raise e
	return databases",尝试性使用$conn$执行SQL（根据$schema_id$查询schema中schema_name信息），并在list中保存所有数据每一项的第0号元素。如果出现异常则根据异常具体信息抛出异常。最后返回查询数据。,"Experiment with SQL using $conn$ (query schema_name information in schema where schema_id is $schema_id$), and save element 0 for each item of all the data in the list. If an exception occurs, the exception is thrown based on the specific information of the exception. Finally, return query data."
11654,"def get_result(db,id):
	try:
		rs = db.execute(""select result from meishi_collection where taskid=:id"",{""id"":id}).fetchall()
		return [item for item in rs]
	except Exception as e:
		print(e)",尝试使用$db$执行SQL（获取meishi_collection表中taskid为$id$的result列）并获取所有数据，使用for循环对查询结果中的每一项存储为list类型，如果执行时出现异常，则打印异常,"Try to use $db$ to execute SQL (get the result column in the meishi_collection table where taskid is $id$) and get all the data. Use for loop to store each item in the query result as a list type. If an exception occurs during execution, the exception is printed."
13971,"def single_count(conn, value):
	sql_count = ""SELECT count(*) FROM table WHERE value =: value""
	count = conn.execute(sql_count,{""value"":value}).fetchall()
	if count[0] == 0:
		return True
	else:
		return False",设置SQL语句为：根据$value$查询table表中所有列的数目，使用$conn$执行SQL获取所有数据。如果执行结果的第0个元素为0，返回True；否则，返回False。,"Set the SQL statement: Query the number of all columns in the 'table' table according to $value$, and use $conn$ to execute the SQL to get all the data. If the 0th element of the execution result is 0, return True; otherwise, return False."
11200,"def select_res(session,User_bao,user_name):
	password_val = session.query(User_bao.password).filter(User_bao.user_name == user_name).first()
	print(password_val)
	return password_val",通过$session$使用ORM方式方式执行SQL语句：查询$User_bao$表中的user_name为$user_name$的第一个password。打印查询结果并返回。,Execute the SQL statement with $session$ in ORM mode: query for the first password where the name of user is $user_name$ in the $User_bao$. Print query results and return.
13809,"def test_invalidate_on_results(engine, tid):
	conn = engine.connect()
	try:
		result = conn.execute(""select * from sometable WHERE tid = :tid"", {""tid"": tid}).fetchone()
		return result
	except Exception as e:
		print(e)
		raise",使用$engine$连接数据库。尝试性使用$tid$查询sometable表中的列，并获取第一条数据，返回查询结果。如果出现Exception异常，则打印异常信息，并使用raise手动设置异常。,"Connect to the database using $engine$. Try to query the columns in the sometable table through $tid$ and get the first data piece of and return the query results. If there is the Exception exception, print the exception message and set the exception manually using raise."
11317,"from sqlalchemy import create_engine
def taAlugado(db_string, titulo, email,id_estoque):
	db = create_engine(db_string)
	connection = db.connect()
	sql = ""SELECT id_cliente FROM locadora WHERE email=:email and titulo=:titulo and id_estoque=:id_estoque""
	cliente=connection.execute(sql,{""email"":email,""titulo"":titulo,""id_estoque"":id_estoque}).fetchall()
	connection.close()
	return cliente","通过$db_string$获取数据库引擎并建立连接。执行SQL语句（根据$email$,$titulo$和$id_estoque$查询locadora表中id_cliente列的所有结果），关闭连接，将查询结果返回。","Get the database engine and establish a connection through $db_string$. Execute the SQL statement (query all the results of the id_cliente column in the locadora table based on $email$, $titulo$ and $id_estoque$), close the connection, and return the query results."
11117,"from flask import render_template
def book_page(conn,isbn):
	books = conn.execute(""SELECT * FROM booktable WHERE isbn=:isbn"",{""isbn"":isbn}).fetchall()
	if books is None:
		return render_template('error.html')
	else:
		return render_template('book.html',books=books)","使用$conn$查询booktable表中isbn为$isbn$的全部列并获取全部数据。如果获取的数据为空，则渲染并返回'error.html'。否则返回渲染后的""book.html""，传入books参数为查询结果。","Use $conn$ to query the entire column in the booktable where the isbn is $isbn$ and get all the data. If the data retrieved is empty, render and return 'error.html'. Otherwise, the rendered ""book.html"" is returned and the books parameter is passed as the result of the query."
11188,"def query_page(conn,tx_id):
	sql = ""SELECT * FROM transactions WHERE tx_id=""+tx_id
	trans=conn.execute(sql).fetchall()
	for r in trans:
		print(r)",设置SQL语句：查询transactions表中tx_id为$tx_id$的所有列，通过$conn$连接执行SQL语句获取所有数据。for循环遍历查询结果并将其打印。,"Set the SQL statement: query all columns in the transactions where the id of tx is $tx_id$ and execute the SQL statement to get all the data through the $conn$ connection. The for loop iterates through the query results, which should be printed."
11198,"def select_res(conn,books,author):
	values = conn.query(books.title).filter(books.author == author).all()
	booklist=[]
	for i in values:
		booklist.append(i)
	return booklist",通过$conn$连接，使用ORM方式执行SQL语句，其内容为：根据$author$查询$books$中的所有title。使用for循环将查询结果中的每一项元素都存储到list中并将list内容返回。,"Execute the SQL statement using ORM through the $conn$ connection, which query all titles in $books$ based on $author$. Use A for loop to store each element in the query result in a list and return the list content."
14241,"from sqlalchemy.sql import select
def latest_status(engine,summary,id):
	c = engine.connect()
	s = select(summary).where(summary.c.id==id)
	row = c.execute(s).fetchone()
	if row is not None:
		return dict(row)",通过$engine$连接数据库，查询$summary$表中id为$id$的数据，执行SQL获取第一条数据。如果执行结果不为空，将执行结果转化为dict并返回。,"Connect to the database through $engine$, query the data in the $summary$ table where an id is $id$, and execute SQL to get the first piece of data. If the execution result is not empty, convert the execution result to dict and return."
13311,"from sqlalchemy import create_engine
def log_kaydet(SQLALCHEMY_DATABASE_URI,user_agent):
	eng = create_engine(SQLALCHEMY_DATABASE_URI)
	with eng.connect() as con:
		ips = con.execute(""SELECT ip FROM logs WHERE user_agent=:user_agent"",{""user_agent"":user_agent}).fetchall()
		return ips",通过$SQLALCHEMY_DATABASE_URI$获取数据库引擎，使用with语句建立连接。执行SQL语句（根据$user_agent$查询logs表中ip列），并获取所有数据，将查询结果返回。,"Get the database engine through $SQLALCHEMY_DATABASE_URI$ and establish a connection with the with statement. Execute the SQL statement (query the ip column in the logs table according to $user_agent$), get all the data, and return the query results."
13027,"from sqlalchemy import create_engine
def get_condor(db_user,Machines,group_name):
	engine = create_engine(db_user)
	machine_list = engine.query(Machines.id).filter(Machines.group_name == group_name).all()
	return machine_list",根据$db_user$创建数据库引擎。在ORM方式下，使用数据库引擎执行SQL（根据$group_name$查询$Machines$表中的id）并获取所有数据。最后返回查询结果。,"Create a database engine based on $db_user$. In ORM mode, use the database engine to execute SQL (query the id in the $Machines$ table based on $group_name$) and get all the data. Finally, return the query result."
11062,"from flask import jsonify
def otu_id_values(conn,sample_values):
	results=conn.execute(""SELECT otu_id FROM samples WHERE sample_values=:sample_values"",{""sample_values"":sample_values}).fetchall()
	otus = [item[0] for item in results]
	return jsonify(otus)",使用$conn$执行SQL（根据$sample_values$查询samples表中的otu_id）并获取所有结果。将查询结果每一项的第0个元素存入到list中，并使用序列化的方法返回。,Use $conn$ to execute SQL (query the otu_id in the samples table based on $sample_values$) and get all the results. Store the 0th element of each item of the query result in list and return with the serialization method.
11415,"def select_value(engine, tid):
	with engine.connect() as con:
		sql = ""SELECT name FROM table WHERE id =: tid""
		names = con.execute(sql,{""tid"":tid}).fetchall()
		return names",使用with语句根据$engine$连接数据库。设置SQL（根据id为$tid$查询table表中name列），执行sql并获取所有查询结果，将查询结果返回。,"Use the with statement to connect to the database based on $engine$. Set up SQL (query name column in 'table' table based on 'id': $tid$), execute SQL and get all the query results, return query results."
13564,"from flask import render_template
def books(db,isbn):
	data = db.execute('SELECT * FROM books WHERE isbn = :isbn',{'isbn': isbn}).fetchall()
	review_proxy = db.execute(('SELECT review, rating, review_date, username FROM reviews WHERE book_id = (:isbn)'), {'isbn': isbn})
	reviews = review_proxy.fetchall()
	return render_template('books.html', book=data[0], reviews=reviews)","利用$db$执行SQL（根据$isbn$查询books表中所有列），并获取所有查询结果，（根据book_id为$isbn$查询reviews表中review, rating, review_date, username列），并获取所有查询结果，返回渲染后的'books.html'页面。参数book为第1次查询结果的第0个元素, reviews为第二次查询结果。","Execute SQL with $db$ (query all columns in the books table according to $isbn$) and get all the query results (query the review, rating, review_date, username column in the reviews table where book_id is $isbn$), get all the query results, and return the rendered 'books.html' page. The parameter book is the 0th element of the first query result, and 'reviews' is the result of the second query."
13778,"from flask import render_template, request, redirect
def login(conn,uname):
	if request.method == ""POST"":
		col = conn.execute(""SELECT * FROM users WHERE uname=:uname"", {""uname"": uname}).fetchall()
		if col:
			return redirect(""/search"")
	return render_template('login.html')","如果请求方式为""POST""，利用$conn$执行SQL（根据$uname$查询users表中所有列），并获取所有查询结果，如果有查询结果，返回重定向到""/search""的命令。最终返回'login.html'页面。","If the request method is ""POST"", use $conn$ to execute SQL (query all columns in the users table based on $uname$) and get all the query results. If there are query results, return the command redirected to ""/ search"". Finally return the 'login.html' page."
13815,"from sqlalchemy import create_engine
from sqlalchemy.orm.session import sessionmaker
import logging
def get_value(db_config,Affiliation,id):
	engine = create_engine(db_config)
	Session = sessionmaker(engine)
	s = Session()
	values = s.query(Affiliation).filter_by(Affiliation.id == id).first()
	logging.info(values)
	return values",运用$db_config$获取数据库引擎。使用sessionmaker()创建一个配置过的Session类并绑定数据库引擎。实例化Session，然后使用ORM方式执行SQL语句：通过$id$查询$Affiliation$中的第一条数据。使用logging.info（）输出查询结果，返回查询结果。,Get the database engine using $db_config$. Use sessionmaker() to create a configured Session class and bind the database engine. Instantiate the Session and execute the SQL statement using ORM method: Query the first piece of data in $Affiliation$ through $id$. Use logging.info() to output the query results and return the query results.
13663,"def get_all_data(db_engine, id):
	query = ""SELECT * FROM table WHERE table_id = {}"".format(id)
	print(query)
	with db_engine.connect() as connection:
		try:
			result = connection.execute(query).fetchall()
			for row in result:
				print(row)
			connection.close()
			return result
		except Exception as e:
			print(e)",使用字符串format方法设置SQL（查询table_id为$id$时table表中的所有列），并打印SQL。在with语句中$db_engine$获取连接，并尝试性执行如下代码：使用连接执行SQL并获取所有数据，利用for循环打印每一条数据；关闭连接并返回数据。如果出现异常则打印异常的具体信息。,"Use the string format method to set the SQL (query all the columns in the table where table_id is $id$) and print the SQL. In the with statement, takes the connection in $db_engine$ and tries to execute the following code: execute the SQL using the connection and get all the data, print each piece of data using the for loop; close the connection and return the data. If an exception occurs, the exception's details are printed."
13317,"def main(conn,origem,destino):
	voos = conn.execute(""SELECT * FROM voos WHERE origem=:origem AND destino=:destino"",{""origem"":origem,""destino"":destino}).fetchall()
	for voo in voos:
		print(voo)",使用$conn$执行SQL（根据$origem$和$destino$查询voos表中所有列），并获取所有查询结果，使用for循环打印查询结果的每一条,"Execute SQL with $conn$ (query all columns in the voos table based on $origem$ and $destino$), get all the query results, and use for loop to print each item of the query results."
13507,"from flask import jsonify
def dataset_preview(conn,dataset_id):
	if not dataset_id:
		return jsonify({""error"": ""Need dataset_id.""})
	try:
		res = conn.execute(""SELECT * FROM Dataset where dataset_id =:dataset_id"",{""dataset_id"":dataset_id})
		return jsonify([ dict(r.items()) for r in res.fetchall()])
	except:
		return jsonify(False)","如果$dataset_id$没值，返回转化为json格式的字典，""error""键的值为""Need dataset_id.""。尝试利用$conn$执行SQL（根据$dataset_id$查询Dataset表中所有列），并获取所有查询结果，使用for循环将查询结果每一条的items字段转化为dict,以list存储并返回。如果捕获到异常，返回转化为json格式的False。","If $dataset_id$ has no value, return a dictionary converted to json format where the value of the ""error"" key is ""Need dataset_id."". Try to use $conn$ to execute SQL (query all the columns in the Dataset table based on $dataset_id$) and get all the query results. Use for loop to convert the items field of each query result to dict, and store it in list and return. If an exception is caught, return False converted to json format."
11189,"from sqlalchemy.sql import select
def query_old_recs(conn,product_area,name):
	s = select(product_area).where(product_area.c.name == name)
	area = conn.execute(s).fetchall()
	return area",使用Python表达式的方式设置SQL语句查询$product_area$表中name为$name$的所有数据，使用$conn$执行查询语句并返回所有的查询结果。,"Set up the SQL statement to query all the data in the $product_area$ where name is $name$ using a Python expression, execute the query with $conn$ and return all the query results."
11303,"import sqlalchemy
def create(db_url,geochat):
	engine = sqlalchemy.create_engine(db_url)
	conn = engine.connect()
	cope = conn.execute(""SELECT * FROM postgis where geochat = :geochat"", {""geochat"": geochat}).fetchall()
	conn.close()
	print(cope)",通过$db_url$获取数据库引擎并建立连接。执行SQL语句（根据$geochat$查询postgis表中所有列）并获取所有数据，关闭连接，打印查询结果。,"Get the database engine and establish a connection through $db_url$. Execute the SQL statement (query all the columns in the postgis table according to $geochat$), get all the data, close the connection, and print the query results."
11419,"from sqlalchemy.sql import select
def getFirstFormData(conn, Username, studentData):
	sql = select([studentData]).where(studentData.c.Username == Username)
	student = conn.execute(sql).fetchone()
	return student",根据python表达式设置SQL：（根据$Username$查询$studentData$表中所有列）。通过$conn$执行SQL并获取第一条数据，返回查询结果。,"Set SQL based on the Python expression: (query all columns in $studentData$ table based on $Username$). Execute the SQL with $conn$ and get the first piece of data, and return the query result."
13161,"from sqlalchemy import create_engine
def query_posts_by_category(DB_CONNECT_STRING,category):
	engine = create_engine(DB_CONNECT_STRING, max_overflow=5)
	sql=""SELECT * FROM spider_jam_post WHERE baseurl=:category""
	result = engine.execute(sql,{""category"":category}).fetchone()
	return result",使用$DB_CONNECT_STRING$获取数据库引擎，其中max_overflow参数为5，然后执行SQL（根据baseurl为$category$获取spider_jam_post表中的所有列）并获取第一条数据，最后返回查询结果,"Use $DB_CONNECT_STRING$ to get the database engine, where the max_overflow parameter is 5, then execute the SQL (get all columns in the spider_jam_post where baseurl is $category$) and get the first data, and return the query result."
13453,"def select_value(conn, action_id):
	try:
		sql = ""SELECT submitter FROM archive WHERE action_id =: action_id""
		results = conn.execute(sql,{""action_id"":action_id}).fetchall()
		return results
	except Exception as err:
		print(err)",尝试使用$conn$执行SQL（根据$action_id$获取archive表中的submitter列）并获取所有数据，再返回查询结果，如果执行时出现异常，则打印异常,"Try to use $conn$ to execute SQL (get submitter column in the archive table based on $action_id$) and get all the data. Then return the query results. If exception occurs during execution, print the exception."
13469,"def com_to_pol(engine, value):
	try:
		conn = engine.connect()
		data_sql = ""SELECT * FROM concat_table WHERE value =: value""
		results = conn.execute(data_sql,{""value"":value}).fetchall()
		return results
	except Exception as e:
		print(e)",尝试使用$engine$连接数据库并执行SQL（根据$value$获取concat_table表中的所有列）并获取所有数据，再返回查询结果，如果执行时出现异常，则打印异常,"Try to use $engine$ to connect to the database  and execute SQL (get all columns in the 'concat_table' table based on $value$) and get all the data. Then return the query results. If exception occurs during execution, print the exception."
13868,"from sqlalchemy.sql import select
def list_one_note(conn,codetbl,code_no): 
	s = select(codetbl.c.title).where(codetbl.c.code_no == code_no)
	res = conn.execute(s).fetchall()
	print(res)",使用Python表达式的方式设置SQL语句，其内容为：通过$code_no$查询$codetbl$中的所有title，使用$conn$连接执行SQL获取所有数据并将其打印,Use the Python expression to set up the SQL statement with the following contents: Query all titles in $codetbl$ through $code_no$. Use the $conn$ connection to execute the SQL to get all the data and print them.
13309,"def main(conn,dest,duration):
	flights = conn.execute(""SELECT origin FROM flight WHERE dest=:dest AND duration=:duration"",{""dest"":dest,""duration"":duration}).fetchall()
	for origin in flights:
		print(origin)",使用$conn$执行SQL（根据$dest$和$duration$查询flight表中origin列），并获取所有查询结果，使用for循环将查询结果的每一条打印。,"Use $conn$ to execute SQL (query the origin column in the flight table based on $dest$ and $duration$), get all the query results, and use for loop to print each piece of the query results."
11269,"from flask import jsonify
def places(conn,visited):
	sql = ""select description from places where visited=:visited""
	rows=conn.execute(sql,{""visited"":visited}).fetchall()
	places=[]
	for row in rows:
		places.append(row[0])
	conn.close()
	return jsonify(places)",通过$conn$执行SQL（根据$visited$获取places中的description列）并获取所有数据，使用for循环将查询到结果的每一项的第0个元素存储为list类型，然后关闭$conn$连接，最后使用jsonify处理list内容并返回。,"Execute SQL via $conn$ (get the description column in 'places' based on $visited$), get all the data, use for loop to store the 0th element of each item in the query as list type, close the $conn$ connection, and finally use jsonify to process the list content and return."
13725,"from sqlalchemy import create_engine
def send_to_mysql(mysql_str,invoiceno,stockcode):
	engine = create_engine(mysql_str)
	con=engine.connect()
	query = ""SELECT diamonds FROM ecommerce where invoiceno = :invoiceno and stockcode = :stockcode""
	dt = con.execute(query, {""invoiceno"": invoiceno, ""stockcode"": stockcode}).fetchone()
	return dt",通过$mysql_str$获取数据库引擎并建立连接。设置SQL语句（根据$invoiceno$和$stockcode$查询ecommerce表中diamonds列），执行SQL并获取第一条数据，将查询结果返回。,"Get the database engine and establish a connection through $mysql_str$. Set the SQL statement (query the diamonds column in the ecommerce table based on $invoiceno$ and $stockcode$), execute SQL, get the first piece of data, and return the query result."
14211,"from flask import jsonify
def combined(conn):
	Combined = conn.execute(""SELECT * FROM combined"").fetchall()
	return jsonify(Combined)",使用$conn$执行SQL（查询combined表中的所有列）获取所有数据，使用jsonify返回执行结果。,Use $conn$ to execute the SQL (query all columns in the combined table) to get all the data and use jsonify to return the execution result.
11565,"def put_kv(conn, key):
	r = conn.execute(""SELECT clause FROM table WHERE key = :key"", {""key"": key})
	if r.rowcount == 0:
		return False
	else:
		return r.fetchone()",使用$conn$连接执行SQL语句：查询table表中key为$key$的clause数据。如果查询结果的行数量为0，则返回False。否则，返回查询结果的第一条数据。,"Use the $conn$ connection to execute the SQL statement : Query the the clause data in the 'table' table with key as $key$. If the number of rows in the query result is 0, return False. Otherwise, return the first piece of data of the query result."
13655,"from sqlalchemy.sql import select
def find_ids(conn, cache, key, namespace):
	sql = select([cache.c.id]).where(cache.c.namespace==namespace and cache.c.key==key)
	rows = conn.execute(sql).fetchall()
	return len(rows) > 0",使用python表达式设置SQL（根据$namespace$和$key$查询$cache$中的id）。使用$conn$执行SQL并获取所有数据。返回查询结果是否大于0的判断结果。,Use a python expression to set the SQL (querying the id in $cache$ where namespace  is $namespace$ and key  is $key$). Execute SQL with $conn$ and get all the data. Return the decision that whether the query result is greater than 0 or not.
11392,"from flask import render_template
def book(db,book_isbn) :
	book = db.execute(""SELECT isbn, title, auther, year FROM books WHERE isbn=:isbn"", {""isbn"":book_isbn}).fetchone()
	return render_template('book.html', bookinfo=book)","使用$db$执行SQL（查询当isbn等于$book_isbn$时，books表中isbn, title, auther, year列），并获取第一条查询结果，返回渲染后的'book.html'，其中参数bookinfo为查询结果。","Use $db$ to execute SQL (query the isbn, title, auther, year column in the books table where isbn is $book_isbn$), get the first query result, and return the rendered 'book.html', where the parameter bookinfo is the query result."
11151,"def query_page(conn,id):
	stm = ""SELECT EVDATE FROM FRC_CUSTOMSIGNALS WHERE TASKID=""+id
	tasks=conn.execute(stm)
	return tasks",设置SQL（查询当TASKID等于$id$时，FRC_CUSTOMSIGNALS中的所有EVDATE），使用$conn$连接执行SQL并返回获取的查询结果。,"Set the SQL (query all EVDATE in FRC_CUSTOMSIGNALS where TASKID is $id$) , execute the SQL with the $conn$ connection and return the retrieved query results."
11343,"def setup_db(admin_engine,ROLE):
	conn = admin_engine.connect()
	data = conn.execute(""SELECT name FROM DATABASE where ROLE=:ROLE"", {""ROLE"": ROLE}).fetchall()
	print(data)
	conn.close()",使用$admin_engine$获取数据库连接，并执行SQL（根据$ROLE$查询DATABASE表中name列的所有数据），并打印查询到的数据，关闭连接,"Use $admin_engine$ to get the database connection and execute SQL (query all data in the name column of the DATABASE table according to $ROLE$), print the queried data, and close the connection."
13165,"from sqlalchemy import create_engine
def data_prep(SQLconfig, dataconfig):
	engine = create_engine(SQLconfig)
	conn = engine.raw_connection()
	res=conn.execute(""select * FROM equity_data WHERE equity_data=: dataconfig"",{""dataconfig"":dataconfig}).fetchone()
	conn.close()
	return res",使用$SQLconfig$获取数据库引擎并使用raw_connection方法连接数据库，然后执行SQL（根据equity_data为$dataconfig$获取equity_data表中的所有列）并获取第一条数据，再关闭连接，最后返回查询结果,"Get the database engine using $SQLconfig$ and connect the database using the raw_connection, then execute the SQL (get all the columns in equity_data where the data of equity is $dataconfig$) and get the first data, then close the connection and return the result of the query."
11226,"def get_sells(conn,sell):
	rs = conn.execute(""SELECT * FROM Sells where sell=:sell"",{""sell"":sell}).fetchall()
	return [dict(row) for row in rs]",通过$conn$执行SQL（根据$sell$获取Sells中的所有列）并获取所有数据，并将查询后的结果每一项转化为字典类型并返回。,Execute SQL via $conn$ (get all the columns in 'Sells' based on $sell$) and get all the data. Convert each item of the query result to dictionary type and return.
13961,"from flask import render_template, request, redirect 
def login(conn, email):
	if request.method == ""POST"":
		sql = ""SELECT * FROM users WHERE email =: email""
		username_data = conn.execute(sql,{""email"":email}).fetchall()
		if username_data is None :
			return redirect(""/search"")
		else:
			return render_template(""login.html"")","如果request模块发送请求的方式为post，则设置SQL（通过$email$查询users中的所有列），使用$conn$执行SQL并获取全部数据。如果执行结果为空，使用redirect返回""/search""；否则，渲染并返回""login.html""。","If the request module sends the request as 'post', set SQL (query all columns in the 'users' through $email$), use $conn$ to execute SQL and get all the data. If the execution result is empty, use redirect to return ""/ search""; otherwise, render and return ""login.html""."
13066,"def query_predicted(engine,temp,temp_min,temp_max,speed):
	try:
		connection = engine.connect()
		sql =""SELECT description FROM weather_predictions WHERE temp=:temp AND temp_min=:temp_min AND temp_max=:temp_max AND speed=:speed""
		values = connection.execute(sql, {""temp"": temp, ""temp_min"":temp_min, ""temp_max"":temp_max, ""speed"":speed}).fetchall()
		return values
	except Exception as e:
		print(e)",尝试性执行如下代码：使用$engine$获取数据库连接；设置SQL：根据$temp$，$temp_min$，$temp_max$和$speed$查询weather_predictions表中的description；使用连接执行SQL并获取所有数据；最后返回查询结果。如果出现异常则打印异常的具体信息。,"Try to execute the following code: Use $engine$ to get a database connection; set up the SQL: query the description in the weather_predictions table based on $temp$, $temp_min$, $temp_max$ and $speed$; use the connection to execute the SQL and get all the data and finally return query results. If an exception occurs, print the details of the exception."
11097,"def drop_table(conn,id_name):
	res_go=conn.execute(""SELECT * FROM name_table WHERE id_name=:id_name"",{""id_name"":id_name}).fetchall()
	conn.close()
	return res_go",使用$conn$执行SQL（根据$id_name$查询name_table中的所有列）并获取所有数据。关闭连接并返回查询结果。,Use $conn$ to execute SQL (query all columns in name_table based on $id_name$) and get all the data. Close the connection and return the query results.
11504,"from sqlalchemy.sql import select
def annotate_note(conn,TAGS,tag):
	query = select(TAGS.c.id).where(TAGS.c.tag == tag)
	information = conn.execute(query).fetchall()
	return information",使用Python表达式的方式设置SQL语句：通过$tag$查询$TAGS$表中的所有id数据，使用$conn$执行SQL语句，并返回查询结果。,Set up SQL statements using the Python expression: Query all id data in the $TAGS$ table by $tag$. Use $conn$ to execute SQL statements and return query results.
11679,"from flask import jsonify
def api(db,reviews,isbn):
	rs = db.execute(reviews.select().where(reviews.c.isbn==isbn)).fetchall()
	if rs is None:
		return jsonify({""error"": ""Invalid ISBN""})
	return rs","根据python表达式的方式，使用$db$执行SQL（获取$reviews$表中isbn为$isbn$的所有列）并获取所有数据，如果查询数据的结果是None，则返回jsonify处理后的""error"": ""Invalid ISBN""，最后返回查询结果","Use $db$ to execute SQL based on the python expression (get all the columns in the $reviews$ table where isbn is $isbn$) and get all the data. If the result of the query data is None, return ""error"": ""Invalid ISBN"" processed by jsonify, and finally return the query result."
13255,"def search(engine):
	with engine.connect() as conn:
		result = conn.execute(""SELECT * FROM Customer"").fetchall()
		for row in result:
			print(row)",在with语句中，使用$engine$建立连接。执行SQL语句（查询Customer表中的所有列）并获取所有数据。使用for循环打印查询结果中的每一项。,"In the with statement, make the connection using $engine$. Execute the SQL statement (query all columns in the Customer) and get all the data. Print each item in the query result using a for loop."
13226,"import sqlalchemy
def test_mysql_innodb(uri, openstack_citest):
	connection = sqlalchemy.create_engine(uri).connect()
	sql = ""SELECT count(*) FROM information_schema where TABLE_SCHEMA=%s""%openstack_citest
	results = connection.execute(sql).fetchall()
	return results",通过$uri$获取数据库引擎并建立连接。设置SQL（根据TABLE_SCHEMA等于$openstack_citest$时，查询information_schema表中的所有列），执行SQL获取所有数据并返回。,"Get the database engine from $uri$ and make the connection. Set SQL (query all columns in the information_schema where TABLE_SCHEMA is $openstack_citest$) , execute SQL to get all the data and return it."
13886,"from flask import render_template, request
def index(conn, user_id):
	if request.method==""GET"":
		username = conn.execute(""SELECT username FROM login WHERE user_id = :user_id"", {""user_id"": user_id}).fetchone()
		s={}
		for i in username:
			print(i)
			s[""username""]=i
		return render_template(""index.html"",user=s)","如果request模块发送请求的方式为GET，则使用$conn$连接执行SQL（通过$user_id$查询login中的第一条username），for循环遍历所有查询结果，打印查询结果，并将查询结果作为字典中username对应的值，渲染并返回""index.html"",其中user参数为字典内容。","If the request module sends the request as GET, uses the $conn$ connection to execute the SQL (query the first piece of username in the login through $user_id$). Use for loop iterate through all the query results, print the query results. And take the query results as the corresponding value of username in the dictionary, render and return ""index.html"", where the user parameter is the dictionary contents."
11498,"from flask import render_template
def select_value(conn, booktitle):
	query_sql = ""SELECT * FROM books WHERE title =: booktitle""
	results = conn.execute(query_sql,{""booktitle"":booktitle})
	return render_template('search.html', results=results)","设置sql（根据title为$booktitle$查询books表中全部信息）,使用$conn$执行SQL，返回渲染后的'search.html'页面，参数results为查询结果。",Set SQL (query all the information in the books table based on title $booktitle$). Use $conn$ to execute SQL and return the rendered 'search.html' page with the results parameter being the query result.
13858,"def get_value(conn,City,name):
	values = conn.query(City).filter(City.name == name).all()
	assert len(values)!=0
	return [item for item in values]",通过$conn$连接，使用ORM方式执行SQL语句：根据$name$获取$City$中的所有数据。设置断言判断返回结果的长度不为0。将查询结果存储为list并返回。,Use the ORM method to execute SQL statement through $conn$ connection: Get all data in $City$ based on $name$. Set assertion to determine that the length of the returned result is not 0. Store the query results as list and return it.
13949,"from sqlalchemy.sql import select
from sqlalchemy import create_engine
def get_source(app, days, date):
	db = create_engine(app)
	sql = select(days).where(days.c.date == date)
	days = db.execute(sql).fetchall()
	return days",通过$app$获取数据库引擎。使用Python表达式的方式设置SQL语句：通过$date$获取$days$表中的数据。执行SQL语句获取所有数据，将获取到的数据返回。,"Get the database engine through $app$. Set the SQL statement with the Python expression: Get the data in the $days$ table through $date$. Execute the SQL statement, get all the data, and return the obtained data."
13599,"def start(conn,result):
	try:
		cursor = conn.cursor()
		cursor.execute('SELECT taskid from rank_item where result=:result',{""result"":result})
		for x in cursor.fetchall():
			print(x[1])
	except Exception as e:
		print(e)",尝试使用$conn$建立游标，执行SQL（根据$result$查询rank_item表中taskid列），用for循环遍历获取的所有查询结果，打印每条数据的第1个元素。如果执行时出现Exception异常，打印这个异常。,"Try to create a cursor with $conn$, execute SQL (query the taskid column in the rank_item table based on $result$), use for loop to traverse all the obtained query results, and print the first element of each piece of data. If an Exception occurs during execution, print the exception."
13668,"from flask import jsonify
def get_employee(db_connect,employee_id):
	conn = db_connect.connect()
	sql = ""select * from employee where Employee_Id =:id""
	result = conn.execute(sql,{""id"":employee_id})
	employees = [dict(zip(tuple(result.keys()),i)) for i in result.cursor]
	return jsonify(employees)",使用$db_connect$获取连接。设置SQL（查询当Employee_Id为$employee_id$时employee中的所有列）并执行该SQL。将执行结果的keys作为字典中的key，执行结果游标中每一项作为value，并将所有dict存入list中。最后返回list序列化后的结果。,"Get the connection using $db_connect$. Set the SQL (query for all columns in Employee where Employee_Id is $employee_id$) and execute the SQL. The keys of the result are executed as keys in the dictionary, each item in the result cursor is executed as a value, and all dict are stored in the list. Finally, return the serialized result of the list."
13343,"def query_acceleration(conn,long,time):
	sql_query = ""SELECT lat FROM acceleration WHERE long=:{} AND time=:{}"".format(long, time)
	result = conn.execute(sql_query).fetchall()
	return [item for item in result]","使用format字符串匹配方法设定sql（根据$long$和$time$查询acceleration表中lat列）,利用$conn$执行SQL，并获取所有数据，使用for循环将查询结果存储为list并返回。","Use the format string matching method to set sql (query the lat column in the acceleration table based on $long$ and $time$), execute SQL with $conn$, get all the data, and use for loop to store the query results as list and return."
13315,"def test_storage_data_blueprint(eng,id):
	con = eng.connect()
	data = con.execute(""SELECT * FROM track_table WHERE id=:id"",{""id"":id}).fetchall()
	assert len(data) != 0
	return data",使用$eng$执行SQL（根据$id$查询track_table表中所有列），并获取所有查询结果，设置断言判断查询结果的长度是否不等于0，将查询结果返回。,"Use $eng$ to execute SQL (query all columns in the track_table according to $id$), get all the query results, set assertions to determine whether the length of the query results is not equal to 0, and return the query results."
13249,"from sqlalchemy.sql import select,and_
def select_value(conn, slivers, deleted, status):
	s = select([slivers], and_(slivers.c.deleted==deleted, slivers.c.status==status))
	results = conn.execute(s).fetchall()
	sl = []
	for row in results:
		sl.append(row[slivers.c.parsed_obj])
	return sl",使用python的方式设置SQL(根据$deleted$和$status$查询$slivers$中的所有列)，使用$conn$执行SQL并获取所有数据。使用for循环将查询结果中每一项的parsed_obj列对应的值储存到list中并返回。,"Set up the SQL in Python (query all columns in $slivers$ where deleted is $deleted$ and status is $status$) , execute the SQL with $conn$ and get all the data. The for loop is used to store the values of the parsed_obj columns for each item in the query result in a list and return."
11386,"from flask import render_template
def api(conn,work_ratings_count):
	data = conn.execute(""SELECT * FROM data where work_ratings_count=:work_ratings_count"", {""work_ratings_count"": work_ratings_count}).fetchall()
	if data==None:
		return render_template('404.html')
	return render_template(""api.json"",api=data)","使用$conn$执行SQL（根据$work_ratings_count$查询data表中所有列），并获取所有查询结果，如果查询结果为空，返回渲染后的404.html页面，否则返回渲染后的""api.json""，其中参数api为查询结果。","Use $conn$ to execute SQL (query all columns in the data table according to $work_ratings_count$) and get all the query results. If the query result is empty, return the rendered 404.html page; otherwise, return the rendered ""api.json"", where the parameter api is the query result."
11220,"from sqlalchemy import create_engine
def engine(PG_URL,username):
	e = create_engine(PG_URL)
	res=e.execute('select eventid FROM gino_users where username=:username',{""username"":username}).fetchall()
	return res",通过$PG_URL$获取数据库引擎，执行SQL语句（根据$username$获取gino_users中的eventid）并获取所有数据，最后返回结果。,"Get the database engine by $PG_URL$, execute the SQL statement (get eventid in gino_users based on $username$), get all the data, and finally return the result."
13067,"from sqlalchemy import create_engine
def mysql_sel(mysql):
	engine = create_engine(mysql)
	connection = engine.connect()
	result_create = connection.execute(""SELECT * FROM create_database"").fetchall()
	return result_create",通过$mysql$创建数据库引擎，并根据引擎创建连接。使用连接执行SQL（查询create_database表中的所有列）并获取所有数据。最后直接返回查询结果。,"Create the database engine through $mysql$ and create a connection based on the engine. Use the connection to execute SQL (query all columns in the create_database table) and get all the data. Finally, return the query result directly."
13024,"from sqlalchemy.sql import select
def id_generator(db1,ids,for_update):
	with db1.connect() as conn:
		stm = select([ids.c.nextid]).where(ids.c.for_update==for_update)
		results = conn.execute(stm).fetchall()
		return results",在with语句中使用$db1$获取数据库连接。用python表达式设置SQL（根据$for_update$查询$ids$表中的nextid）。执行SQL并获取所有数据。最后返回查询结果。,"Use $db1$ in the with statement to get the database connection. Set the SQL with the python expression (query the nextid in the $ids$ table based on $for_update$). Execute the SQL and get all the data. Finally, return the query result."
11246,"def task(conn,data):
	res=conn.execute('select * from test where data=:data',{""data"":data}).fetchall()
	print(res)
	conn.close()
	return res",使用$conn$执行SQL（根据$data$获取test中的所有列）并获取所有数据，打印查询结果，关闭$conn$连接，最后返回查询结果,"Execute SQL with $conn$ (get all columns in test based on $data$) and get all the data, print query result, close $conn$ connection, and finally return query result."
11319,"from sqlalchemy.sql import select
def do_open(conn, cache,namespace):
	try:
		sql = select(cache).where(cache.c.namespace == namespace)
		stor = conn.execute(sql).fetchall()
		return stor
	except (IOError, OSError, EOFError):
		return False","尝试设置sql（根据$namespace$查询$cache$表中所有列），使用$conn$执行python表达式查询所有数据，并返回查询结果，如果执行时出现IOError, OSError, EOFError异常，则返回False。","Try to set up sql (query all columns in the $cache$ table according to $namespace$), use $conn$ to execute the python expression to query all data and return the query results. Return False if an IOError, OSError, EOFError exception occurs during execution."
13354,"def handler(conn,usr_name):
	result = []
	for row in conn.execute(""SELECT password FROM user WHERE usr_name=:usr_name"",{""usr_name"":usr_name}).fetchall():
		result.append(row)
	return result",使用for循环遍历如下代码执行结果：使用$conn$执行SQL（根据$usr_name$查询user表中password列）并获取所有查询结果，并将其将存储为list中。最后返回。,"Use for loop to traverse the execution results of the following code: Execute SQL with $conn$ (query the password column in the user table based on $usr_name$), get all the query results, store them as list, and finally return."
11473,"import csv
def select_value(conn):
	f = open(""books.csv"")
	reader = list(csv.reader(f))
	for year in reader[1:]:
		select_book = ""SELECT * FROM booktable WHERE year =: year""
		books = conn.execute(select_book,{""year"":year}).fetchall()
		return books","打开并读取文件""books.csv""，并将得到的数据转化为list。使用for循环遍历这个list的第1条数据至末尾，获取到对应于数据库year字段的值，设置SQL（根据year查询booktable表中所有列），根据$conn$执行SQL并获取所有数据，并将查询结果返回。","Open and read the file ""books.csv"" and convert the data into a list. Use for loop to iterate through the first data in this list to the end and get the value corresponding to the 'year' field in the database. Set the SQL (query all columns in the booktable table based on 'year'), execute the SQL based on $conn$, get all the data, and return the query result."
13452,"from flask import render_template
def flight(conn, flight_id):
	sql = ""SELECT * FROM flights WHERE id =: id""
	flight = conn.execute(sql,{""id"":flight_id}).fetchone()
	return render_template(""flight.html"", flight=flight)","使用$conn$执行SQL（根据id为$flight_id$获取flights表中的所有列）并获取第一条数据，最后返回渲染后的""flight.html""，其中flight参数为查询结果","Use $conn$ to execute SQL (get all columns in the flights table with id as $flight_id$) and get the first piece of data. Finally return the rendered ""flight.html"", where the flight parameter is the query result."
13235,"def select_value(testing, user_id):
	connection = testing.connect()
	sql = ""SELECT * FROM users WHERE user_id =: user_id""
	results = connection.execute(sql,{""user_id"":user_id}).fetchall()
	connection.close()
	return results",使用$testing$连接数据库引擎。设置SQL（根据$user_id$查询users的所有列），执行SQL并获取所有数据。关闭数据库连接并返回查询结果。,"Connect to the database engine using $testing$. Set the SQL (query all columns for users where the id of user is $user_id$), execute the SQL and get all the data. Close the database connection and return the result of the query."
11361,"def main(conn,isbn):
	query = conn.execute(""SELECT * FROM books where isbn=:isbn"", {""isbn"": isbn}).fetchall()
	csv = []
	for i in query:
		csv.append(i)
	conn.close()
	return csv",使用$conn$执行SQL（根据$isbn$查询books表中所有列）并获取所有数据，将数据逐条插入一个list中，关闭连接，返回list,"Use $conn$ to execute SQL (query all columns in the books table according to $isbn$), get all the data, insert the data one by one into a list, close the connection, and return list."
13263,"def select_api(conn, isbn):
	sql_api = ""SELECT * FROM books where isbn=:isbn""
	book_res = conn.execute(sql_api,{""isbn"":isbn}).fetchall()
	if book_res is None:
		return None
	else:
		return book_res",设置SQL语句（通过$isbn$查询books中的所有列并返回所有数据）。使用$conn$执行SQL语句获取所有数据，如果查询结果的值为空则返回None，否则返回查询结果。,"Set the SQL statement (query all the columns in books where isbn is $isbn$ and return all the data) . Execute an SQL statement with $conn$ to get all the data, return None if the query result is empty, otherwise return the query result."
11298,"from sqlalchemy import create_engine
import sys
from sqlalchemy.exc import SQLAlchemyError
def db_connection(DB_URI,FOREIGN_KEY_CHECKS):
	try:
		engine = create_engine(DB_URI)
		res=engine.execute('SELECT * FROM TABLE WHERE FOREIGN_KEY_CHECKS=:FOREIGN_KEY_CHECKS',{""FOREIGN_KEY_CHECKS"":FOREIGN_KEY_CHECKS}).fetchall()
		return res
	except SQLAlchemyError as sqlalchemy_error:
		print(sqlalchemy_error)
		sys.exit()",尝试使用$DB_URI$获取数据库引擎并执行SQL(根据$FOREIGN_KEY_CHECKS$获取TABLE中的所有列)并获取所有数据再返回查询结果，如果出现SQLAlchemyError错误，则打印错误，退出系统,"Try to use $DB_URI$ to get the database engine and execute SQL (get all the columns in the TABLE based on $FOREIGN_KEY_CHECKS$), get all the data and return the query result. If there is a SQLAlchemyError error, print the error and exit the system."
14274,"from flask import request
def defav(conn,user_name):
	if request.method == 'POST':
		res = conn.execute(""select login_info from login_table where user_name=:user_name"",{""user_name"":user_name}).fetchall()
		return res",如果request模块发送请求的方式为post，则使用$conn$执行SQL（通过$user_name$查询login_table中的所有login_info），返回所有的查询结果。,"If the request module sends the request in a post method, use $conn$ to execute SQL (query all the login_info in the login_table through $user_name$) and return all the query results."
11455,"def select_value(db, id):
	conn = db.connect()
	sql = ""SELECT * FROM mock_calls WHERE id =: id""
	calls = conn.execute(sql,{""id"":id}).fetchall()
	conn.close()
	return calls","使用$db$建立连接，设置sql（根据$id$查询mock_calls表中全部信息）,使用$conn$执行SQL并获取所有查询结果，关闭连接，并返回查询结果。","Use $db$ to establish a connection, set up SQL (query all the information in the mock_calls table based on $id$), use $conn$ to execute SQL and get all the query results, close the connection, and return the query results."
14083,"from flask import render_template
def books(conn, author):
	books = conn.execute(""SELECT * FROM books where author=author"", {""author"":author}).fetchall()
	return render_template(""books.html"", books=books)","通过$conn$查询books表中author为$author$的所有列，并获取全部数据，渲染并返回""books.html"", 其中books参数为查询结果。","Query all the columns in the books table where 'author' is $author$ through $conn$, get all the data, render and return ""books.html"", where the books parameter is the query result."
13438,"from sqlalchemy.sql import select
def editEvent(engine, tbl_events, EID):
	conn = engine.connect()
	sql = select([tbl_events]).where(tbl_events.c.EID == EID)
	results = conn.execute(sql).fetchall()
	engine.dispose()
	return results",使用$engine$连接数据库，然后使用python表达式的方式执行SQL（获取$tbl_events$表中EID为$EID$的所有列）并获取所有数据，进一步对$engine$排列，最后返回查询结果,"Use $engine$ to connect to the database, then use the Python expression to execute SQL (get all columns in the $tbl_events$ table with EID as $EID$) and get all the data. Further arrange $engine$ and finally return the query results."
11700,"def test_first(engine,id):
	query = ""SELECT * FROM testtable WHERE id=:id""
	result = engine.execute(query,{""id"":id}).fetchone()
	assert len(result) == 1
	return result",利用$engine$执行SQL（根据$id$获取testtable表中的所有列）并获取第一条数据，然后设置断言查询结果的长度为1，最后返回查询结果,"Execute SQL with $engine$ (get all the columns in the testtable table according to $id$), get the first piece of data, then set the assertion that the length of the query result is 1, and finally return the query result."
11270,"from sqlalchemy import create_engine
def connect(db_connection_string,suggested_by):
	engine = create_engine(db_connection_string)
	sql = ""select id from places where suggested_by=:suggested_by""
	Session = engine.execute(sql, {""suggested_by"": suggested_by}).fetchall()
	return Session",通过$db_connection_string$获取数据库引擎，执行SQL语句（根据$suggested_by$获取places中的id列）并获取所有数据，最后返回查询结果,"Get the database engine via $db_connection_string$, execute the SQL statement (get the id column in 'places'based on $suggested_by$), get all the data, and finally return the query result."
13780,"from flask import render_template
def all_courses(conn,universities):
	courses = conn.execute(""SELECT * FROM courses where universities = :universities"",{""universities"":universities}).fetchall()
	if courses!=[]:
		return render_template('all_courses.html', courses=courses)",利用$conn$执行SQL（根据$universities$查询courses表中所有列），并获取所有查询结果，如果查询结果不为空，返回渲染后的'all_courses.html'页面，其中参数courses设置为查询结果。,"Execute SQL with $conn$ (query all columns in the courses table according to $universities$) and get all the query results. If the query results are not empty, return the rendered 'all_courses.html' page, where the parameter courses is set to the query results."
11672,"def find_idea(sql_engine,ideas_table,id):
	sql_connection = sql_engine.connect()
	query = ideas_table.select().where(ideas_table.c.idea_id==id)
	result = sql_connection.execute(query).fetchone()
	idea_info = result[0]
	if idea_info is None:
		return False",使用$sql_engine$连接数据库，根据python表达式的方式执行SQL（获取$ideas_table$表中idea_id为$id$的所有列）并获取第一条数据，然后将查询结果的第0个元素转化为list类型，如果list内容是None，则返回False,"Use $sql_engine$ to connect the database, execute SQL according to the python expression (get all the columns in the $ideas_table$ table where idea_id is $id$), get the first piece of data, then convert the 0th element of the query result to list type, and return False if the list content is None."
11081,"def query_page(conn,tax_id):
	try:
		resrank=conn.execute(""SELECT rank FROM ncbi_nodes WHERE tax_id=:tax_id"",{""tax_id"":tax_id}).fetchall()
		return [dict(row) for row in resrank]
	except:
		return False",尝试性使用$conn$执行SQL（根据$tax_id$查询ncbi_nodes表中的rank信息）并获取所有数据，将查询结果的每一项转化为dict类型并返回。如果出现异常，则返回False。,"Try to use $conn$ to execute SQL (query the rank information in the ncbi_nodes table based on $tax_id$), get all the data, convert each item of the query result to a dict type and return. If an exception occurs, return False."
11300,"from sqlalchemy.sql import select
def test_baseline_6_editing(conn,Zoo,Name):
	SDZ =select(Zoo).where(Zoo.c.Name == Name)
	res=conn.execute(SDZ).fetchone()
	assert len(res)>0
	return res",使用$conn$，根据python表达式的方式执行SQL（获取$Zoo$表中Name为$Name$的所有列）并获取第一行数据，设置断言查询结果的长度大于0，并返回查询结果,"Use $conn$ to execute SQL based on the Python expression (get all the columns in the $Zoo$ table where 'Name' is $Name$) and get the first row of data. Set the assertion that the length of the query result is greater than 0, and return the query result."
13267,"def ListarMateriasNome(conn, curso):
	try:
		matsql = ""SELECT * FROM mat WHERE curso =: curso""
		mats = conn.execute(matsql,{""curso"":curso}).fetchall()
		return mats
	except Exception as e:
		print(e)
		return False",尝试通过$conn$执行SQL语句（根据$curso$查询mat表中的所有列）并在获取所有数据后返回。如果引发了Exception，则打印具体异常信息并返回False。,"Try to execute the SQL statement (query all the columns in the mat where curso is $curso$) with $conn$ and return after getting all the data. If an Exception is thrown, the specific Exception information is printed and False is returned."
13291,"def select_Machines(conn, id):
	Machines_sql = ""SELECT * FROM Machines_sql WHERE id =: id""
	Machines_results = conn.execute(Machines_sql,{""id"":id}).fetchall()
	conn.close()
	return Machines_results",使用$conn$执行SQL（根据$id$获取Machines_sql表中的所有列）获取所有数据，断开数据库连接，返回查询结果。,"Execute SQL with $conn$ (get all the columns in the Machines_sql where id is $id$) to get all the data, disconnect the database, and return the query results."
13630,"def get_movie(conn, movieId):
	try:
		res = conn.execute(""select title from Movie where movieId=:movieId"",{""movieId"":movieId}).fetchall()
		return [dict(row) for row in res]
	except:
		return False",尝试性使用$conn$执行SQL（根据$movieId$查询Movie表中的title信息）并获取所有数据。将查询结果中每一项转化为dict类型并返回。如果出现异常则返回False。,Experiment with $conn$ to execute SQL (querying the title information where movieId  is $movieId$ in Movie) and get all the data. Converts each item in the query result to a dict type and return. Return False if an exception occurs.
13734,"from sqlalchemy.sql import select
def test_baseline_6_editing(conn,Zoo,Name):
	SDZ = select(Zoo).where(Zoo.c.Name == Name)
	opens = conn.execute(SDZ).fetchall()
	assert len(opens)!=0
	return opens",根据python表达式设置SQL：（根据$Name$查询$Zoo$表中所有列）。通过$conn$执行SQL并获取所有数据，设置断言判断查询结果长度是否不等于0，返回查询结果。,"Set SQL based on the python expression (query all columns in the $Zoo$ table based on $Name$). Execute SQL through $conn$, get all the data, set assertions to determine whether the length of the query results is not equal to 0, and return the query results."
13120,"def api(conn,isbn):
	info = conn.execute(""SELECT id FROM reviews WHERE isbn = :isbn"", {""isbn"": isbn}).fetchall()
	if info == None:
		return False
	else:
		return info",使用$conn$执行SQL（根据$isbn$获取reviews表中的id列）并获取所有数据，如果查询结果为None，则返回False，否则返回查询结果,"Execute the SQL (get the id column in the reviews table where isbn is $isbn$) with $conn$ and get all the data, return False if the query result is None, otherwise return the query result."
14016,"def find_project(conn):
	results = conn.execute(""SELECT * FROM indicators"").fetchall()
	return results",通过$conn$查询indicators表中的所有列，并获取全部数据，返回查询结果。,"Query all the columns in the indicators table through $conn$, get all the data, and return the query results."
13758,"from sqlalchemy.sql import select
def test_select_with_dict_column(conn,mytable,name):
	s = select(mytable).where(mytable.c.name == name)
	yes = conn.execute(s).fetchall()
	return yes",根据python表达式设置SQL：（根据$name$查询$mytable$表中所有列）。通过$conn$执行SQL并获取所有数据，返回查询结果,"Set SQL based on the python expression (query all columns in the $mytable$ table based on $name$). Execute SQL through $conn$, get all the data, and return the query result."
11218,"def test_country_id_3(conn,Country,id):
	country =conn.query(Country.name).filter(Country.id ==id).all()
	assert country[0] == ""Germany""
	return country[0]","使用ORM的方式，利用$conn$获取$Country$表中id为$id$的所有name。设置断言判断返回结果的第0个元素是否等于""Germany""，最后返回第0个元素","Use $conn$ to get all 'name' with 'id': $id$ in $Country$ table by the way of ORM, set assertion to determine if the 0th element of the returned result is equal to ""Germany"", and finally return the 0th element."
13561,"from flask import render_template
def registerUser(conn,email):
	user = conn.execute(""SELECT * FROM users WHERE email= :email"", {""email"": email}).fetchone()
	if not user:
		return render_template(""error.html"")
	return user","利用$conn$执行SQL（根据$email$查询users表中所有列），并获取第一行数据，如果没有查询到结果，则返回渲染和的""error.html""页面。否则返回查询结果。","Execute SQL with $conn$ (query all columns in the users table based on $email$) and get the first row of data. If no results are found, return the rendered ""error.html"" page; otherwise, return the query result."
11165,"def test_none_is_encoded_as_empty_dict(conn,name_meta):
	result=conn.execute(""SELECT meta FROM user WHERE name_meta=:name_meta"",{""name_meta"":name_meta})
	row = result[0]
	return row",使用$conn$连接执行SQL语句（根据$name_meta$获取user中的全部meta），存储查询结果的第0个元素并将其返回。,"Execute the SQL statement using the $conn$ connection (get all the meta in user where the name of meta is $name_meta$) , store the 0th element of the query result, and return it."
13227,"def select_books(conn, isbn):
	try:
		sql_book = ""SELECT * FROM books WHERE isbn =: isbn""
		result_book = conn.execute(sql_book,{""isbn"":isbn}).fetchall()
		return result_book
	except:
		print(""error"")",尝试设置SQL（根据$isbn$查询books的所有列），使用$conn$执行SQL语句，获取所有数据并返回。如果出现异常，则打印'error'。,"Try to set up SQL (query all the books columns where isbn is $isbn$) , execute the SQL statement with $conn$, obtain all the data and return it. If an exception occurs, 'error' is printed."
11264,"def select_db(conn,tables,value_column):
	try:
		kueridb = conn.query(tables).filter(tables.column == value_column).all()
		if kueridb != None:
			return kueridb
	except Exception as e:
		return False",尝试使用ORM的方式，利用$conn$获取$tables$表中column为$value_column$的所有列数据，如果获取的数据不为空，则返回查询结果，如果执行时出现异常，则返回False,"Try to use ORM and by the way of $conn$ to get all the column data in the $tables$ table with 'column': $value_column$. If the data is not empty, return the query result. If an exception occurs during execution, return False."
13238,"def get_likes(conn):
	rs = conn.execute(""SELECT * FROM Likes"").fetchall()
	return [dict(row) for row in rs]",使用$conn$执行SQL语句（查询Likes表中的所有列），并获取所有所有数据。将查询结果的每一项转化为dict并以list形式返回。,Execute the SQL statement (query all the columns in the Likes) with $conn$ and get all the data. Convert each item of the query result to a dict and return it as a list.
13427,"def get(e):
	conn = e.connect()
	query = conn.execute(""SELECT id FROM JPY"")
	result = {'data': [dict(zip(tuple (query.keys()) ,i)) for i in query.cursor]}
	return result",通过$e$连接数据库，然后执行SQL（获取JPY表中的id列），进一步使用for循环对被游标方法处理过查询结果的每一项的关键字和下标存储为元组，并对元组压缩再转化为字典类型，最后返回'data'和字典内容,"Connect to the database through $e$, then execute the SQL (get the id column in the JPY table), further use for loop to store the keywords and subscripts of each item of the query results processed by the cursor method as tuple. Compress the tuple and convert it to the dictionary type. Finally return 'data' and the contents of dictionary. "
13407,"def api(db, isbn):
	review_count = db.execute(""SELECT COUNT(review) FROM reviews WHERE isbn = :isbn"",{""isbn"":isbn}).fetchone()
	rating = db.execute(""SELECT rating FROM reviews WHERE isbn = :isbn"",{""isbn"":isbn}).fetchall()
	avg_rating = 0 
	for rate in rating:
		print(rate[0])
		avg_rating = rate[0] + avg_rating
	avg_rating = avg_rating/review_count[0]
	return avg_rating",根据$db$执行第一条SQL（根据$isbn$获取reviews表中的被计数方法处理的reviews列）并获取第一条数据，然后再使用$db$执行第二条SQL（根据$isbn$获取reviews表中的rating列）并获取所有数据，进一步使用for循环打印第二条SQL查询结果的第0个元素，再统计第二条SQL查询结果的第0个元素的个数，for循环结束将第二条SQL查询结果的第0个元素的个数比上第一条SQL语句查询结果的第0个元素的个数，最后返回比值,"Execute the first piece of SQL based on $db$ (get the reviews column processed by the counting method in the reviews table based on $isbn$) and get the first piece of data. Then execute the second piece of SQL through $db$ (get the rating column in the reviews table based on $isbn$) and get all the data. Further use for loop to print the 0th element of the second piece of SQL query result, and then count the number of the 0th element of the second piece of SQL query result. At the end of the for loop, compare the number of the 0th element of the second piece of SQL query result to the number of the 0th element of the first piece of SQL query result and finally return the ratio."
11261,"def test_nesting(db,user_id):
	connection = db.connect()
	sql='select count(*) from query_users where user_id=:user_id'
	result = connection.execute(sql,{""user_id"":user_id}).fetchall()
	assert len(result) == 0
	connection.close()",通过$db$连接数据库，执行SQL（根据$user_id$获取query_users表中被计数方法处理过的所有列）并获取所有数据，设置断言查询结果的长度为0，最后使连接关闭,"Connect to the database via $db$, execute SQL (get all the columns processed by the counting method in the query_users table based on $user_id$) and get all the data. Set the length of the assertion query result to 0, and finally close the connection."
13129,"def api(conn,isbn):
	bdata = conn.execute(""SELECT * FROM books WHERE isbn = :isbn"", {""isbn"": isbn}).fetchone()
	if bdata is None:
		return ""No Such A Book""
	else:
		return bdata","使用$conn$执行SQL（根据$isbn$获取books表中的所有列）并获取第一条数据，如果查询结果为None，则返回""No Such A Book""，否则返回查询结果","Execute the SQL with $conn$ (get all the columns in the books where isbn is $isbn$) and get the first data, return ""No Such A Book"" if the query result is None, otherwise return the query result."
11160,"def insert_keys(conn,task_index):
	jobs = conn.execute(""SELECT job_id FROM tasks WHERE task_index=:task_index"",{""task_index"":task_index}).fetchall()
	print(jobs)
	return jobs",运用$conn$执行SQL（根据$task_index$查询tasks表中的job_id）并获取所有数据，打印并返回查询结果。,Execute SQL with $conn$ (query job_id in the tasks where the index of task is $task_index$) and get all the data. Then print and return the query results.
11313,"def bookPage(conn,work_ratings_count):
	try:
		goodreads = conn.execute(""select validISBN from books where work_ratings_count = :work_ratings_count"",{""work_ratings_count"": work_ratings_count}).fetchall()
		if goodreads:
			return goodreads 
		else:
			return None
	except:
		return False",尝试使用$conn$执行SQL（根据$work_ratings_count$查询books表中validISBN列的所有数据），如果有查询结果，则返回查询数据，否则返回None。如果执行时出现异常，则返回False。,"Try to use $conn$ to execute SQL (query all the data in the validISBN column of the books table based on $work_ratings_count$), return the query data if there is a query result; otherwise, return None. If an exception occurs during execution, return False."
13910,"def select_origin(conn, destination):
	sql = ""SELECT origin FROM flights WHERE destination =: destination""
	origins = conn.execute(sql,{""destination"":destination}).fetchall()
	return [dict(ori) for ori in origins]",设置SQL语句，内容为：通过$destination$查询flights表中的origin，使用$conn$连接执行SQL获取所有数据，将查询结果每一项转化为dict存储为list并返回。,"Set the SQL statement as follows: Query the origin column in the flights table through $destination$, use the $conn$ connection to execute SQL, get all the data, convert each item of the query result to dict, store it as list, and return."
13867,"from sqlalchemy.sql import select
def api_call(conn,locati,trip_name):
	s = select(locati.c.addr).where(locati.c.trip_name == trip_name)
	final = conn.execute(s).fetchall()
	print(final)",使用Python表达式的方式设置SQL语句为根据$trip_name$选择$locati$中的所有addr，使用$conn$连接执行SQL获取所有数据并打印,Use the Python expression to set up the SQL statement to: Select all the addr in $locati$ based on $trip_name$. Use the $conn$ connection to execute the SQL to get all the data and print them.
13322,"def get_equations(con,id):
	result = con.execute(""SELECT equation FROM samples WHERE id=:id"",{""id"":id}).fetchall()
	con.close()
	return [row[0] for row in result]",使用$con$执行SQL（根据$id$查询samples表中equation列），并获取所有查询结果，关闭连接，使用for循环将查询结果的每一条的第0个元素存储为list并返回。,"Use $con$ to execute SQL (query the equation column in the samples table according to $id$), get all the query results, close the connection, and use for loop to store the 0th element of each article of the query result as list and return."
11652,"def get_amount(db,name,id):
	sql = ""SELECT amount FROM accounts WHERE name=:name AND id=:id""
	am = db.execute(sql,{""name"":name,""id"":id}).fetchone()
	return am",使用$db$执行SQL（根据$name$和$id$获取accounts表中的amount列）并获取第一条数据，最后返回查询结果,Use $db$ to execute SQL (get the amount column in the accounts table based on $name$ and $id$) and get the first record. Finally return the query result.
11457,"def get_records(conn, username):
	sql = ""SELECT * FROM email WHERE username =: username""
	results = conn.execute(sql,{""username"":username}).fetchall()
	conn.close()
	emails = []
	for i in results:
		emails.append(i)
	return emails",设置SQL（根据$username$查询email表中所有列），根据$conn$执行SQL并获取所有查询结果，关闭连接，用for循环遍历获取的所有查询结果，将每条数据插入一个list中，并返回这个list。,"Set up the SQL (query all columns in the email table based on $username$), execute the SQL based on $conn$ and get all the query results. Close the connection, use for loop to iterate through all the obtained query results, insert each piece of data into a list, and return the list."
11520,"def set_stock_trading_day_list(conn, date):
	info = conn.execute(""SELECT * FROM stock WHERE date = :date"", {""date"": date}).fetchall()
	print(info)
	return info","使用$conn$查询stock表中date为$date$的所有列，并获取所有数据,打印查询结果并将其返回。","Use the $conn$ to query all the columns in the stock table with date as $date$, get all the data, print the query result and return it."
13908,"from sqlalchemy import create_engine
def test_keys(uri, name):
	engine = create_engine(uri)
	sql = ""SELECT id FROM testtable WHERE name =: name""
	keys = engine.execute(sql,{""name"":name})
	assert len(keys) == 2",通过$uri$创建数据库引擎，设置SQL语句为：根据$name$获取testtable表中的id数据，通过数据库引擎执行SQL语句，设置断言判断执行结果的长度为2。,"Create the database engine through $uri$, set the SQL statement: Get the id data in the 'testtable' table according to $name$, execute the SQL statement through the database engine, and set the assertion to determine that the length of the execution result is 2."
13200,"from sqlalchemy import create_engine
def get_res(connection_string, name):
	engine = create_engine(connection_string)
	sql=""select * from table where name=:name""
	res=engine.execute(sql,{""name"":name}).fetchall()
	return res",使用$connection_string$获取数据库引擎并执行SQL（根据$name$获取table表中的所有列）并获取所有数据，最后返回查询结果,"Get the database engine using $connection_string$, execute the SQL (get all the columns in the table where name is $name$) , get all the data, and finally return the query results."
11337,"import json
def get(session,Week,week_id):
	week = session.query(Week).from_statement(""select * from week where week_id=:week_id"").params(week_id=week_id).first()
	week_json={}
	if week is not None:
		week_json['week'] = week
		return json.dumps(week_json)",使用ORM的方式与params字符串匹配方法设置SQL（获取$Week$表中week_id为$week_id$的所有列），利用$session$获取第一条数据。如果查询的数据不为空，将其转化为字典'week'键的值，并转化为json结构返回,"Use the ORM method and the params string matching method to set SQL (get all the columns in the $Week$ table where week_id is $week_id$), and use $session$ to get the first piece of data. If the query data is not empty, convert it to the value of 'week' key in the dictionary and the json structure, and return."
13880,"from flask import render_template
def Query_Book(conn, isbn):
	query = ""SELECT * FROM books WHERE isbn = :isbn""
	info = conn.execute(query, {""isbn"": isbn}).fetchone()
	if info is None or info == []:
		info = False
	else:
		info = True
	return render_template(""info_book.html"", info=info)","设置SQL语句为：根据$isbn$获取books表中的所有列，使用$conn$连接执行SQL并获取第一条数据。如果获取结果为空或查询结果为空list，将查询结果设为False；否则将查询结果设为True。渲染并返回""info_book.html"", 其中info参数为查询结果。","Set the SQL statement to: Get all the columns in the books table based on $isbn$, use $conn$ connection to execute the SQL and get the first piece of data. If the obtained result is empty or the query result is an empty list, set the query result to False; otherwise, set the query result to True. Render and return ""info_book.html"", where the info parameter is the query result."
13933,"def login(conn,username,password):
	try:
		log = conn.execute(""SELECT * FROM users WHERE username = :username and password = :password"",{""username"": username, ""password"": password}).fetchone()
		return log
	except Exception as e:
		raise e",尝试性使用$conn$连接执行SQL：根据$username$和$password$查询users表中的所有列，并获取第一条数据，返回获取的数据。如果出现Exception，使用raise根据错误信息抛出异常。,"Try to use the $conn$ connection to execute SQL: To query all the columns in the users table based on $username$ and $password$, get the first piece of data, and return the obtained data. If there is an Exception, use raise to throw an exception based on the error message."
11214,"def telldata(session,name):
	res=session.execute(""select id from User where name =: name "",{""name"":name}).fetchall()
	session.commit()
	session.close()
	return res",使用$session$执行SQL（根据$name$查询User表中的id）并获取所有数据，对$session$执行commit方法后并关闭，最后将查询结果返回,"Use $session$ to execute SQL (query 'id' in the User table based on $name$) and get all the data. Then execute commit method on $session$ and close, and finally return the query result."
11617,"from sqlalchemy import create_engine
def test_fetchone(db,id):
	engine = create_engine(db)
	result = engine.execute(""select * from Table where id = :id"",{""id"":id}).fetchone()
	return result",使用$db$获取数据库引擎，执行SQL（根据$id$获取Table表中的所有列）并获取第一行数据，最后返回查询结果,"Use $db$ to get the database engine, execute SQL (get all the columns in the 'Table' table according to $id$), get the first row of data, and finally return the query result."
13928,"def index(conn, dist):
	sql = ""SELECT date FROM runs WHERE dist =: dist""
	result = conn.execute(sql,{""dist"":dist}).fetchall()
	recent_runs = []
	for row in result:
		recent_runs.append(row[0])
	return recent_runs",设置SQL语句：根据$dist$查询runs中的date，使用$conn$连接执行SQL获取所有数据。使用for循环将查询结果中每一项的第二个元素存储到list中，并返回list内容。,"Set the SQL statement: Query the date in runs table based on $dist$, use the $conn$ connection to execute SQL and get all the data. Use for loop to store the second element of each item in the query result into list and return the list content."
13979,"from flask import jsonify
def get(db_connect, id):
	conn = db_connect.connect()
	sql = ""SELECT * FROM customers WHERE id =: id""
	query = conn.execute(sql,{""id"":id}).fetchall()
	result = [dict(i) for i in query]
	return jsonify(result)",通过$db_connect$连接数据库，设置SQL语句（根据$id$查询customers表中的所有列），执行SQL语句获取所有数据，将执行结果每一项转化为dict存储为list，并通过jsonify返回执行结果。,"Connect to the database through $db_connect$, set the SQL statement (query all the columns in the customers table according to $id$), execute the SQL statement to get all the data, convert each item of the execution result into dict, store it as list, and return the execution result through jsonify."
11645,"from sqlalchemy.sql import select
def get_values(engine,regression,mid):
	with engine.connect() as connection:
		sql = select([regression.c.values]).where(regression.c.measure_id==mid)
		vs = connection.execute(sql).fetchall()
		return vs",使用with语句利用$engine$连接数据库，根据python表达式的方式执行SQL(获取$regression$表中measure_id为$mid$的values列)并获取所有数据，最后返回查询结果,"Use the with statement and $engine$ to connect the database, execute SQL according to the python expression (get the values column in the $regression$ table whose measure_id is $mid$), get all the data, and finally return the query result."
13378,"from flask import render_template
def login_func(conn,username):
	if username:
		users=conn.execute(""SELECT * FROM users WHERE username=:username"",{""username"":username}).fetchall()
		return render_template('login.html', users=users)
	else:
		return render_template('error.html')",如果username不为空：使用$conn$执行SQL（根据$username$查询username表中所有列），并获取所有查询结果，返回渲染后的'login.html'页面，参数users为查询结果。否则返回渲染后的'error.html'页面。,"If username is not empty, use $conn$ to execute SQL (query all columns in the username table based on $username$), get all the query results, and return the rendered 'login.html' page, where the parameter users is the query result; otherwise, return the rendered 'error.html' page."
13433,"from sqlalchemy import create_engine
def start_requests(DB_CONNECT_STRING):
	engine = create_engine(DB_CONNECT_STRING, max_overflow=5)
	profileurls = engine.execute(""SELECT profileurl FROM portal_profile"").fetchall()
	for i in profileurls:
		print(i)",根据$DB_CONNECT_STRING$获取数据库引擎，其中max_overflow参数为5，然后执行SQL（获取portal_profile表中的profileurl列）并获取所有数据，再使用for循环打印查询结果的每一项,"Get the database engine based on $DB_CONNECT_STRING$, where the max_overflow parameter is 5. Then execute the SQL (get the profileurl column in the portal_profile table) and get all the data. Use for loop to print each item of the query results."
13443,"from sqlalchemy.sql import select,and_
def getStates(engine, RESULT_TABLE, start, end):
	conn = engine.connect()
	rows = conn.execute(select([RESULT_TABLE]).where(and_(RESULT_TABLE.c.time > start),RESULT_TABLE.c.time < end)).fetchall()
	ret = []
	for row in rows:
		ret.append(row)
	return ret",使用$engine$连接数据库并根据python表达式的方式执行SQL（获取$RESULT_TABLE$表中time大于$start$和time小于$end$的所有列）并获取所有数据，然后使用for循环对查询结果的每一项存储为list，最后返回list内容,Use $engine$ to connect to the database and execute SQL based on the Python expression (get all columns in the $RESULT_TABLE$ table with time greater than $start$ and time less than $end$) and get all the data. Use for loop to store each item of the query results as list and finally return the contents of the list.
13831,"from sqlalchemy.sql import select
def get_question(conn,question,question_id):
	s = select(question.c.question_record).where(question.c.question_id == question_id)
	record = conn.execute(s)
	return record.fetchall()",使用Python表达式的方式设置SQL语句为根据$question_id$获取$question$表中的所有question_record，使用$conn$连接执行SQL语句，返回所有的查询结果。,Use the Python expression to set the SQL statement to get all the question_record in the $question$ table based on $question_id$. Use $conn$ connection to execute the SQL statement and return all the query results.
13503,"def search(engine, LIMIT):
	result = engine.execute('SELECT * FROM data_dict where LIMIT=:LIMIT',{""LIMIT"":LIMIT}).fetchall()
	assert len(result)!=0
	fields_info = []
	for name in result:
		fields_info.append(name)
	return fields_info",利用$engine$执行SQL（根据$LIMIT$查询data_dict表中所有列），并获取所有查询结果，设置断言判断查询结果长度是否不等于0。用for循环遍历获取的所有查询结果，将每条数据插入一个list中，并返回这个list。,"Use $engine$ to execute SQL (query all columns in the data_dict table according to $LIMIT$), get all the query results, and set assertions to determine whether the query result length is not equal to 0. Use for loop to traverse all the query results obtained with for loop, insert each piece of data into a list, and return the list."
14144,"def test(conn, name):
	sql = 'SELECT id from t where name=:name'
	result = conn.execute(sql,{""name"":name}).fetchall()
	print(result)
	return result",设置SQL语句：查询t表中name为$name$的id数据，通过$conn$执行SQL获取所有数据，将执行语句的结果打印并返回。,"Set up SQL statement: Query the id data in t table with 'name': $name$, execute SQL by $conn$ to get all the data, print and return the result of the execution statement."
13614,"from flask import render_template,request
def sing_in(conn, username, password):
	if request.method == 'POST':
		setl = ""SELECT email FROM users WHERE username=:username and password=:password""
		result = conn.execute(setl, {""username"": username, ""password"": password}).fetchall()
		if result == None:
			return render_template('index.html', message = 'fail')
		return render_template('search.html')",如果request的请求方法为POST，则执行如下代码：设置SQL（根据$username$和$password$查询users中的$email$）；使用$conn$执行SQL并获取所有数据；如果查询结果等于None，则返回渲染后的'index.html'且message参数传入'fail'；否则返回渲染后的'search.html'页面。,"If the request method is POST, execute the following code: set SQL (querying $email$ in users where username is $username$ and password is $password$). Execute SQL with $conn$ and get all the data. If the query result is equal to None, return the rendered 'index.html' and pass the  parameter of message into 'fail', otherwise, return to rendered 'search.html'."
13232,"def search_flight(conn):
	flights = conn.execute(""SELECT * FROM flights"").fetchall()
	for fl in flights:
		print(fl)",使用$conn$执行SQL语句（查询flights表中的所有列），获取所有数据并使用for循环方式打印。,"Execute the SQL statement (query all columns in the flights) with $conn$, get all the data, and print it using the for loop."
11197,"from sqlalchemy.sql import select
def query_tb(conn,dbname,col):
	s = select(dbname).where(dbname.c.col == col)
	res = conn.execute(s).fetchall()
	return res",使用Python表达式的方式设置SQL（通过$col$查询$dbname$中的所有数据），通过$conn$连接执行SQL并返回获取的数据。,"Set up the SQL using a Python expression (query all the data in $dbname$ where col is $col$) , execute the SQL over the $conn$ connection and return the acquired data."
11324,"from sqlalchemy import create_engine
def executeSql(url, DbProp):
	engine = create_engine(url, echo=False)
	conn = engine.connect()
	try:
		kanou = conn.execute(""SELECT * FROM test_data where DbProp=:DbProp"", {""DbProp"": DbProp}).fetchall()
		return kanou
	finally:
		conn.close()",通过$url$获取数据库引擎，其中echo参数赋值为False，建立连接。尝试执行SQL语句（根据$DbProp$查询test_data表中所有列）并获取所有数据，并返回查询结果，最终关闭连接。,"Get the database engine through $url$, where the echo parameter is assigned to False, and establish a connection. Try to execute the SQL statement (query all the columns in the test_data table according to $DbProp$) and get all the data, return the query results, and finally close the connection."
14042,"def get_heartbeat_serial(conn):
	query = ""select * from yelp_heartbeat""
	result = conn.execute(query).fetchone()
	return result",设置SQL语句：查询yelp_heartbeat表中的所有列，使用$conn$执行SQL获取第一条数据，返回所获取的数据。,"Set the SQL statement: Query all the columns in the yelp_heartbeat table, use $conn$ to execute SQL to get the first piece of data, and return the obtained data."
14024,"from sqlalchemy.sql import select
def get_plot_id(plot_name, parent_plots,con):
	query= select([parent_plots.c.id]).where(parent_plots.c.name == plot_name)
	res = con.execute(query).fetchall()
	id_l = []
	for result in res:
		id_l.append(result[0])
	return id_l",使用Python表达式的方式设置SQL语句：根据$plot_name$查询$parent_plots$表中的id数据，使用$con$执行SQL语句并获取所有数据。使用for循环将查询结果中每一项的第0个元素存储到list中，返回list内容。,"Use the Python expression set the SQL statement: Query the id data in the $parent_plots$ table based on $plot_name$, use $con$ execute the SQL statement and get all the data. Use for loop to store the 0th element of each item in the query result into list and return the list content."
13865,"from flask import jsonify
def get_info(db_connect, name):
	conn = db_connect.connect()
	query = ""SELECT * FROM customers WHERE name = :name""
	result = conn.execute(query, {""name"": name})
	return jsonify(result)",通过$db_connect$连接数据库，设置SQL（根据$name$查询customers中的所有列），执行SQL语句获取全部数据，使用jsonify返回所有的查询结果。,"Connect to the database through $db_connect$, set the SQL (query all columns in customers based on $name$). Execute the SQL statement to get all the data. Use jsonify to return all the query results."
13557,"def worker(engine,traceback):
	conn = engine.connect()
	try:
		res=conn.execute(""SELECT * from stderr where traceback=:traceback"",{""traceback"":traceback}).fetchall()
		conn.close()
		return res
	except Exception:
		return False",利用$engine$连接数据库，尝试执行SQL（根据$traceback$查询stderr表中所有列），并获取所有数据，关闭数据库，返回查询数据。如果执行时出现Exception异常，则返回False。,"Connect the database with $engine$, try to execute SQL (query all columns in the stderr table based on $traceback$), get all the data, close the database, and return the query data. If an Exception occurs during execution, return False."
13543,"def get_table(cur, phone):
	query = ""SELECT clothes FROM tablename where phone=:phone""
	res = cur.execute(query,{""phone"":phone})
	return res.fetchall()","设置sql（根据$phone$查询tablename表中clothes列）,使用$cur$执行SQL并返回获取的所有查询结果。","Set up sql (query the clothes column in the tablename table based on $phone$), execute SQL with $cur$ and return all the obtained query results."
14164,"from sqlalchemy import create_engine
def update_geom_srid_sl(db_url, m_type):
	engine = create_engine(db_url, echo=True)
	conn = engine.connect()
	try:
		sql_query_string = ""SELECT f_table_name FROM m_Table where type=:m_type""
		res =conn.execute(sql_query_string,{""m_type"":m_type}).fetchall()
		return res
	except Exception as e:
			raise e
	finally:
		conn.close()",通过$db_url$创建数据库引擎（其中echo参数为True）并建立连接。尝试设置SQL语句：查询m_Table表中type为$m_type$的f_table_name数据，执行SQL语句获取全部数据并将其返回。如果出现Exception，则使用raise根据错误信息抛出异常。最后确保数据库连接关闭。,"Create the database engine via $db_url$ (where the echo parameter is True) and establish a connection. Try to set up the SQL statement: Query the m_Table table with type $m_type$ for f_table_name data, execute the SQL statement to get all the data and return. If an Exception occurs, use 'raise' to throw an exception based on the error message. Finally, make sure the database connection is closed.

Translated with www.DeepL.com/Translator (free version)"
13290,"def select_value(engine, name):
	with engine.connect() as con:
		sql = ""SELECT * from transactions WHERE name =: name""
		results = con.execute(sql,{""name"":name}).fetchall()
		if results is None:
			return None
		return [dict(row) for row in results]",在with语句中，使用$engine$获取数据库连接。执行SQL语句（根据$name$获取transactions表的所有列）获取所有数据，如果查询结果为None则直接返回，否则将查询结果中每一项转化为dict后返回。,"In the with statement, use $engine$ to get the database connection. Execute the SQL statement (get all the columns of the transactions where name is $name$) to get all the data and return it directly if the query result is None, otherwise every item in the query result is converted to dict and return."
11318,"def getServices(connection, limit):
	request = ""SELECT appel FROM services where limit = {}"".format(limit)
	result = connection.execute(request).fetchall()
	return result","使用format字符串匹配方法设置SQL（根据$limit$查询表services中appel列）,使用$connection$执行SQL，并获取所有数据。返回查询结果。","Use the format string matching method to set the SQL (query the appel column in the services table based on $limit$), use $connection$ to execute the SQL, and get all the data. Return the query results."
11330,"def ping_connection(conn,record,proxy):
	try:
		cursor = conn.execute(""select dbapi from connection where record=:record and proxy=:proxy"",{""record"":record,""proxy"":proxy}).fetchone()
		cursor.close()
		return cursor
	except:
		raise Exception",尝试使用$conn$执行SQL（根据$record$和$proxy$查询connection表中dbapi列），并获取第一条数据，关闭连接，返回查询数据，如果出现异常，引发执行Exception,"Try to use $conn$ to execute SQL (query the dbapi column in the 'connection' table based on $record$ and $proxy$), get the first piece of data, close the connection, return the query data, and if an exception occurs, trigger and execute Exception."
13565,"from sqlalchemy import create_engine
from flask import jsonify
def getyears(postgresql,date):
	engine = create_engine(postgresql)
	data = engine.execute(""select date_part from stock_data where date=:date"",{""date"":date}).fetchall()
	newdata = []
	for x in data:
		newdata.append(x)
	return jsonify(newdata)",通过$postgresql$获取数据库引擎，执行SQL语句（根据$date$查询stock_data表中date_part列），并获取所有数据，用for循环遍历获取的所有查询结果，将每条数据插入一个list中，并将这个list转化为json并返回。,"Get the database engine through $postgresql$, execute the SQL statement (query the date_part column in the stock_data table according to $date$), get all the data, use for loop to traverse all the query results, insert each piece of data into a list, and convert the list to json and return."
14008,"def get_signals(conn):
	request= 'SELECT * FROM FRC_CUSTOMSIGNALS '
	result_custom_signals = conn.execute(request).fetchone()
	return result_custom_signals",将“从FRC_CUSTOMSIGNALS表中查询所有列”设置为SQL语句，使用$conn$执行SQL语句获取第一条数据并将其返回。,"Set query all columns from the FRC_CUSTOMSIGNALS table to the SQL statement, use the $conn$ to execute the SQL statement to get the first piece of data and return."
14270,"from sqlalchemy import create_engine
from sqlalchemy.orm.session import sessionmaker
def get_user_repo(seafile_db, owner_id):
	engine = create_engine(seafile_db)
	DB_Session = sessionmaker(bind=engine)
	session = DB_Session()
	ret = session.execute(""select repo_id from RepoOwner where owner_id = :owner_id "", {'owner_id': owner_id}).fetchone()
	for t in ret:
		return t[0]",运用$seafile_db$获取数据库引擎。使用sessionmaker()创建一个配置过的DB_Session类，并通过bind参数绑定数据库引擎。实例化DB_Session，然后使用$conn$执行SQL语句：通过$owner_id$查询RepoOwner中的第一条repo_id数据。for循环遍历查询结果并返回第0个元素。,"Use $seafile_db$ to get the database engine. Use sessionmaker () to create a configured DB_Session class and bind the database engine through the 'bind' parameter. Instantiate DB_Session, and then use $conn$ to execute the SQL statement: Query the first piece of repo_id data in RepoOwner through $owner_id$. Use for loop traversal to query the results and return the 0th element."
13334,"from sqlalchemy.sql import select
def query_sqlite(conn,book_title,id):
	cur = conn.cursor()
	s = select(book_title).where(book_title.c.id == id)
	cur.execute(s).fetchall()
	count = 0
	for record in cur.fetchall():
		if record:
			count += 1
	print(count)",根据python表达式设置SQL：（根据$id$查询$book_title$表中所有列）。通过$conn$执行SQL并获取所有数据，使用for循环遍历每一项查询结果，有数据便计数，最后打印计数结果。,"Set SQL based on the python expression (query all columns in the $book_title$ table based on $id$). Execute SQL with $conn$, get all the data, use for loop to traverse each query result, count the data if there is any, and finally print the count result."
11308,"import sqlalchemy
def connect_to_database(conn_string,user, passwd):
	engine = sqlalchemy.create_engine(conn_string)
	connection = engine.connect()
	u = connection.execute('SELECT * FROM USERS WHERE user = :user and passwd = :passwd', {""user"":user,""passwd"": passwd}).fetchone()
	return u",通过$conn_string$获取数据库引擎并建立连接。执行SQL语句（根据$user$和$passwd$查询USERS表中的第一条数据），并将查询结果返回。,Get the database engine and establish a connection through $conn_string$. Execute the SQL statement (query the first piece of data in the USERS table based on $user$ and $passwd$) and return the query results.
13284,"import sqlalchemy
def search(DB_HOST):
	try:
		engine = sqlalchemy.create_engine(DB_HOST)
		conn = engine.connect()
		result_set = conn.execute(""SELECT * FROM TABLE"").fetchall()
		result = []
		for item in result_set:
			result.append(item)
		return result
	except Exception:
		return False",尝试通过$DB_HOST$获取数据库引擎并建立连接，使用连接执行SQL语句（选取TABLE表中的所有列）并获取所有数据。使用for循环将查询结果转化为list后返回；如果产生异常，则返回False,"Try to get the database engine and make the connection through $DB_HOST$, use the connection to execute the SQL statement (select all the columns in the TABLE) and get all the data. Return after converting the query result to a list using a for loop. Return False if an exception is generated."
14185,"def get_all_customers(conn):
	stmt = 'SELECT * FROM CUSTOMER'
	data = conn.execute(stmt).fetchall()
	return data",设置SQL语句：从CUSTOMER表中查询所有列，通过$conn$执行SQL获取所有数据并将其返回。,"Set up the SQL statement: Query all columns from CUSTOMER table, execute SQL via $conn$ to get all the data and return."
13781,"def simple_select(conn,id):
	sql = ""SELECT field from table where id = :id""
	result = conn.execute(sql,{""id"":id}).fetchall()
	return result",设置SQL（根据$id$查询table表中field列），根据$conn$执行SQL并获取所有查询结果，并将数据返回。,"Set SQL (query the field column in the 'table' table according to $id$), execute SQL according to $conn$, get all the query results, and return the data."
13450,"from sqlalchemy import create_engine
def get_tech_info_by_tech_id(call_center, tech_id):
	engine = create_engine(call_center, echo=True)
	conn = engine.connect()
	sql = ""SELECT * FROM technician WHERE tech_id =: tech_id""
	results = conn.execute(sql,{""tech_id"":tech_id}).fetchall()
	return results",使用$call_center$获取数据库引擎，其中echo参数为True，然后连接数据库，再执行SQL（根据$tech_id$获取technician表中的所有列）并获取所有数据，最后返回查询结果,"Use $call_center$ to get the database engine, where the echo parameter is True. Connect to the database, then execute the SQL (get all the columns in the technician table based on $tech_id$) and get all the data. Finally return the query results."
14023,"def queryUsuario(conn):
	try:
		cur = conn.cursor()
		res = cur.execute(""select id, name, lastname from users"").fetchall()
		return res
	finally:
		cur.close()
		conn.close()","通过$conn$创建游标，执行SQL语句：从users表中获取所有的id, name, lastname数据，并返回查询结果，最后：关闭游标和数据库连接。","Create the cursor through $conn$, execute the SQL statement: Get all the id, name, lastname data from the users table, return the query results, and finally: Close the cursor and database connection."
14035,"def get_bar_topManu(engine, transactionID, name):
	with engine.connect() as con:
		query = ""SELECT COUNT(*) FROM Transactions WHERE transactionID = :transactionID AND name = :name ""
		rs = con.execute(query, {""transactionID"":transactionID,""name"":name}).fetchone()
		results = [dict(row) for row in rs]
		return results",使用with语句根据$engine$连接数据库。设置SQL查询语句，其内容为：根据$transactionID$和$name$查询Transactions表中的所有列的统计值，执行SQL语句获取第一条数据，将查询结果每一项转化为dict存储为list并返回。,"Use the with statement to connect to the database according to $engine$. Set up the SQL query statement, which contains: Query the statistical values of all columns in the Transactions table according to $transactionID$ and $name$, execute the SQL statement to get the first piece of data, convert each item of the query result into dict, store it as list, and return."
13750,"def select_quote_from_db_sql(conn, sito_q, area_q, us_q):
	sql_query_string = ""SELECT * FROM hff_quote WHERE sito_q=:sito_q AND area_q=:area_q AND us_q=:us_q""
	res = conn.execute(sql_query_string,{""sito_q"":sito_q,""area_q"":area_q,""us_q"":us_q}).fetchall()
	return res","设置sql（根据$sito_q$，$area_q$和$us_q$查询hff_quote表中全部信息）,使用$conn$执行SQL并获取所有查询结果，并返回查询结果。","Set up sql (query all the information in the hff_quote table based on $sito_q$, $area_q$ and $us_q$), use $conn$ to execute SQL, get all the query results, and return them."
13691,"def getStudentDept(connects, id):
	res = connects.execute(""SELECT name from department where id =:id"",{""id"":id}).fetchone()
	if (len(res)> 0):
		return res[0][0]
	return False",使用$connects$执行SQL（根据$id$查询department表中的name信息）并获取第一条数据。如果查询结果长度大于0，则返回查询结果[0][0]号元素。否则返回False。,"Execute the SQL using $connects$ (query the information of name  in the department table where id is $id$) and get the first data. If the length of the query result is greater than 0, return the query result [0][0] element. Otherwise, return False."
13298,"def select_value(conn, cluster_id):
	if cluster_id is not None:
		sql = ""SELECT * FROM clusters WHERE cluster_id =: cluster_id""
		results = conn.execute(sql,{""cluster_id"":cluster_id}).fetchall()
		for i in results:
			print(i)",如果$cluster_id$不为None，则使用$conn$执行SQL（根据$cluster_id$获取clusters表中的所有列）并获取所有数据。使用for循环打印查询结果中的每一项。,"If $cluster_id$ is not None, execute SQL with $conn$ (get all the columns in the clusters where the id of cluster is $cluster_id$) and get all the data. Print each item in the query result using a for loop."
11250,"from sqlalchemy import create_engine
def addCompra(db_string, id_fornecedor):
	db = create_engine(db_string)
	try:
		res=db.execute(""select * from sistema where id_fornecedor=:id_fornecedor"",{""id_fornecedor"":id_fornecedor}).fetchall()
	except:
		res = False
	return res",通过$db_string$获取数据库引擎，尝试执行SQL语句（根据$id_fornecedor$获取sistema中的所有列）并获取所有数据，否则则返回结果为False，最后返回获取的结果,"Get the database engine by $db_string$, try to execute the SQL statement (get all columns in sistema based on $id_fornecedor$) and get all the data. Otherwise return the result as False, and finally return the obtained result."
11634,"def years_ep(conn, name):
	try:
		sql_select_Query = ""select data_year from vw_muertes_estado where muertes_name = :name""
		years = conn.execute(sql_select_Query,{""name"":name}).fetchall()
		return years
	except Exception as e:
		print(e)",尝试使用$conn$执行SQL（根据muertes_name为$name$获取vw_muertes_estado表中的data_year列）并获取所有数据，返回查询结果，如果执行时出现异常，则打印异常,"Try to use $conn$ to execute SQL (get the data_year column in the vw_muertes_estado table where muertes_name is $name$), get all the data, return the query result, and print the exception if there is an exception during execution."
13522,"from flask import jsonify
def otu(conn,found):
	tmp = conn.execute(""SELECT unit_found FROM Otu where found=:found"",{""found"":found}).fetchall()
	otu_list = [x for x in tmp]
	return jsonify(otu_list)",利用$conn$执行SQL（根据$found$查询Otu表中unit_found列），并获取所有查询结果，用for循环遍历获取的所有查询结果，并插入一个list。将这个list转化为json并返回.,"Execute SQL with $conn$ (query the unit_found column in the Otu table based on $found$), get all the query results, use for loop to traverse the query results, insert a list, convert this list to json and return."
13280,"def select_value(conn, value):
	sql = ""SELECT * FROM TABLE WHERE one_row =: value""
	results = conn.execute(sql,{""value"":value}).fetchall()
	assert len(results) > 0
	return results",设置SQL语句，内容为：当one_row等于$value$时查询TABLE中的所有数据。通过$conn$连接执行SQL语句并获取全部数据。通过断言判断查询结果的长度大于0。最后返回所有数据,"Set the SQL statement to: query all the data in the TABLE where one_row is $value$. Execute the SQL statement and get all the data over the $conn$ connection. Use assertions to determine that the length of the query result is greater than 0. Finally, all the data is returned."
14224,"def read_user(conn, Phone):
	query = ""SELECT City FROM users WHERE Phone=:Phone""
	exc = conn.execute(query,{""Phone"":Phone}).fetchall()
	print(exc)",设置SQL语句（根据$Phone$查询users表中的City）。通过$conn$连接执行SQL获取所有数据并打印。,Set up the SQL statement (query the City in the users table based on $Phone$). Execute SQL to get all the data through the $conn$ connection and print it.
13283,"from flask import request
def select_gds(conn, isbn):
	if request.method == ""POST"":
		sql_gds = ""SELECT * FROM gd WHERE isbn =: isbn""
		gds = conn.execute(sql_gds,{""isbn"":isbn}).fetchall()
		return gds","如果请求方法为""POST""，则使用$conn$执行SQL语句（根据$isbn$获取gd表中所有列）并获取所有数据。最后返回查询结果。","If the request method is ""POST"", use $conn$ to execute the SQL statement (get all the columns in the gd where isbn is $isbn$) and get all the data. Finally, the query results are returned."
13101,"from flask import jsonify
def search(conn,q):
	results = conn.execute(""SELECT * FROM places WHERE postal_code =:q and place_name =:q and admin_code1 =:q"", {""q"":q}).fetchall()
	return jsonify(results)",使用$conn$执行SQL（根据postal_code为$q$、place_name为$q$和admin_code1为$q$获取places表中的所有信息）并获取所有数据，最后返回jsonify处理的查询结果的内容,"Execute the SQL with $conn$ (get all the information in the places where postal_code is $q$, place_name is $q$, and admin_code1 is $q$) and get all the data, and finally return the content of the query processed by jsonify."
14050,"def selectLinks(conn,tgt):
	re = conn.execute(""select src from edges where tgt =: tgt"",{""tgt"":tgt}).fetchall()
	for i in re:
		print(i)",使用$conn$执行SQL语句：根据$tgt$查询edges表中的所有src，for循环遍历所有的查询结果并返回。,"Use $conn$ to execute the SQL statement: Query all the 'src' in the edges table based on the $tgt$ query src, use for loop traversal to query all the results and return."
11101,"from flask import render_template
def book(conn,flight_id):
	try:
		texts = conn.execute(""SELECT name FROM passengers WHERE flight_id=:flight_id"",{""flight_id"":flight_id}).fetchall()
		return render_template('success.html', text = texts)
	except ValueError:
		return render_template('error.html', message='Invalid flight number.')",尝试性使用$conn$查询passengers表中flight_id为$flight_id$的所有name，渲染并返回'success.html'，其中text参数为查询结果。如果出现ValueError，则渲染'error.html'，传入message参数为'Invalid flight number.',"Try to use $conn$ to query all the names in the passengers where the id of flight is $flight_id$, render and return 'success.html', where the text parameter is the result of the query. If a ValueError occurs, then render 'error.html', passing in the message parameter is 'Invalid flight number.'"
11623,"def find_student(session,student,student_id):
	try:
		studs = session.query(student).filter(student.student_id == student_id).all()
		session.close()
		return studs
	except Exception as ex:
		raise ex",尝试使用$session$，根据python表达式的方式执行SQL（获取$student$表中student_id为$student_id$的student列）并获取所有数据，再关闭$session$连接并返回查询结果，如果执行时出现异常，则将异常挂起,"Try to use $session$ to execute SQL according to the python expression (get the student column in the $student$ table whose student_id is $student_id$) and get all the data, then close the $session$ connection and return the query result. If an exception occurs during execution, suspend the exception."
13607,"def search_seq_next_val(db,sequence_name):
	sql = ""select nextval from SEQUENCE where sequence_name = :sequence_name""
	res = db.execute(sql,{""sequence_name"":sequence_name}).fetchone()
	return res",设置SQL：根据$sequence_name$查询SEQUENCE表中的nextval。使用$db$执行SQL并获取第一条数据。返回查询结果。,Set SQL: Query nextval in the SEQUENCE table where sequence_name is $sequence_name$. Execute the SQL using $db$ and get the first data. Return the result of the query.
13836,"def select_Friend(engine, fid):
	conn = engine.connect()
	val = conn.execute(""SELECT name FROM friends WHERE fid =: fid"", {""fid"": fid}).fetchall()
	engine.dispose()
	return [dict(row) for row in val]",通过$engine$连接数据库，执行SQL语句，内容为:根据$fid$查询friends表中的所有name。使用dispose()方法关闭数据库、释放资源。将查询结果每一项转化为dict存储为list并返回。,Connect to the database through $engine$ and execute the SQL statement with the following contents: Query all the name in the friends table based on $fid$. Use the dispose() method to close the database and release resources. Convert each item of the query results into dict and store it as list and return it.
11387,"from flask import jsonify
def get_me_filtered_cities(conn,statecode):
	results = []
	rows = conn.execute(""SELECT city FROM cities where statecode=:statecode"",{""statecode"": statecode}).fetchall()
	for row in rows:
		city = dict(row)
		results.append(city)
	return jsonify(results)","使用$conn$执行SQL（根据$statecode$查询cities表中city列），并获取所有查询结果，使用for循环将查询结果的每一条转化为dict,并以list存储。再将这个list转化为json，并返回","Use $conn$ to execute SQL (query the city column in the cities table according to $statecode$), get all the query results, use for loop to convert each of the query results to dict, and store them in list. Then convert this list to json, and return."
14265,"def flights(con):
	flights = con.execute(""SELECT * FROM flights"").fetchall()
	return flights",通过$con$查询flights表中的所有列，并获取所有数据，将获取的数据全部返回。,"Query all the columns in the flights table through $con$, get all the data, and return all the obtained data."
13351,"def select_res(conn,User,User_id):
	try:
		user = conn.query(User).filter(User.id == User_id).first()
		return user
	except Exception as e:
		print(e)",使用ORM的方式，尝试利用$conn$执行SQL（根据id为$User_id$查询$User$表中全部信息），并获取查询到的第一条数据，返回查询结果。如果捕获到Exception异常，打印这个异常。,"Try to use the ORM method and $conn$ to execute SQL (query all the information in the $User$ table based on the condition that id is $User_id$), get the first piece of queried data, and return the query result. If an Exception is caught, print the exception."
13231,"from sqlalchemy.sql import select
def getFriends(conn, tbl_friends, UID):
	query = select([tbl_friends]).where(tbl_friends.c.friend_uid1 == UID)
	friendsInfo = conn.execute(query).fetchall()
	friendsList = []
	for friend in friendsInfo:
		friendsList.append(friend)
	return friendsList",使用Python表达式的方式设置SQL（当friend_uid1等于$UID$时，查询$tbl_friends$中的所有列）。使用$conn$执行SQL并获取所有数据，将查询结果使用for循环的方式存储为list类型并返回。,"Set the SQL using a Python expression (query all columns in $tbl_friends$ where friend_uid1 is $UID$) . Execute the SQL with $conn$ and get all the data, store the query results as a list type using a for loop, and return."
11490,"def select_value(conn, transactionID):
	query_sql = ""SELECT time FROM Transactions WHERE transactionID =: transactionID""
	rs = conn.execute(query_sql,{""transactionID"":transactionID}).fetchall()
	results = [dict(row) for row in rs]
	return results","设置sql（根据$transactionID$查询Transactions表中time列）,使用$conn$执行SQL并获取所有查询结果，使用for循环将查询结果的每一条转化为dict,以list存储并返回","Set up SQL (query time column in Transactions table based on $transactionID$), use $conn$ to execute SQL and get all query results. Use for loop to convert each query result to dict, store in list and return."
14277,"def index(conn):
	books = conn.execute(""SELECT * FROM books"").fetchall()
	return books",通过$conn$查询books表中的所有列，并获取所有数据，返回获取到的所有数据。,"Query all the columns in the books table through $conn$, get all the data, and return all the data obtained."
11571,"from sqlalchemy import create_engine
def toonGrafiek(psycopg2, email):
	engine = create_engine(psycopg2)
	con = engine.connect()
	res = con.execute(""SELECT name FROM magazijnvoorraad WHERE email = :email"", {""email"": email}).fetchone()
	return res",通过$psycopg2$获取数据库引擎并建立连接。执行SQL语句（根据$email$查询magazijnvoorraad表中的第一条name数据），返回查询结果。,Get the database engine and establish a connection through $psycopg2$. Execute the SQL statement (query the first 'name' data in the magazijnvoorraad table based on $email$) and return the query result.
11535,"def post_location(conn, pincode):
	res = conn.execute(""SELECT * FROM test_table WHERE pincode = :pincode"", {""pincode"": pincode}).fetchall()
	lst = []
	for r in res:
		lst.append(r[0])
	if len(res)>0:
		print(""success"")
	return lst","使用$conn$连接执行SQL语句，其内容为：根据$pincode$查询$test_table$中的所有列，并获取所有数据。使用for循环将查询结果中的每一项的第0个元素都存储到list中。如果查询结果的长度大于0，则打印""success""。否则，将list内容返回。","Use the $conn$ connection to execute the SQL statement and the content is as follows: Query all columns in $test_table$ based on $pincode$ and fetch all data. Use for loop to store the 0th element of each item in the query result in list. If the length of the query result is greater than 0, then print ""success"". Otherwise, return the contents of list."
11105,"def query_page(conn,Casino):
	Bars = conn.execute(""SELECT Bar FROM Barstable WHERE Casino=:Casino"",{""Casino"":Casino}).fetchall()
	return [dict(row) for row in Bars]",使用$conn$连接执行SQL语句（根据$Casino$获取Barstable中的全部Bar），将查询结果每一项转化为dict存储为list并返回。,"Execute the SQL statement using the $conn$ connection (according to $Casino$ to get all the Bars in a Barstable). Transform each query result into dict store it as a list, and return."
13757,"def rename_column(conn, old_column_name, new_column_name):
	sql = ""SELECT table_name FROM table where old_column_name = :old_column_name and new_column_name = :new_column_name""
	res = conn.execute(sql, {""old_column_name"": old_column_name, ""new_column_name"": new_column_name}).fetchall()
	if res is None:
		return False
	else:
		return True","首先设置sql（根据$old_column_name$和$new_column_name$查询table表中table_name列）,使用$conn$执行SQL并获取所有查询结果，如果查询结果为空，返回False，否则返回True。","First set sql (query the table_name column in the 'table' table based on $old_column_name$ and $new_column_name$), use $conn$ to execute SQL and get all the query results. Return False, if the query results are empty; otherwise, return True."
13645,"def print_saved_products(conn,id_orig):
	products_sub = conn.execute(""SELECT * FROM Products WHERE id =:id"",{""id"":id_orig}).fetchall()
	for sub in products_sub:
		print(sub)",使用$conn$执行SQL（查询id为$id_orig$时Products表中的所有列）并获取所有数据。使用for循环打印查询结果中每一项元素。,Execute the SQL (query all the columns in the Products table when the id is $id_orig$) with $conn$ and get all the data. Print each element in the query result using a for loop.
13602,"from flask import render_template
def index(db,note,username):
	if username:
		notes = db.execute(""SELECT user FROM NOTES where username = :username AND note = :note"",{""username"": username, ""note"": note}).fetchall()
		return render_template(""index.html"", notes=notes)","如果$username$存在，则使用$db$执行SQL（根据$username$和$note$查询NOTES中的user信息）并获取所有数据。返回渲染后的""index.html""页面，并将查询结果传给notes参数。","If $username$ exists, use $db$ to execute SQL (query the user information in NOTES where username is $username$ and note is $note$) and get all the data. Return the rendered ""index.html"" page and pass the query result to the notes parameter. "
14209,"from flask import render_template
def api(connection, ISBN):
	book = connection.execute(""SELECT author FROM books WHERE ISBN = :ISBN"", {""ISBN"": ISBN}).fetchone()
	if book is None:
		return None
	return render_template(""error.html"")","通过$connection$执行SQL：根据$ISBN$查询books表中的第一条author数据。如果查询结果为空，则返回None，否则渲染并返回""error.html""。","Execute SQL via $connection$: Query the first author data in the books table based on $ISBN$. If the query result is empty, return None, otherwise render and return ""error.html""."
14250,"from flask import request
def search(conn, title):
	if request.method == ""POST"":
		searchResult = conn.execute(""SELECT isbn, author FROM books WHERE title =:title "",{""title"":title}).fetchall()
		print(searchResult)
		if len(searchResult)<1:
			return False
		return searchResult",如果request模块发送请求的方式为post，则通过$conn$连接执行SQL（通过$title$查询books中的所有isbn和author），打印查询结果。如果查询结果的长度小于1，返回False；否则返回查询结果。,"If the request module sends the request in a post method, execute SQL through the $conn$ connection (query all isbn and author in the books through $title$) and print the query results. If the length of the query result is less than 1, return False; otherwise, return the query result."
11597,"def Operate(conn, name):
	cursor = conn.cursor()
	ope = cursor.execute(""SELECT * FROM user_table WHERE name = :name"", {""name"": name}).fetchall()
	print(ope)",通过$conn$创建游标，使用游标执行SQL语句：根据$name$查询user_table表中的全部列，并获取所有数据，最后打印查询结果。,"Create a cursor with $conn$, and use the cursor to execute SQL statement: Query all columns in the user_table table based on $name$, get all the data, and finally print the query results."
14204,"from sqlalchemy.sql import select
def getRspec (conn, slivers, sliver_urn):
	s = select(slivers).where(slivers.c.sliver_urn==sliver_urn)
	result = conn.execute(s).fetchone()
	return result[0]",通过Python表达式的方式设置SQL语句：查询$slivers$表中sliver_urn为$sliver_urn$的内容。通过$conn$执行SQL获取第一条数据，返回获取数据的第0个元素。,Set the SQL statement via the Python expression: Query the contents of the $slivers$ table where sliver_urn is $sliver_urn$. Execute SQL via $conn$ to get the first piece of data and return the 0th element of the obtained data.
13814,"from flask import render_template
def books(db, title):
	book = db.execute(""SELECT * FROM books WHERE title = :title"", {""title"": title}).fetchone()
	bookId = book['id']
	reviews = db.execute(""SELECT * FROM reviews WHERE book_id = :book_id"", {""book_id"": bookId}).fetchall()
	if book is None:
		return render_template(""error.html"")
	return render_template(""book.html"", book=book, reviews=reviews)","step1：使用$db$连接执行SQL语句：根据$title$查询books表中的所有列，并获取第一条数据，获取该查询结果中的id:。step2：使用$db$连接执行SQL语句：当book_id等于获取的id时，查询reviews表中所有列，并获取所有数据。如果step1的查询结果为空，渲染并返回""error.html""；否则，渲染并返回""book.html"", 其中book参数为step1的查询结果, reviews参数为step2的查询结果。","Step1: use $db$ connection to execute SQL statement: Query all columns in the books table based on $title$, get the first piece of data and get the id in the query results. Step2: use $db$ connection to execute SQL statement: Query all columns in the reviews table where book_id is the obtained id and get all the data. If the query result of step1 is empty, render and return ""error.html""; otherwise, render and return ""book.html"", where the book parameter is the query result of step1 and the reviews parameter is the query result of step2."
13405,"def flight(conn, id):
	flights = []
	sql = ""SELECT flight FROM flights WHERE id =: id""
	results = conn.execute(sql,{""id"":id}).fetchall()
	for row in results:
		flights.append(row[0])
	return flights",使用$conn$执行SQL（根据$id$获取flights表中的flight列）并获取所有数据，然后使用for循环对查询结果的每一项的第0个元素存储为list，最后返回list内容,"Use $conn$ to execute the SQL (get the flight column in the flights table based on $id$) and get all the data, then use for loop to store the 0th element of each item in the query result as list, and finally return the list contents"
13448,"def main(conn, isbn):
	title_sql = ""SELECT title FROM books WHERE isbn =: isbn""
	books = conn.execute(title_sql,{""isbn"":isbn}).fetchall()
	return books",利用$conn$执行SQL（根据$isbn$获取books表中的title列）并获取所有数据，最后返回查询结果,Use $conn$ to execute the SQL (get the title column in the books table based on $isbn$) and get all the data. Finally return the query results.
13171,"def submit_review(conn,book_id,user_id):
	res=conn.execute(""SELECT * FROM reviews WHERE book_id = :book_id and user_id = :user_id"", {""book_id"": book_id, ""user_id"": user_id}).fetchall()
	return res",使用$conn$执行SQL（根据$book_id$和$user_id$获取reviews表中的所有列）并获取所有数据，最后返回查询结果,"Execute the SQL (get all the columns in the reviews where the id of book is $book_id$ and the id of user is $user_id$) with $conn$, get all the data, and return the query results."
14064,"def test_sqlalchemy_connection_execute_mysql(engine):
	connection = engine.connect()
	query = ""SELECT title FROM movies""
	result = connection.execute(query).fetchone()
	assert len(result)>0
	return result",通过$engine$连接数据库，设置SQL语句，内容为：从movies表中查询title，执行SQL获取第一条数据，设置断言判断查询结果的长度大于0，返回查询结果。,"Connect to the database through $engine$ and set the SQL statement, which is as follows: Query 'title' in the movies table,  execute SQL to get the first piece of data, set the assertion to judge that the length of the query result is greater than 0, and return the query result."
13823,"def get_value(engine,registerTbl,email):
	conn = engine.connect()
	try:
		query = conn.query(registerTbl).filter(registerTbl.email == email).first()
		return query
	except Exception as e:
		raise e
	finally:
		conn.close()",通过$engine$连接数据库。尝试性使用ORM方式执行SQL语句：使用$email$查询$registerTbl$表中的第一条数据，返回查询结果。若出现Exception异常，则使用raise根据错误信息抛出异常。最后确保数据库关闭。,"Connect to the database through $engine$. Try to use the ORM method to execute SQL statement: Query the first piece of data in the $registerTbl$ table using $email$ and return the query result. If Exception occurs, use raise to throw the exception based on the error message. Finally make sure the database is closed."
11414,"def get_reviews_by_isbn(conn, isbn):
	res = conn.execute('SELECT * FROM reviews WHERE isbn = :isbn', {'isbn': isbn}).fetchall()
	cache = []
	for rev in res:
		cache.append(rev)
	return cache",利用$conn$执行SQL（根据$isbn$查询reviews表中所有列），并获取所有查询结果，使用for循环将查询结果的每一条存储到list中，并返回这个list。,Execute the SQL with $conn$ (query all columns in the reviews table based on $isbn$) and get all the query results. Use for loop to store each of the query results into list and return the list.
13432,"from sqlalchemy import create_engine
def test_simple(db_uri, table):
	engine = create_engine(db_uri)
	master_sql = ""SELECT * FROM sqlite_master WHERE type =: table""
	res = engine.execute(master_sql,{""table"":table}).fetchall()
	return [row[0] for row in res]",使用$db_uri$获取数据库引擎并执行SQL（根据type为$table$获取sqlite_master表中的所有列）并获取所有数据，然后再使用for循环对查询结果的每一项的第0个元素存储为list，最后返回list内容,Use $db_uri$ to get the database engine and execute SQL (get all columns in sqlite_master table with type as $table$) and get all the data. Use for loop to store the 0th element of each item of the query results as list and finally return the contents of list.
13797,"from flask import render_template
def profile(con,factory):
	cur = con.cursor()
	cur.execute(""SELECT * FROM players where factory = :factory"",{""factory"":factory})
	rows = cur.fetchall()
	return render_template(""profile.html"", rows = rows)","利用$con$建立游标，执行SQL（根据$factory$查询players表中所有列），并获取所有查询结果，返回渲染后的""profile.html""页面，并将查询结果设置为参数rows的值，","Use $con$ to set up a cursor, execute SQL (query all columns in the players table according to $factory$), get all the query results, return the rendered ""profile.html"" page, and set the query results to the value of the parameter rows."
13669,"from sqlalchemy.sql import select
def current_state(conn, event_table, sample_id):
	stmt = select([event_table.c.sample_state_id]).where(event_table.c.sample_id==sample_id)
	all_states = conn.execute(stmt).fetchall()
	current_state_id = all_states[0][0]
	return current_state_id",使用python表达式方式设置SQL：根据$sample_id$查询$event_table$中的sample_state_id。使用$conn$执行SQL并获取所有数据。返回查询结果中的[0][0]号元素。,Set up the SQL using a Python expression: query sample_state_id in $event_table$ where sample_id is $sample_id$. Execute SQL with $conn$ and get all the data. Return the [0][0] element in the query result.
11353,"def insert_student(conn,total_per_day):
	ins = conn.execute(""select autoload_width FROM autoload where total_per_day=:total_per_day"", {""total_per_day"": total_per_day}).fetchone()
	print(ins)
	return ins",使用$conn$执行SQL（根据$total_per_day$查询autoload表中autoload_width列的第一行数据），并将数据打印，返回。,"Use $conn$ to execute SQL (query the first row of data in the autoload_width column of the autoload table based on $total_per_day$), print the data, and return."
13252,"def test_delete_by_id(conn, id):
	my_entity_sql = ""SELECT * FROM my_entities WHERE id =: id""
	entities = conn.execute(my_entity_sql,{""id"":id}).fetchall()
	assert len(entities) == 2
	return entities",在python表达式方式下设置SQL（根据$id$选取my_entities表中的所有列）。使用$conn$执行SQL并获取所有数据，设置断言判断查询结果长度等于2，最后返回查询结果。,"Set the SQL (select all columns in my_entities where id is $id$) in a Python expression. Execute the SQL with $conn$ and get all the data, set assertion to determine that the query result length is equal to 2, and return the query result."
13679,"def get_chunksize(conn,test_frame):
	sql = ""SELECT * FROM roundtrip WHERE test_frame=:test_frame""
	res = conn.execute(sql,{""test_frame"":test_frame}).fetchall()
	return res",设置SQL（根据$test_frame$查询roundtrip表中所有列）。使用$conn$执行SQL并获取所有数据，最后返回查询结果。,"Set the SQL (query all columns in the roundtrip table where test_frame is $test_frame$) . Execute the SQL with $conn$ and get all the data, then return the query results."
13256,"def select_coolkids(engine, nick):
	conn = engine.connect()
	cool_sql = ""SELECT * FROM coolkids WHERE nick =: nick""
	coolkids = conn.execute(cool_sql,{""nick"":nick}).fetchall()
	return coolkids",通过$engine$建立连接。执行SQL语句（根据$nick$选取coolkids表中的所有列）并在获取所有数据后返回。,Connect via $engine$. Execute the SQL statement (select all columns in the coolkids where nick is $nick$) and return after getting all the data.
13274,"from sqlalchemy.sql import select
def get_source(conn, pairings, search_id):
	sql = select([pairings]).where(pairings.c.search_id == search_id)
	results = conn.execute(sql).fetchall()
	print(results)
	return results",使用Python表达式的方式设置SQL（通过$search_id$查询$pairings$中的所有列）。使用$conn$执行SQL并获取所有数据，打印并返回所有数据。,"Set the SQL using a Python expression (query all columns in $pairings$ where the id of search is $search_id$). Execute SQL with $conn$ and get all the data, print and return all the data."
11593,"def test_basic_spacetime(conn, entity_id):
	rows = conn.execute(""SELECT * FROM events_aggregation_imputed WHERE entity_id = :entity_id"", {""entity_id"": entity_id}).fetchall()
	assert len(rows)!=0
	return rows",使用$conn$执行SQL语句（根据$entity_id$查询events_aggregation_imputed中的所有列）并获取所有数据，设置断言判断返回结果的长度不为0，最后返回查询结果。,"Use $conn$ to execute the SQL statement (query all the columns in the events_aggregation_imputed table based on $entity_id$), get all the data, set the assertion to determine that the length of the returned result is not 0, and finally return the query result."
13712,"import logging
from sqlalchemy.exc import SQLAlchemyError
def execute(conn, debug):
	logger = logging.getLogger()
	try:
		query = ""SELECT * FROM err WHERE debug =: debug""
		logger.debug(query)
		rows = conn.execute(query, {""debug"": debug}).fetchall()
		result = rows if rows else []
		return result
	except SQLAlchemyError as err:
		logger.error(err)
		raise",使用getLogger方法获取日志输出工具。尝试性执行如下代码：设置SQL（根据$debug$查询表中的所有列）；将SQL记录为日志中的debug信息；使用$conn$执行SQL并获取所有数据；如果结果存在则返回结果，否则返回空list。如果出现SQLAlchemyError异常，则将异常信息通过error记录并抛出异常。,"Use the getLogger method to get the log output tool. Try to execute the following code: Set SQL (query all columns in the table based on $debug$); record SQL as debug information in the log; use $conn$ to execute SQL and get all the data; return the result if the result exists; otherwise, return empty list. If an SQLAlchemyError exception occurs, use error to log the exception information and throw the exception."
11347,"from sqlalchemy.sql import select
def update_bind_table(conn, devid, bt):
	sql = select(bt).where(bt.c.devid == devid)
	ins = conn.execute(sql).fetchall()
	return ins","根据python表达式设置SQL（根据$devid$查询$bt$表中所有列）,使用$conn$执行sql并获取所有数据，将数据返回。","Set SQL according to the python expression (query all columns in the $bt$ table based on $devid$), use $conn$ to execute sql and get all the data, and return the data."
13192,"def get_message(conn,file_id):
	query_ =""select message from Message where file_id =: file_id""
	message_text = conn.execute(query_,{""file_id"":file_id}).fetchall()
	return message_text",使用$conn$执行SQL（根据$file_id$获取Message表中的message列）并获取所有数据，最后返回查询结果,"Execute the SQL (get the message column in the Message  where the id of file is $file_id$) with $conn$, get all the data, and return the query results."
11557,"from sqlalchemy import create_engine
def info(database_uri, dname):
	engine = create_engine(database_uri)
	ot = engine.execute(""SELECT * FROM database WHERE dname = :dname"", {""dname"": dname}).fetchall()
	return ot",通过$database_uri$获取数据库引擎。执行SQL语句（查询database表中dname为$dname$的全部列）并获取所有数据，返回查询结果。,"Get the database engine through $database_uri$. Execute SQL statement (query all columns in database table with dname as $dname$), get all the data and return the query result."
13304,"def expected_sms(connection,date_time,lat,lon):
	with connection.cursor() as cursor:
		sql = ""SELECT id FROM position WHERE date_time=:date_time AND lat=:lat AND lon=:lon""
		values = cursor.execute(sql,{""date_time"":date_time,""lat"":lat,""lon"":lon}).fetchall()
		return values","使用with语句根据$connection$连接数据库。设置sql（根据$date_time$，$lat$和$lon$查询position表中id列）,执行SQL并获取所有查询结果，并将其返回。","Use the with statement to connect the database according to $connection$. Set up sql (query the id column in the position table based on $date_time$, $lat$ and $lon$), execute SQL, get all the query results, and return them."
13122,"from flask import render_template
def finalreview(conn,user1):
	revw = conn.execute(""select * from review where name=user1"",{""user1"":user1}).fetchall()
	if len(revw)>0:
		return render_template(""bookpage.html"", revw = revw)
	else:
		return render_template(""error.html"")","使用$conn$执行SQL（根据name为$user1$获取review表中的所有列）并获取所有信息，如果查询结果的长度大于0，则返回渲染后的""bookpage.html""，其中revw参数为查询结果，否则返回渲染后的""error.html""","Execute the SQL with $conn$ (get all the columns in the review table where name is $user1$) and get all the information. If the query result is longer than 0, return the rendered ""bookpage.html"", where the revw parameter is the query result, otherwise return the rendered ""error.html""."
14257,"from sqlalchemy.orm.session import sessionmaker
def getItem(engine):
	DBSession = sessionmaker(bind=engine)
	session = DBSession()
	sql = ""select * from jihemei""
	items = session.execute(sql).fetchall()
	session.close()
	return items",使用sessionmaker()创建一个DBSession类(其中bind参数是$engine$数据库连接)。实例化Session，然后设置SQL语句：通过查询jihemei中的所有列，执行SQL获取所有数据，关闭数据库连接，返回所有的执行结果。,"Use sessionmaker () to create a DBSession class (where the bind parameter is $engine$ database connection). Instantiate the Session, and then set the SQL statement: Query all the columns in the jihemei, execute SQL to get all the data, close the database connection, and return all the execution results."
11159,"def querytime(engine,fileds):
	with engine.connect() as conn:
		sql = ""SELECT fruit FROM table_name WHERE fileds={}"".format(fileds)
		mytime=conn.execute(sql).fetchall()
	return mytime",利用with语句根据$engine$连接数据库。设置SQL（通过$fileds$查询table_name表中的所有fruit数据），执行SQL并返回查询结果。,"Use the with statement to connect to the database according to $engine$. Set the SQL (query all fruit data in the table_name where fileds is $fileds$) , execute the SQL and return the query results."
11069,"from flask import render_template
def todoquery(conn,todosTB,id):
	todo = conn.query(todosTB).filter(todosTB.id == id).one()
	return render_template('todo.html', todo=todo)",在ORM方式下，使用$conn$执行SQL（根据$id$查询$todosTB$的所有信息）并获取第一条数据。最后返回渲染后'todo.html'，其中todo参数为查询结果。,"In ORM mode, use $conn$ to execute SQL (query all information about $todosTB$  based on $id$) and get the first piece of data. Finally, return the rendered 'todo.html' where the todo parameter is the query result."
13623,"def getconn(conn,user,host,port,password,database):
	try:
		cursor = conn.cursor()
		sql = ""SELECT * FROM pg_stat_activity WHERE user=:user AND host=:host AND port=:port AND password=:password AND database=:database""
		res = cursor.execute(sql,{""user"":user,""host"":host,""port"":port,""password"":password,""database"":database}).fetchall()
		return res
	except Exception as e:
		print(e)","尝试性执行如下代码：使用$conn$获取游标；设置SQL（根据$user$, $host$, $port$, $password$和$database$查询pg_stat_activity表中的所有列）；使用游标执行SQL并获取所有数据并返回。如果出现异常，则打印具体异常信息。","Try to excute the following code: Get the cursor through the $conn$; set SQL (query all columns in the pg_stat_activity table where user is $user$, host is $host$, port is $port$, password is $password$, and database is $database$); execute SQL with the cursor and get all the data and return. If an exception occurs, the specific exception information is printed."
13787,"from flask import request,render_template
def register(conn,username):
	if request.method ==""POST"":
		guo = conn.execute(""SELECT * from users WHERE username=:username"", {""username"": username}).fetchone()
		if guo != None:
			return render_template(""register.html"")
		else:
			return render_template(""login.html"")","如果请求方式为""POST""，利用$conn$执行SQL（根据$username$查询users表中所有列），并获取第一行数据，如果查询结果不为空，返回渲染后的""register.html""页面。否则返回渲染后的""login.html""页面。","If the request method is ""POST"", use $conn$ to execute SQL (query all columns in the users table based on $username$) and get the first row of data. If the query result is not empty, return the rendered ""register.html"" page; otherwise, return the rendered ""login.html"" page."
14159,"def get_beer_manufacturers(engine, beer):
	with engine.connect() as con:
		if beer is None:
			return False
		query = 'SELECT manf FROM beers WHERE name = :beer'
		result = con.execute(query,{""beer"":beer}).fetchall()
		if result is None:
			return None
		return result",使用with语句根据$engine$连接数据库。如果$beer$为空，则返回False；设置SQL语句：从beers表中查询name为$beer$的manf数据，执行SQL语句获取所有数据。如果执行语句的结果为空，则返回None；否则返回执行语句的结果。,Use the with statement to connect to the database based on $engine$. Return False if $beer$ is empty. Set SQL statement: Query the manf data with 'name': $beer$ from the beers table and execute the SQL statement to get all the data. Return None if the result of the execution statement is empty; otherwise return the result of the execution statement.
11275,"from sqlalchemy.sql import select
def test_contains_doesnt_compile(conn,sanic_polls,id):
	query_word = select([sanic_polls.c.word]).where(sanic_polls.c.id == id)
	found_word = conn.execute(query_word)
	result = found_word.fetchone()
	return result",使用$conn$，根据python表达式的方式执行SQL（获取$sanic_polls$表中id为$id$的word列）并获取第一行数据，最后返回查询结果,"Use $conn$ to execute SQL based on the Python expression (get the word column in the $sanic_polls$ table where 'id' is $id$), get the first row of data, and finally return the query result."
11584,"def get(conn, id):
	if id:
		information = conn.execute(""SELECT * FROM userData WHERE id = :id"", {""id"": id}).fetchall()
		conn.close()
		return information",如果id不为空，则执行SQL语句，内容为:通过$id$查询userData中的所有列，并获取所有数据，确保$conn$关闭，返回查询结果。,"If the id is not empty, execute the SQL statement: Query all the columns in the userData through $id$, get all the data, make sure that $conn$ is closed, and return the query results."
13442,"def select_value(engine, state):
	with engine.connect() as con:
		sql = ""SELECT city FROM drinkers WHERE state =: state""
		rs = con.execute(sql,{""state"":state}).fetchall()
		results = [dict(row) for row in rs]
		return results",使用with语句利用$engine$连接数据库，然后执行SQL（根据$state$获取drinkers表中的city列）并获取所有数据，然后使用for循环对查询结果的每一项转化为字典类型，最后返回字典内容,"Use the with statement to connect to the database through $engine$, then execute the SQL (get the city column in the drinkers table based on $state$) and get all the data. Use for loop to convert each item of the query results into dictionary type and finally return the contents of dictionary. "
11009,"def select_reader(conn,durations,destinations):
	origin = conn.execute(""SELECT origin FROM flights_table WHERE durations=:durations AND destinations=:destinations"",{""durations"":durations,""destinations"":destinations}).fetchall()
	origins=[]
	for i in origin:
		origins.append(i[0])
	return origins",使用$conn$执行SQL（根据$durations$和$destinations$查询flights_table表中的origin信息）并获取所有数据。利用for循环将查询结果每一项的第0哥元素存储到list中并返回。,Use $conn$ to execute the SQL (query the flights_table table for origin information based on $durations$ and $destinations$) and get all the data. Use for loop to store the 0th element of each item of the query result in list and return.
11391,"import json
def dump_campaign_to_local_json(conn,nonprofit_id):
	mons = conn.execute(""SELECT * FROM supporters where nonprofit_id=:nonprofit_id"", {""nonprofit_id"": nonprofit_id}).fetchone()
	with open('campaigns.json', 'w') as fp:
		json.dump(mons, fp)",使用$conn$执行SQL（根据$nonprofit_id$查询supporters表中所有列），并获取第一行数据，使用with语句，以可写入的方式打开'campaigns.json'，将查询结果以json格式写入文件。,"Use $conn$ to execute SQL (query all columns in the supporters table based on $nonprofit_id$), get the first row of data, use the with statement to open 'campaigns.json' in a writable manner, and write the query results to the file in json format."
13084,"def getDist(conn):
	cur = conn.cursor()
	values = cur.execute(""SELECT fips FROM base_counts"").fetchall()
	return values",使用$conn$获取游标，并使用游标执行SQL（查询base_counts表中的fips）并获取所有数据。最后返回查询结果。,"Use $conn$ to get the cursor and use the cursor to execute SQL (query the fips in the base_counts table) and get all the data. Finally, return the query results."
13132,"from sqlalchemy.sql import select
def get_user_by_uid(conn,users,uid):
	query = select([users.id, users.uid]).where(users.uid == uid)
	result = conn.execute(query)
	return result.fetchone()",根据python表达式的方式，利用$conn$执行SQL（获取$users$表中uid为$uid$的id和uid两列），最后返回查询结果的第一条数据,"Depending on the python expression, SQL is executed with $conn$ (to get the column ID and column uid of $uid$ and uid of the $users$), return the first data in the query result."
14231,"def query(conn,factor_name):
	res = conn.execute(""select destination from mytable where factor_name=:factor_name"",{""factor_name"":factor_name}).fetchall()
	return res",通过$conn$执行SQL语句：查询mytable表中factor_name为$factor_name$的所有destination，返回所有的查询结果。,"Execute the SQL statement through $conn$: Query all the destination, in the mytable table whose factor_name is $factor_name$ and return all the query results."
13923,"def printData(conn, value):
	sql = ""SELECT * FROM iris WHERE value =: value""
	result = conn.execute(sql,{""value"":value}).fetchall()
	for row in result:
		print(row)",设置SQL语句：通过$value$查询iris表中的所有列，使用$conn$连接执行SQL获取所有数据，for循环遍历执行结果并打印。,"Set the SQL statement: Query all the columns in the iris table through $value$, execute SQL to get all the data with the $conn$ connection, use for loop to traverse the execution result and print."
13424,"from sqlalchemy.sql import select
def count(conn, sa): 
	s = select([sa.func.count()])
	count = conn.execute(s).fetchall() 
	return [item for item in count]",根据python表达式的方式执行SQL（获取$sa$表中的所有列的计数次数）并利用$conn$执行SQL获取所有数据，最后使用for循环对查询结果的每一项存储为list并返回,Execute SQL based on the Python expression (get the counts of all columns in the $sa$ table) and use $conn$ to execute SQL to get all the data. Finally use for loop to store each item of the query result as list and return it.
11527,"def sql_select(conn, cid, cname):
	q = ""SELECT * FROM Person WHERE cid = :cid AND cname = :cname""
	people = []
	for row in conn.execute(q, {""cid"": cid,""cname"": cname}).fetchall():
		people.append(row)
	return people",设置SQL语句为：根据$cid$和$cname$获取Person表中的所有列。在for循环中使用$conn$连接执行SQL语句获取所有数据，将查询结果中每一项元素存储到list中。返回list中的内容。,Set the SQL statement to: get all columns in the Person table based on $cid$ and $cname$. Execute the SQL statement in for loop using the $conn$ connection to get all the data and store each element of the query result in list. Return the contents of the list.
13554,"from flask import render_template, request
def login(conn,user_log,pass_log):
	if request.method == ""POST"":
		login_details = conn.execute(""SELECT * FROM users WHERE username=:username AND password=:password"",{""username"": user_log, ""password"": pass_log}).fetchone()
		if login_details == None:
			print(""fail"")
			return render_template(""login.html"")
		else:
			print(""works"")
			return render_template(""main.html"", login_details=login_details)","如果请求方式为""POST""，利用$conn$执行SQL（根据username为$user_log$和password为$pass_log$查询users表中所有列），并获取第一行数据，如果查询结果为空，打印""fail""，返回渲染后的""login.html""页面，否则打印""works""，返回渲染后的""main.html""页面,其中参数login_details为查询结果返回。","If the request method is ""POST"", use $conn$ to execute SQL (query all columns in the users table where username is $user_log$ and password is $pass_log$), and get the first row of data. If the query result is empty, print ""fail"" and return the rendered ""login.html"" page; otherwise, print ""works"" and return the rendered ""main.html"" page, where the parameter login_details is the query result that returns."
11002,"from flask import render_template
def user(conn,userid,email):
	rec = conn.execute(""SELECT * FROM users WHERE userid = :userid AND email = :email"", {""userid"": userid,""email"":email})
	if rec.rowcount == 0:
		return render_template(""success.html"")
	else:
		return render_template(""error.html"")","使用$conn$执行SQL（根据$userid$和$email$查询users表中所有列）。如果获取到的数据行数量为0，则返回渲染后的""success.html""，否则返回渲染后的""error.html""","Use $conn$ to execute SQL (query all columns in the users table based on $userid$ and $email$). If the obtained number of data row is 0, return the rendered ""success.html"", otherwise return the rendered ""error.html""."
14015,"from sqlalchemy.sql import select
def query(conn, tb):
	result = conn.execute(select([tb.c.id])).fetchall()
	conn.close()
	return result",使用Python表达式的方式执行SQL语句：根据$id$获取$tb$表中的全部数据，确保$conn$关闭，返回查询结果。,"Execute the SQL statement as a Python expression: Get all the data in the $tb$ table according to $id$, make sure that $conn$ is closed, and return the query results."
13899,"def getgenres_movie(conn, movieid):
	db_result = conn.execute(""SELECT * FROM movie_genre WHERE movieid = :movieid"", {""movieid"": movieid}).fetchall()
	return list(db_result)",使用$conn$查询movie_genre表中movieid为$movieid$的所有列，并获取全部数据，将查询结果转化为list并返回。,Use $conn$ to query all columns in the movie_genre table with movieid as $movieid$ and get all the data. Convert the query results into the list and return it.
11127,"from flask import request, redirect, url_for
def create_idea_page(conn,title,content):
	if request.method == 'POST':
		user_result = conn.execute(""SELECT user FROM ideas_table WHERE title=:title AND content=:content"",{""title"":title,""content"":content}).fetchall()
		if user_result is None:
			return redirect(url_for('login_page'))",若request模块发送请求的方式为post，则使用$conn$执行SQL（根据$title$和$content$获取ideas_table中的所有user）。如果查询结果为空，则使用redirect和url_for返回'login_page'。,"If the request module sends the request as post, execute the SQL using $conn$ (get all the users in ideas_table where the title is $title$ and content is $content$) . If the query results are empty, 'login_page' is returned using redirect and url_for."
13499,"from flask import render_template,request
def index(conn, isbn):
	if request.method ==""GET"":
		return(render_template(""index.html""))
	else:
		sql = ""SELECT * FROM books WHERE isbn = :isbn""
		matches = conn.execute(sql,{""isbn"":isbn}).fetchall()
		return(render_template(""matches.html"", matches = matches))","如果请求的方法为""GET""，则返回渲染后的""index.html""，否则利用$conn$执行SQL（根据$isbn$获取books表中的所有列）并获取所有数据，最后返回渲染后的""matches.html""，其中matches参数为查询结果","If the requested method is ""GET"", return the rendered ""index.html"", otherwise use $conn$ to execute the SQL (get all columns in the books table based on $isbn$) and get all the data. Finally return the rendered ""matches.html"", where the matches parameter is the query result."
13360,"from sqlalchemy.sql import select
def snps_in_chrom_ranges(conn,table,chrom):
	s = select(table).where(table.c.chrom == chrom)
	result = conn.execute(s)
	snps = result.fetchall()
	return snps",根据python表达式设置SQL：（根据$chrom$查询$table$表中所有列）。通过$conn$执行SQL并获取所有数据，返回查询结果。,"Set SQL based on the python expression (query all columns in the $table$ table based on $chrom$). Execute SQL through $conn$, get all the data, and return the query results."
11641,"def get_pwd(db,name,id):
	sql = ""SELECT password FROM members WHERE user_name=:name AND id=:id""
	if db.execute(sql,{""name"":name,""id"":id}).fetchone() is None:
		return ""Error""
	else:
		return ""Correct""","设置SQL（根据user_name为$name$和id为$id$获取members表中的password列），如果使用$db$执行SQL语句并获取的第一条数据为None，则返回""Error""，否则返回""Correct""","Set SQL (get the password column in the members table where user_name is $name$ and id is $id$), and use $db$ execute the SQL statement. If the first piece of data obtained is None, return ""Error""; otherwise, return ""Correct""."
11509,"from sqlalchemy.sql import select
from sqlalchemy import create_engine
def ack_task(queue,table,taskid):
	engine = create_engine(queue)
	conn = engine.connect()
	s = select(table.c.name).where(table.c.taskid == taskid)
	info= conn.execute(s).fetchall()
	conn.close()
	return info",通过$queue$获取数据库引擎并建立连接。使用Python表达式的方式设置SQL语句（根据$taskid$查询$table$表中的所有name数据），执行SQL语句，关闭数据库连接，返回查询结果。,"Get the database engine and establish a connection through $queue$. Use the Python expression to set up SQL statement (query all name data in $table$ table based on $taskid$), execute SQL statement, close database connection and return query result."
14261,"import sqlalchemy
def query_table(db_connectstring, db_schema):
	engine = sqlalchemy.create_engine(db_connectstring)
	with engine.connect() as con:
		data = con.execute(""select db_id from mytable where db_schema=:db_schema"",{""db_schema"":db_schema}).fetchall()
		print(data)
		return data",使用$db_connectstring$获取数据库引擎。通过with语句根据获取的数据库引擎获取连接。执行SQL：通过$db_schema$获取mytable中的所有db_id，打印获取到的数据并返回。,"Use $db_connectstring$ to get the database engine. The connection is obtained based on the acquired database engine through the with statement. Execute SQL: Get all the db_id in mytable through $db_schema$, print the obtained data and return."
11260,"from sqlalchemy.sql import select
def test_core(Customer,bindparam,conn):
	stmt = select(Customer.c.name).where(Customer.c.id == bindparam)
	res=conn.execute(stmt).fetchall()
	return res",使用$conn$，根据python表达式的方式执行SQL（获取$Customer$表中id为$bindparam$的name列）并获取使用数据，最后返回获取的结果,"Use $conn$ to execute SQL based on the Python expression (get the name column in the $Customer$ table with 'id': $bindparam$), get the usage data, and finally return the obtained result."
13082,"def test_key(conn,x,y):
	id = conn.execute(""SELECT id FROM t WHERE x=:x AND y:=y"", {""x"": x, ""y"": y}).fetchone()
	return id",使用$conn$执行SQL（根据$x$和$y$查询t表中的id）并获取第一条数据。最后直接返回查询结果。,"Use $conn$ to execute SQL (query the id in the t table based on $x$ and $y$) and get the first piece of data. Finally, return the query results directly."
13724,"def get_drinker_topbeers(engine,BillstransactionID,Drinkersname):
	with engine.connect() as con:
		query = ""SELECT quantity FROM Has where BillstransactionID = :BillstransactionID and Drinkersname = :Drinkersname""
		rs = con.execute(query, {""BillstransactionID"":BillstransactionID,""Drinkersname"":Drinkersname}).fetchall()
		return [dict(row) for row in rs]",使用with语句根据$engine$连接数据库。设置SQL（根据$BillstransactionID$和$Drinkersname$查询$Has$表中quantity列），执行SQL并获取所有查询结果，将查询结果每一项转化为dict存储为list并返回。,"Use the with statement to connect the database according to $engine$. Set up SQL (query the quantity column in the $Has$ table based on $BillstransactionID$ and $Drinkersname$), execute SQL, get all the query results, convert each item of the query result to dict, store as list and return."
13370,"from sqlalchemy.sql import select
def mark_as_merged(engine,table,lab,converted_filename):
	conn = engine.connect()
	s = select(table.c.merged_at).where(table.c.lab == lab,table.c.converted_filename == converted_filename)
	recs = conn.execute(s).fetchall()
	return recs",使用$engine$连接数据库，根据python表达式设置SQL：（根据$lab$和$converted_filename$查询$table$表中merged_at列）。执行SQL并获取所有数据，返回查询结果。,"Connect the database with $engine$ and set up the SQL based on the python expression (query the merged_at column in the $table$ table based on $lab$ and $converted_filename$). Execute SQL, get all the data and return the query results."
14189,"from sqlalchemy.sql import select
def test2(conn, users, user_id):
	s = select([users.c.addresses]).where(users.c.user_id == user_id)
	v = conn.execute(s).fetchall()
	for row in v :
		print(row)
	return v",使用Python表达式的方式设置SQL（通过$user_id$查询$users$表中的addresses信息），通过$conn$执行SQL获取所有数据，for循环遍历执行结果并将其打印，返回执行结果。,"Use the Python expression to set up the SQL (query the $users$ table for addresses by $user_id$), execute the SQL by $conn$ to get all the data. For loop iterates through the execution results and prints them and return the execution results."
11344,"def select1(engine,documents):
	conn = engine.connect()
	data = conn.execute(""SELECT * FROM clock where documents=:documents"", {""documents"": documents}).fetchall()
	time = []
	for i in data:
		time.append(i)
	print(time)",使用$engine$获取数据库连接，并执行SQL（根据$documents$查询clock表中所有列）并获取所有数据，将数据逐条插入一个list中，并打印这个list。,"Use $engine$ to get the database connection and execute SQL (query all columns in the clock table based on $documents$), get all the data, insert the data one by one into a list, and print the list."
13799,"from flask import render_template, redirect
def edit_useraccount(conn,UserAccount,id):
	try:
		session = conn.query(UserAccount).filter(UserAccount.id == id).all()
		if session:
			return redirect('/showUserAccounts')
	except Exception as e:
		return render_template('error.html', error=str(e))",尝试使用ORM的方式，利用$conn$执行SQL（根据$id$查询$UserAccount$表中全部信息），并获取所有数据，如果有查询结果，则返回重定向'/showUserAccounts'的命令，如果执行时出现Exception异常，则返回渲染后的'error.html'页面，其中参数error为异常类型。,"Try to use the ORM method and $conn$ to execute SQL (query all the information in the $UserAccount$ table according to $id$) and get all the data. If there is a query result, return the command redirected to '/showUserAccounts'. If an Exception occurs during execution, return the rendered 'error.html' page, where the parameter error is the exception type."
11653,"def get_quizy(connection,quizy,pytanie):
	with connection.begin() as trans:
		sql = quizy.select().where(quizy.c.Pytanie==pytanie)
		result = connection.execute(sql).fetchall()
		for line in result:
			print(line)
		return result",使用with语句利用$connection$的开始方法，根据python表达式的方式执行SQL(获取$quizy$表中Pytanie为$pytanie$的所有列)并获取所有数据，然后使用for循环打印查询结果的每一项，最后返回查询结果,"Use the with statement the start method of $connection$ to execute SQL according to the python expression (get all the columns in the $quizy$ table where Pytanie is $pytanie$), get all the data, then use for loop to print each item of the query result, and finally return the query result."
14122,"def update_team_score(Teams, team_id, session):
	result = session.query(Teams).filter(Teams.ID == team_id).all()
	session.close()
	return result",使用$session$通过ORM方式执行SQL：获取$Teams$表中ID为$team_id$的所有Teams数据。关闭$session$，返回获取的所有的数据,Use $session$ to execute SQL via ORM method: Get all the Teams data in the $Teams$ table with 'ID': $team_id$. Close $session$ and return all the obtained data.
13340,"from sqlalchemy.sql import select
def sequence_exists(connection,schema,sequence_name):
	s = select(schema.c.sequences).where(schema.c.sequence_name == sequence_name)
	recs = connection.execute(s).fetchall()
	return recs",根据python表达式设置SQL：（根据$sequence_name$查询$schema$表中sequences列）。通过$connection$执行SQL并获取所有数据，返回查询到的结果。,"Set SQL based on the python expression (query the sequences column in the $schema$ table based on $sequence_name$). Execute SQL through $connection$, get all the data, and return the queried results."
13289,"from flask import request, render_template
def select_book(conn, isbn):
	if request.method == ""GET"":
		sql_book = ""SELECT * FROM books WHERE isbn =: isbn""
		isbn_books = conn.execute(sql_book,{""isbn"":isbn}).fetchall()
		return render_template(""libros.html"", book_detail=isbn_books)","如果请求方法为""GET""，则使用$conn$执行SQL（根据$isbn$获取books表中的所有列）并获取所有数据。返回渲染后的""libros.html""页面，其中book_detail参数为查询结果。","If the request method is ""GET"", execute the SQL using $conn$ (GET all the columns in the books table where isbn is $isbn$) and GET all the data. Return the rendered ""libros.html"" page, where the book_detail parameter is the query result."
13348,"def get_article(connection,id):
	cur = connection.cursor()
	flash = cur.execute(""SELECT title FROM call_list WHERE id=:id"",{""id"":id}).fetchall()
	cur.close()
	return flash",使用$connection$建立游标，执行SQL（根据$id$查询call_list表中title列），并获取所有查询结果，关闭连接，将查询结果返回。,"Create a cursor with $connection$, execute SQL (query the title column in the call_list table based on $id$), get all the query results, close the connection, and return the query results."
13728,"def importCat(conn,id):
	cur = conn.cursor()
	cari = cur.execute(""SELECT * FROM catagory where id = :id"",{""id"":id}).fetchall()
	for record in cari:
		print(record[0])
	return cari",使用$conn$获取游标，并执行SQL（根据$id$查询catagory表中所有列），并获取所有查询结果，用for循环遍历获取的所有查询结果，输出每条数据的第0个元素。将查询结果返回。,"Use $conn$ to get a cursor and execute SQL (query all columns in the catagory table based on $id$) and get all the query results. Use for loop to traverse all the obtained query results, output the 0th element of each piece of data, and return the query results."
11247,"def process_item(conn, username):
	sql = ""select * from nhdz where username=:username""
	res=conn.execute(sql,{""username"":username}).fetchall()
	print(res)
	return res",使用$conn$执行SQL（根据$username$获取nhdz中的所有列）并获取所有数据，打印查询的结果，最后返回获取到的结果,"Use $conn$ to execute SQL (get all columns in nhdz based on $username$) and get all the data, print the query result, and finally return the obtained result."
11379,"import sqlalchemy
def execute_query2(host,postgresql,client):
	engine = sqlalchemy.create_engine(host, client_encoding='utf8')
	conn = engine.raw_connection()
	qry = ""select * from query where postgresql = :postgresql and client = :client""
	results = conn.execute(qry, {""postgresql"": postgresql, ""client"": client}).fetchall()
	results.close()
	return results[0] if results else None",通过$host$获取数据库引擎，client_encoding参数为'utf8'，并建立连接。设置sql（根据$postgresql$和$client$查询query表中的所有列），执行SQL语句并获取所有数据，关闭连接，如果有查询结果，返回第0条查询数据，否则返回None。,"Get the database engine through $host$ where the parameter of client_encoding is 'utf8', and establish a connection. Set up sql (query all columns in the query table based on $postgresql$ and $client$), execute the SQL statement and get all the data, close the connection, and return the oth query data if there is query result; otherwise, return None."
13028,"def task(conn):
	cur = conn.execute(""SELECT * FROM users"")
	result = cur.fetchall()
	conn.close()
	return result",使用$conn$执行SQL（查询users表中的所有列）。获取所有查询结果后关闭连接。最后返回查询结果。,"Use $conn$ to execute SQL (query all columns in the users table). Close the connection after getting all the query results. Finally, return the query result."
13639,"from flask import render_template
def detail(db,isbn):
	book = db.execute(""SELECT * FROM books WHERE isbn =:isbn"",{""isbn"":isbn}).fetchall()
	print(book)
	return render_template(""details.html"", book=book)","使用$db$执行SQL（根据$isbn$查询books表中的所有列）并获取所有数据。打印查询结果。返回渲染后的""details.html""，并将查询结果传递给book参数。",Execute the SQL using $db$ (query all the columns in the books table where isbn is $isbn$) and get all the data. Print query results. Return 'details.html' after rendering and passes the query result to the book parameter.
11043,"from sqlalchemy.sql import select
def find_applied(conn,table,maxid):
	s = select(table).where(table.c.id == maxid)
	appli = conn.execute(s).fetchall()
	return [item[0] for item in appli]",用python表达式设置SQL：查询当id为$maxid$的时$table$表中的所有信息。使用$conn$执行SQL并获取所有查询结果。将查询结果在list中分开，保留每一项第0个元素并返回。,"Set up the SQL with the python expression: Query all the information in the $table$ table when id is $maxid$. Use $conn$ to execute SQL and get all query results. Separate the query results in list, retain the 0th  element of each item and return."
11164,"def pertenece(conn,movietitle):
	query = ""SELECT * FROM imdb_movies WHERE movietitle={}"".format(movietitle)
	result=list(conn.execute(query).fetchall())
	return result",#设置SQL（通过$movietitle$查询imdb_movies中的所有列），使用$conn$执行SQL获取所有数据并转化为list形式，将list形式的查询结果返回。,"Set up SQL (all columns in imdb_movies are queried where movietitle is $movietitle$) , execute SQL with $conn$ to get all the data and convert it to list, and return list-style query results."
13242,"def search(db):
	with db.connect() as conn:
		results = conn.execute(""SELECT FaceVector FROM FaceIDStore"").fetchall()
		face_vector = []
		for row in results:
			face_vector.append(row[0])
		return face_vector",在with语句中使用$db$连接数据库，执行SQL语句（查询FaceIDStore中的所有FaceVector）并获取所有数据。使用for循环将查询结果的每一项的第0个元素储存为list并返回。,"Connect to the database using $db$ in the with statement, execute the SQL statement (query all FaceVector in the FaceIDStore) and get all the data. The for loop is used to store the 0th element of each item of the query result as a list and return it."
14132,"from flask import render_template, request
def login(conn, username, password):
	if request.method == ""POST"":
		result = conn.execute(""SELECT email FROM users WHERE username=:username AND password=:password"", {""username"": username, ""password"": password}).fetchone()
		if result is None:
			return render_template(""login.html"")
		else:
			return result
	return render_template(""login.html"")","如果request模块发送请求的方式为post，则通过$conn$执行SQL（通过$username$和$password$查询users中的email）获取第一条数据。如果查询结果为空，渲染并返回""login.html""，否则返回查询结果。如果request模块发送请求的方式不是post，渲染并返回""login.html""。","If the request module sends the request in the way of post, then execute SQL via $conn$ (query 'email' in 'users' via $username$ and $password$) to get the first piece of data. If the query result is empty, render and return ""login.html"", otherwise return the query result. If the request module sends the request in a way other than post, render and return ""login.html""."
13675,"def select_table(db,id):
	fs = db.execute(""SELECT * FROM flights WHERE flight_id = :id"", {""id"":id}).fetchone()
	for f in fs:
		print(f)",使用$db$执行SQL（查询flight_id为$id$时flights表中的所有列）并获取第一条数据。使用for循环打印查询结果中的每一项。,Execute the SQL (query all columns in the flights where flight_id is $id$) using $db$ and get the first data. Print each item in the query result using a for loop.
14020,"from sqlalchemy.sql import select
def testcommits(connection,users,user_id):
	result = connection.execute(select[users]).where(users.c.user_id==user_id)
	assert len(result.fetchall()) != 0
	return result",通过$connection$使用python表达式的方式执行SQL语句：根据$user_id$查询$users$表中的所有数据，设置断言判断查询结果获取到的所有数据的长度不为0，返回查询结果。。,"Use the Python expression and $connection$ to execute the SQL statement: Query all the data in the $users$ table according to $user_id$, set the assertion to determine that the length of all the data obtained by the query result is not zero, and return the query result."
14049,"from flask import jsonify
def consumption(conn):
	Consumption = conn.execute(""SELECT * FROM cons"").fetchall()
	return jsonify({'Consumption': [dict(row) for row in Consumption]})",使用$conn$查询cons表中的所有列，并获取全部数据，将查询结果每一项转化为dict存储为list，并使用jsonify返回。,"Use $conn$ to query all the columns in the cons table, get all the data, convert each item of the query result to dict, store it as list, and use jsonify to return."
13658,"def book_authors(db,isbn):
	author = db.execute(""SELECT author FROM books WHERE isbn = :isbn"", {""isbn"": isbn}).fetchone()
	if author is None:
		return ""ERROR""
	return author","使用$db$执行SQL（根据$isbn$查询books表中的author信息）并获取第一条数据。如果查询结果为None，则返回""ERROR""，否则返回查询结果。","Execute the SQL using $db$ (querying the author information in the books table where isbn is $isbn$) and get the first data. If the result of the query is None, then 'ERROR' is returned; otherwise, the result of the query is returned."
14292,"def getgenres(db_conn):
	db_result = db_conn.execute(""SELECT * FROM genres"").fetchall()
	return list(db_result)",通过$db_conn$执行SQL语句(从genres表中查询所有列)获取所有数据，将执行结果转化为list并返回。,"Execute the SQL statement (query all columns from the genres table) through $db_conn$ to get all the data, convert the execution result to list and return."
14162,"from flask import render_template
def select(conn,WISH):
	sql = ""select date from wishlist where wish =:WISH""
	res =conn.execute(sql,{""WISH"":WISH}).fetchall()
	return render_template('pass.html', res=res)","设置SQL语句：根据$WISH$查询wishlist表中的date数据，通过$conn$执行SQL语句获取所有数据，渲染并返回'pass.html', 其中res参数为获取到的所有数据。","Set SQL statement: Query date data in wishlist table based on $WISH$, execute SQL statement via $conn$ to get all the data, render and return 'pass.html', where res parameter is all the obtained data."
14246,"def main(con):
	flights = con.execute(""SELECT origin FROM flights"").fetchall()
	for flight in flights:
		print(flight)",使用$con$执行SQL语句（查询flights表中的所有origin）。for循环遍历所有查询结果并将其打印。,Use $con$ to execute the SQL statement (query all origin in the flights table). Use for loop traversal to query the results and print them.
11257,"from flask import request, render_template
def book_details(conn,isbn):
	if request.method == ""POST"":
		book = conn.execute(""SELECT * FROM BOOKS WHERE isbn =:isbn"", {""isbn"":isbn}).fetchone()
		if not book:
			return render_template(""error.html"")
		return render_template(""book_details.html"", book=book)","如果请求的方法为""POST""，则使用$conn$执行SQL语句（根据$isbn$查询BOOKS表中的所有列）并获取第一条数据，如果没有获取到结果，则返回渲染后""error.html""，最后返回渲染后的""book_details.html""，其中book参数为查询结果","If the request method is ""POST"", use $conn$ to execute the SQL statement (query all columns in BOOKS table based on $isbn$) and get the first data. If no result is obtained, return the rendered ""error.html"" and finally return the rendered ""book_details.html"", where the book parameter is the query result."
11161,"def get(e,message):
	conn = e.connect()
	return conn.execute(""SELECT * FROM titanic WHERE message=:message"",{""message"":message}).fetchall()",通过$e$连接数据库，执行SQL语句（根据$message$查询titanic中的全部列）获取所有数据，并将查询结果返回。,"Connect to the database via $e$, execute the SQL statement (query all columns in titanic where message is $message$) to get all the data and return the query results."
13896,"from flask import render_template
def index(conn, id):
	flights = conn.execute(""SELECT * FROM flights WHERE id = :id"", {""id"": id}).fetchall()
	if flights:
		print(flights)
		return render_template(""index.html"", flights = flights)","使用$conn$连接执行SQL语句：根据$id$查询flights中的所有列，并获取全部数据。如果查询结果不为空，则将其打印，渲染并返回""index.html""，其中flights参数为查询结果。","Use $conn$ connection to execute SQL statement: Query all columns in flights based on $id$ and get all the data. If the query result is not empty, print it, render and return ""index.html"", where the flights parameter is the query result."
11663,"def get_tools(connection, name):
	try:
		que = ""SELECT * FROM tools WHERE tool_name=:name""
		results = connection.execute(que,{""name"":name}).fetchall()
		connection.close()
		return results
	except Exception as err:
		return 'fail'",尝试利用$connection$执行SQL（根据tool_name为$name$获取tools表中的所有列）并获取所有数据，然后关闭$connection$连接并返回查询结果，如果执行时出现异常，则返回'fail',"Try to use $connection$ to execute SQL (get all the columns in the tools table where tool_name is $name$), get all the data, then close the $connection$ connection and return the query result. If an exception occurs during execution, return 'fail'."
13789,"from flask import render_template
def putdb(conn,flight_id):
	passenger = conn.execute(""SELECT value from Passenger WHERE flight_id=:flight_id"", {""flight_id"": flight_id}).fetchall()
	if passenger:
		return render_template(""sucess.html"")","利用$conn$执行SQL（根据$flight_id$查询Passenger表中value列），并获取所有查询结果，如果有查询结果，返回渲染后的""sucess.html""页面。","Use $conn$ to execute SQL (query the value column in the Passenger table according to $flight_id$) and get all the query results. If there are query results, return the rendered ""sucess.html"" page."
13743,"from flask import render_template, redirect, url_for
def book(conn,book_id):
	book = conn.execute(""SELECT * FROM books WHERE book_id = :book_id"", {""book_id"": book_id}).fetchone()
	if book is None:
		return redirect(url_for('index'))
	return render_template(""book.html"", book=book)","使用$conn$执行SQL（根据$book_id$查询books表中所有列），并获取第一行数据，如果查询结果为空，重定向为'index'页面，否则返回渲染后的""book.html""页面，并将book参数设置为查询结果。","Use $conn$ to execute SQL (query all columns in the books table based on $book_id$) and get the first row of data. If the query result is empty, redirect to the 'index' page; otherwise, return the rendered ""book.html"" page and set the book parameter to the query result."
13533,"from sqlalchemy import create_engine
def test_switch_database(pyhive_test_database,one_row):
	engine = create_engine(pyhive_test_database)
	try:
		with engine.connect() as connection:
			res=connection.execute('select * from TABLES where one_row=:one_row',{""one_row"":one_row}).fetchall()
			return res
	finally:
		engine.dispose()",通过$pyhive_test_database$获取数据库引擎。尝试使用with语句建立连接，执行SQL语句（根据$one_row$查询TABLES表中所有列），并获取所有数据，将查询结果返回。最后，关闭所有连接。,"Get the database engine through $pyhive_test_database$. Try to use the with statement to establish a connection, execute the SQL statement (query all the columns in the TABLES table based on $one_row$), get all the data, and return the query results. Finally, close all connections."
14298,"def list(connection):
	cursor = connection.cursor()
	try:
		rval= cursor.execute('SELECT name FROM table').fetchall()
		return list(rval)
	finally:
		cursor.close()",通过$connection$创建游标对象。尝试使用游标执行SQL语句：查询table中的所有name，将查询结果转化为list并返回。最后关闭游标。,"Create a cursor object through $connection$. Try to use a cursor to execute the SQL statement: Query all the name in table, convert the query result to list and return. Finally, close the cursor."
13008,"import sys
from sqlalchemy.exc import SQLAlchemyError
def get_percentile(conn,username):
	try:
		information = conn.execute(""SELECT value FROM mytable where username=:username"", {""username"": username}).fetchall()
		return information
	except SQLAlchemyError as e:
		print(e)
		sys.exit(1)",尝试性使用$conn$执行SQL（根据$username$查询$mytable$中的value）并获取所有数据。最后返回查询结果。如果出现了SQLAlchemyError异常，则打印具体异常信，退出程序并设置退出代码为1。,"Try to use $conn$ to execute SQL (query the value in $mytable$ based on $username$) and get all the data. Finally, return the query result. If a SQLAlchemyError exception occurs, print a specific exception message, exit the program and set the exit code to 1."
13838,"from flask import render_template
def my_orders(conn, userid):
	query = ""SELECT username FROM users WHERE userid =: userid""
	item = conn.execute(query, {""userid"": userid}).fetchone()
	if len(item) > 0:
		return render_template(""orders.html"")
	return render_template(""my_orders.html"", item=item)","设置SQL语句为根据$userid$获取users表中的username数据，使用$conn$连接执行SQL并获取第一条username数据。如果查询结果的长度大于0，渲染并返回""orders.html""；否则，渲染并返回""my_orders.html""，其中item参数为查询结果。","Set SQL statement to: Get username data in the users table based on $userid$, use $conn$ connection to execute SQL and get the first piece of username data. If the length of the query result is greater than 0, render and return ""orders.html""; otherwise, render and return ""my_orders.html"", where the item parameter is the query result."
14060,"from sqlalchemy.sql import select
def test_check(db,tb_name):
	conn = db.connect()
	result = conn.execute(select([tb_name])).fetchall()
	conn.close()
	return result",通过$db$连接数据库，使用Python表达式的方式查询$tb_name$表中的所有数据，关闭数据库连接，返回所有查询结果。,"Connect to the database through $db$, use the Python expression to query all the data in the $tb_name$ table, close the database connection, and return all query results."
11547,"def query_user(conn, uname):
	age = conn.execute(""SELECT age FROM user WHERE uname = :uname"", {""uname"": uname}).fetchone()
	print(age)
	return age",使用$conn$查询user表中uname为$uname$的第一条age，打印查询结果并返回。,"Use $conn$ to query the user table for the first piece of age with uname as $uname$, print the query result and return it."
13029,"from sqlalchemy.sql import select
def random_krok(engine,bestkrok):
	conn = engine.connect()
	q = select([bestkrok])
	items = conn.execute(q).fetchall()
	return items",使用$engine$获取连接。使用python表达式设置SQL（查询$bestkrok$表中的内容）。使用连接执行SQL并获取所有数据后返回查询结果。,Use $engine$ to get the connection. Use the python expression to set up SQL (query the contents of the $bestkrok$ table). Use the connection to execute the SQL and get all the data and return the query results.
13905,"def select_newsid(conn, headline):
	sql = ""SELECT newsids FROM Model WHERE headline =: headline""
	results = conn.execute(sql,{""headline"":headline}).fetchall()
	return results",设置SQL语句(通过$headline$查询Model表中的newsids)，通过$conn$执行SQL获取所有数据并将其返回。,"Set the SQL statement (query the newsids column in the Model table through $headline$), execute SQL through $conn$, get all the data, and return it."
13369,"def ticker_count(conn,state):
	sql = ""SELECT count(*) FROM exchange_ticker WHERE state=%s""%state
	try:
		results=conn.execute(sql).fetchone()
	except Exception as e:
		print(e)
	count = results[0][0]
	return count","使用字符串匹配方法设置sql（根据$state$查询表exchange_ticker中全部信息的数量）,尝试使用$conn$执行SQL并获取第一条数据，如果执行时出现Exception异常，输出这个异常。最后返回查询结果第0条数据的第0个字符。","Use the string matching method to set sql (query the amount of all the information in the exchange_ticker table based on $state$), try to use $conn$ to execute SQL and get the first piece of data, and output this exception if an Exception occurs during execution. Finally, return the 0th character of the 0th piece of data of the query result."
11130,"import pandas as pd
from sqlalchemy import create_engine
def select_data(db,State):
	engine = create_engine(db)
	conn = engine.connect()
	data = conn.execute(""SELECT * FROM Alltypes WHERE State=:State"",{""State"":State}).fetchall()
	data = pd.DataFrame(data)
	return data.to_json(orient=""records"")",通过$db$获取数据库引擎并建立连接。执行SQL语句（根据$State$查询Alltypes表中的所有列）并获取所有数据，将查询结果转化为DataFrame类型。返回DataFrame的to_json方法处理后的所有查询结果，其中orient的参数为'records'。,"Get the database engine and establish the connection through $db$. Execute the SQL statement (query all columns in the Alltypes where State is $State$) and get all the data to convert the query results to DataFrame type. Return all the query results after the to_json method of the DataFrame is processed, where the orient parameter is 'records'."
11297,"import json
def pycswdel(identifier, conn):
	try:
		sqlm = ""SELECT metalinks FROM published WHERE identifier=:identifier""
		msg=conn.execute(sqlm,{""identifier"":identifier}).fetchall()
		return json.dumps({'MSG':msg})
	except:
		msg = json.dumps({'MSG':'Gagal unpublish servis CSW!'})
	return msg",尝试使用$conn$执行SQL(根据$identifier$获取published中的metalinks列)并获取所有数据，然后使用dumps处理'MSG'和查询结果并返回，如果不，则使用dumps处理'MSG':'Gagal unpublish servis CSW!'内容，最后返回dumps处理的内容,"Try to execute SQL with $conn$ (get the metalinks column in published based on $identifier$) and get all the data. Use dumps to process 'MSG' and query result and return. If not, use dumps to process 'MSG':'Gagal unpublish servis CSW!', and finally return the content processed by dumps."
13134,"from sqlalchemy import create_engine
from flask import render_template
def profile(DATABASEURI,name1):
	engine = create_engine(DATABASEURI)
	con = engine.connect()
	cusor_user = con.execute(""select * from myinsert where name=:name1"",{""name1"":name1})
	rows_user = cusor_user.fetchall()
	return render_template(""profile.html"",rows_user = rows_user)","使用$DATABASEURI$获取数据库引擎并连接数据库，执行SQL（根据name为$name1$获取myinsert表中的所有列）并获取所有数据，最后返回渲染后的""profile.html""，其中rows_user参数为查询结果","Use $DATABASEURI$ to get the database engine and connect to the database, execute SQL (get all the columns in the myinsert where name is $name1$) and get all the data, and finally return the rendered ""profile.html"" with the rows_user parameter as the result of the query."
13409,"def validateLogin(conn, User, email):
	u = conn.query.filter(User.email == email).first()
	if u:
		print(u)
		return True
	return False",根据python表达式的方式，使用$conn$执行SQL（根据$email$获取$User$表中的第一条数据），如果查询结果为真，则打印查询结果并返回True，最后返回False,"Use $conn$ to execute SQL based on the Python expression (get the first piece of data in $User$ table based on $email$). If the query result is true, print the query result and return True, and finally return False"
14236,"def select_item(conn,flight_id):
	try:
		res = conn.execute(""SELECT * FROM flights WHERE id = :id"", {""id"": flight_id}).fetchall()
		return res
	except Exception as e:
		print(e)",尝试性使用$conn$查询flights表中id为$flight_id$的所有列，并获取所有数据，返回执行结果。如果出现Exception，打印异常信息。,"Try to use $conn$ to query all the columns in the flights table where id is $flight_id$, get all the data, and return the execution result. If there is an Exception, print exception message."
11446,"def select_res(session,User,id):
	conn = session.connection()
	rows = conn.query(User).filter(User.id == id).fetchall()
	assert len(rows) == 1",使用ORM的方式，利用$session$连接数据库并执行SQL（根据$id$查询$User$表中全部信息），并获取查询到的所有数据，设置断言判断查询结果长度是否等于1。,"Use ORM and $session$ to connect to the database and execute SQL (query all information in $User$ table based on $id$), and get all the queried data. Set assertion to determine whether the query result length is equal to 1."
13159,"from sqlalchemy import create_engine
def select_db(connstr,name):
	engine = create_engine(connstr, echo=True)
	conn = engine.connect()
	res=conn.execute(""select DATABASE from data_warehouse_admin where name=:name"",{""name"":name}).fetchall()
	conn.close()
	return res","使用$connstr$获取数据库引擎并连接数据库，其中echo参数为True,然后执行SQL（根据$name$获取data_warehouse_admin表中的DATABASE列）并获取所有数据，再确保连接关闭，最后返回查询结果","Use $connstr$ to get the database engine and connect to the database, where the echo parameter is True, then execute the SQL (get the DATABASE in the data_warehouse_admin where name is $name$) and get all the data, then make sure the connection is closed, and finally return the query results."
11157,"from flask import render_template
def transac(conn,uid):
	cmd = ""SELECT * FROM playertable WHERE uid=""+uid
	result=conn.execute(cmd).fetchall()
	return render_template('transactions.html', trans = result)",设置SQL（通过$uid$查询playertable中的所有列），通过$conn$连接执行SQL获取所有数据，渲染并返回'transactions.html'，其中trans参数为查询结果。,"Set SQL (query all columns in playertable where uid is $uid$) , execute SQL with $conn$ connection to get all data, render and return 'transactions.html', where the trans parameter is the result of the query."
13476,"from sqlalchemy.sql import select
def app_user_logout(conn, atable, uname):
	try:
		sql = select([atable]).where(atable.c.uname == uname)
		results = conn.execute(sql).fetchall()
		return results
	except :
		return False",尝试根据python表达式的方式执行SQL（获取$atable$表中uname为$uname$的所有列）并利用$conn$执行SQL获取所有数据，再返回查询结果，如果不尝试则返回False,"Try to execute SQL based on the Python expression (get all columns in the $atable$ table with uname as $uname$) and use $conn$ to execute SQL to get all data, then return the query results. If not try then return False."
13308,"def test_functions(conn,id):
	stmt = conn.execute(""SELECT * FROM rows_1 WHERE id=:id"",{""id"":id}).fetchall()
	assert stmt!=[]
	return stmt",使用$conn$执行SQL（根据$id$查询rows_1表中所有列），并获取所有查询结果，设置断言判断返回结果是否等于空集，最后返回查询结果,"Use $conn$ to execute SQL (query all columns in the rows_1 table according to $id$), get all the query results, set the assertion to determine whether the returned result is equal to the empty set, and finally return the query result"
11501,"def checkToken(conn, token):
	q = ""SELECT * FROM tokens WHERE token = :token""
	res = conn.execute(q, {""token"": token}).fetchone()
	if res is None:
		return None
	return res",设置SQL查询语句为:通过$token$获取tokens表中的所有列，使用$conn$执行SQL语句获取第一条数据，如果查询结果为空，则返回None，否则返回获取的查询结果。,"Set the SQL query statement to: Get all columns in tokens table by $token$ and use $conn$ to execute the SQL statement to get the first piece of data. If the query result is empty, then return None, otherwise return the obtained query result."
13988,"def get_bars(engine, phone):
	with engine.connect() as con:
		sql = ""SELECT license FROM bars WHERE phone =: phone""
		rs = con.execute(sql,{""phone"":phone})
		return [dict(row) for row in rs]",使用with语句根据$engine$连接数据库。设置SQL语句为：查询bars表中phone为$phone$license数据，执行SQL语句，将查询结果每一项转化为dict存储为list并返回。,"Use the with statement to connect to the database based on $engine$. Set the SQL statement: Query the bars table for 'phone'as $phone$license data. Execute the SQL statement, convert each item of the query result into dict, store as list and return."
13316,"from flask import render_template
def selectflight(conn,flight_id):
	names_val = conn.execute(""SELECT name FROM passengers WHERE flight_id=:flight_id"",{""flight_id"":flight_id}).fetchall()
	if names_val is None:
		return render_template(""error.html"")
	return render_template(""flight.html"")",使用$conn$执行SQL（根据$flight_id$查询passengers表中name列），并获取所有查询结果，如果未获取到数据，则返回渲染后的'error.html'，否则返回渲染后的'flight.html'页面,"Use $conn$ to execute SQL (query the name column in the passengers table according to $flight_id$) and get all the query results. If no data is obtained, return the rendered 'error.html'; otherwise, return the rendered' flight.html' page."
14013,"from sqlalchemy import create_engine
def NovoSelecionarAluno(db_string, id):
	db = create_engine(db_string)
	try:
		result = db.execute(""SELECT name FROM use WHERE id=:id"", {""id"":id})
		res = result.fetchone()
		return res
	except Exception as e:
		print(e)",通过$db_string$创建数据库引擎。尝试执行SQL语句：使用$id$从use表中获取name数据，获取第一条数据并返回。若出现Exception异常，则打印异常信息。,"Create the database engine through $db_string$. Try to execute the SQL statement: Use $id$ to get the name data from the use table, get the first piece of data, and return. If an Exception exception occurs, the exception information is printed."
13637,"def find_text(db,value):
	text = db.execute(""select data from ins00 where id=:value"",{""value"":value}).fetchone()
	results = []
	for i in text:
		results.append(i[0])
	return ''.join(results)",使用$db$执行SQL（查询当id为$value$时ins00表中的data）并获取第一条数据。使用for循环将查询结果中每一项的第0号元素存储到list中。最后通过join方法将list结果转化为字符串并返回。,"Execute the SQL (query data in the ins00 table when the id is $value$) using $db$ and get the first data. Use the for loop to store element 0 for each item in the query result in a list. Finally, we use the join method to convert the list result into a string and return it."
14247,"from flask import request, render_template
def search_template(conn,ID):
	if request.method == 'GET':
		return render_template('search.html',method=""get"")
	elif request.method == 'POST':
		results = conn.execute(""SELECT * FROM books WHERE isbn =:ID"",{""ID"":ID}).fetchall()
		return render_template('search.html', results=results, method=""post"")","如果request模块发送请求的方式为GET，渲染并返回'search.html'，其中method参数为""get""。如果request模块发送请求的方式为POST，通过$conn$连接执行SQL（查询books表中isbn为$ID$的所有列）获取所有数据，渲染并返回'search.html'，其中results参数为执行结果，method参数为""post""。","If the request module sends the request in a GET method, render and return 'search.html', where the method parameter is ""get"". If the request module sends the request in a POST method, through the $conn$ connection (querying all columns in the books table where isbn is $ID$) to get all the data, render and return 'search.html', where the results parameter is the execution result and the method parameter is ""post""."
13677,"from flask import jsonify
def api(conn,zcode):
	sqls = ""SELECT state FROM zips where zip=:z""
	query_results = conn.execute(sqls, {""z"": zcode}).fetchall()
	results = []
	for row in query_results:
		results.append(row)
	return jsonify(results[0])",设置SQL（查询当zip为$zcode$的时候，zips中的state信息）。使用$conn$执行SQL并获取所有数据。使用for循环将查询结果存入list，并使用jsonify返回list中第0号元素。,Place SQL (query state information in zips where zip is $zcode$) . Execute SQL with $conn$ and get all the data. Use A for loop to put the query result into a list and use jsonify to return element 0 in the list.
11616,"def getlastrow(conn,stromsonst):
	query = ""select * from table where stromsonst=:stromsonst""
	rows = conn.execute(query,{""stromsonst"":stromsonst}).fetchone()
	row = rows[-1]
	return row",使用$conn$执行SQL（根据$stromsonst$获取table表中的所有列）并获取第一条数据，最后返回查询结果的最后一项元素,"Use $conn$ to execute SQL (get all the columns in the 'table' table according to $stromsonst$), get the first data, and finally return the last element of the query result."
11575,"def user(conn, username, password):
	query = conn.execute(""SELECT * FROM users WHERE username = :username AND password = :password"", {""username"": username,""password"": password}).fetchall()
	if len(query)!=0:
		print(query)
	else:
		return ""Account doesn't exist""","使用$conn$连接执行SQL语句（根据$username$和$password$获取users中的全部列）并获取所有数据。如果查询结果的长度不为0，则打印查询结果，否则返回""Account doesn't exist""。","Use the $conn$ connection to execute the SQL statement (get all the columns in the users table based on $username$ and $password$) and get all the data. If the length of the query result is not 0, print the query result; otherwise, return ""Account doesn't exist""."
13160,"def sql_check_database(conn,dbname):
	res=conn.execute(""SELECT * FROM pg_database WHERE dbname=:dbname"",{""dbname"":dbname}).fetchall()
	return res",使用$conn$执行SQL（根据$dbname$获取pg_database表中的所有列）并获取所有数据，最后返回查询结果,"Execute the SQL (get all the columns in the pg_database where dbname is $dbname$) with $conn$, get all the data, and return the query results."
13239,"def get_source(conn, assi_name, Assignments):
	results = conn.query(Assignments).filter(Assignments.AssName == assi_name).all()
	conn.close()
	return results",在ORM方式下，使用$conn$执行SQL语句（根据$assi_name$查询$Assignments$表中的所有列）并获取所有信息。关闭数据库连接，返回查询到的数据。,"In ORM, execute the SQL statement using $conn$ (query all columns in the $Assignments$ where the name of assi is  $assi_name$) and get all the information. Close the database connection and return the data from the query."
11499,"def search_data(engine, key):
	connection = engine.raw_connection()
	cursor = connection.cursor()
	mysql = ""SELECT * FROM table_name WHERE key =: key""
	records = cursor.execute(mysql,{""key"":key}).fetchall()
	cursor.close()
	return records","使用$engine$获取游标，设置sql（根据$key$查询table_name表中全部信息）,执行SQL并获取所有查询结果，关闭连接，返回查询结果。","Use $engine$ to get cursor, set SQL (query all information in table_name table based on $key$), execute SQL and get all the query results. Close the connection and return the query results."
13785,"def make_query(conn,cookies):
	results = conn.execute(""SELECT * FROM master WHERE cookies = :cookies"",{""cookies"": cookies}).fetchall()
	first_row = results[0]
	print(first_row)
	return first_row",利用$conn$执行SQL（根据$cookies$查询master表中所有列），并获取所有查询结果，打印并返回查询结果的第0个元素。,"Execute SQL with $conn$ (query all columns in the master table according to $cookies$), get all the query results, print and return the 0th element of the query result."
11178,"from sqlalchemy.sql import select
def query_old_recs(engine,view_group,yaml):
	conn = engine.connect()
	s = select(view_group).where(view_group.c.yaml == yaml)
	return conn.execute(s).fetchall()","通过$engine$连接数据库。使用Python表达式的方式设置SQL语句（根据$yaml$获取$view_group$表中的所有数据）,执行SQL获取所有数据并返回。","Connect to the database with $engine$. Use a Python expression to set the SQL statement (get all the data in the $view_group$ where yaml is $yaml$) , execute the SQL to get all the data and return."
13492,"def select_num(conn, id):
	num_sql = ""SELECT num FROM mytable WHERE id =: id""
	rows = conn.execute(num_sql,{""id"":id}).fetchall()
	assert len(rows) == 1",使用$conn$执行SQL（根据$id$获取mytable表中的num列）并获取所有数据，最后设置断言，查询结果的长度为1,Use $conn$ to execute SQL (get num column in the mytable table based on $id$) and get all the data. Finally set assertion that the length of the query results is 1.
11545,"def get_largest_spenders(engine, bar):
	with engine.connect() as con:
		query = ""SELECT * FROM transactions WHERE bar = :bar""
		rs = con.execute(query, bar = bar).fetchall()
		results = [dict(row) for row in rs]
		return results",通过with语句使用$engine$连接数据库。设置SQL语句（根据$bar$查询transactions表中的所有列），执行SQL语句获取全部数据。将查询结果每一项转化为dict存储为list并返回。,Use $engine$ to connect to the database through the with statement. Set up the SQL statement (query all columns in the transactions table based on $bar$) and execute the SQL statement to get all the data. Convert each item of the query result into dict and store it as list and return it.
11408,"import csv
def main(conn):
	book = open(""books.csv"")
	reader = csv.reader(book)
	for isbn, title in reader:
		res = conn.execute(""SELECT * FROM bookdetails WHERE title = :title and isbn = :isbn"",{""title"": title, ""isbn"": isbn}).fetchall()
		print(res)","打开并读取文件""books.csv""，循环文件中的isbn, title，利用$conn$执行SQL（根据每条title和isbn查询bookdetails表中所有列），获取所有查询结果并打印。","Open and read the file ""books.csv"", and the isbn, title, in the circular file uses $conn$ to execute SQL (query all columns in the bookdetails table based on each title and isbn), get all the query results and print them."
13995,"def getIndex(engine, models, ia_uri):
	connection = engine.raw_connection()
	cursor = connection.cursor()
	res = cursor.query.filter(models.SEARCH.ia_uri == ia_uri).fetchall()
	return [dict(row) for row in res]",使用$engine$连接数据库并创建游标对象，通过游标使用ORM方式执行SQL语句：根据$ia_uri$查询$models$表中所有数据，将查询结果每一项转化为dict存储为list并返回。,"Use $engine$ to connect to the database and create a cursor object. Execute the SQL statement through the cursor and ORM: Query all the data in the $models$ table according to $ia_uri$, convert each item of the query result to dict, store it as list, and return."
13688,"def get_student(db,name):
	res = db.execute(""select * from student where username = :name"",{""name"":name}).fetchone()
	if res:
		return res",使用$db$执行SQL（查询当username为$name$时，student表中的所有列）并获取第一条数据。如果查询结果存在则返回。,Execute the SQL (query all columns in the student where username is $name$) using $db$ and get the first data. Return if the query result exists.
13710,"def country(session,ID):
	s = session.execute(""select country from actions where ID = :ID"",{""ID"":ID}).fetchall()
	session.close()
	data = [record[0] for record in s]
	for x in data:
		print(x)
	return data",使用$session$执行SQL（根据$ID$查询actions表中的country信息）并获取所有数据。关闭$session$。将查询结果中每一项的第0个元素存入list中。使用for循环打印list中每一项数据。最后返回list中的数据。,"Use $session$ to execute SQL (query the country information in the actions table based on $ID$), get all the data, and close $session$. Store the 0th element of each item in the query result into list, use for loop to print each item of data in list, and finally, return the data in list."
13016,"from flask import jsonify
def get(db_connect):
	try:
		conn = db_connect.connect()
		query = conn.execute(""SELECT * FROM ticket"")
		result = [dict(zip(tuple(query.keys()), i)) for i in query.cursor]
		return jsonify(result)
	except:
		return jsonify({'error': ""fail""})","尝试性执行如下代码：使用$db_connect$获取连接；使用连接执行SQL（查询ticket表中的所有列）；将执行结果的keys作为字典中的key，执行结果游标中的每一项分别作为value，最后将字典存入list中；使用jsonify返回处理后的字典。如果出现异常则返回jsonify处理后的{'error': ""fail""}。","Try to execute the following code: Use $db_connect$ to get the connection; use the connection to execute SQL (query all columns in the ticket table); use the keys of the execution result as a key in the dictionary, each item in the result cursor as value, and finally store the dictionary in list; use jsonify to return the processed dictionary. If an exception occurs, return the {'error': ""fail""} that is processed by jsonify."
14275,"from flask import jsonify
def happyness_index(conn):
	data = conn.execute(""SELECT * FROM happiness"").fetchall()
	return jsonify({'data': [dict(row) for row in data]})",使用$conn$执行SQL语句（查询happiness中的全部列）获取所有数据，将所获取数据每一项转化为dict存储为list，并使用jsonify将list内容返回。,"Use $conn$ to execute the SQL statement (query all the columns in the happiness) to get all the data, convert each item of the obtained data into dict, store it as list, and use jsonify to return the list content."
13964,"def select_coordinates(e, id):
	conn = e.connect()
	coordinates_sql = ""SELECT * FROM coordinates WHERE id =: id""
	query = conn.execute(coordinates_sql,{""id"":id}).fetchall()
	result = [dict(i) for i in query]
	return result",使用$e$连接数据库，设置SQL语句为：查询coordinates表中id为$id$的所有列，执行SQL获取所有数据，将查询结果每一项转化为dict存储为list并返回。,"Use $e$ to connect to the database, set the SQL statement to: Query all the columns in the coordinates table with 'id': of $id$, execute SQL to get all the data, convert each item of the query result to dict, store it as list, and return."
13467,"from sqlalchemy.sql import select
def get_recent_datapoints(engine, meteo_table, from_time):
	with engine.connect() as conn:
		sql = select([meteo_table.c.type]).where(meteo_table.c.time > from_time)
		results = conn.execute(sql).fetchall()
		return results",使用with语句利用$engine$连接数据库，根据python表达式的方式执行SQL（获取$meteo_table$表中time大于$from_time$的type列）并获取所有数据，最后返回查询结果,"Use the with statement to connect to the database through $engine$, execute SQL based on the Python expression (get the type column in the $meteo_table$ table with time greater than $from_time$) and get all the data. Finally return the query results."
11326,"from sqlalchemy.sql import select
def get__best_selling_locations(engine,bar,item):
	with engine.connect() as con:
		sql = select(bar).where(bar.c.item == item)
		quantity = con.execute(sql).fetchall()
		results = [dict(row) for row in quantity]
		return results","使用with语句根据$engine$连接数据库,执行python表达式(根据$item$查询$bar$表中所有列）并获取所有数据，将查询结果每一项转化为dict存储为list并返回。","Use the with statement to connect the database based on $engine$, execute the python expression (query all the columns in the $bar$ table based on $item$), get all the data, convert each item of the query result to dict, store it as list and return."
11647,"from sqlalchemy.sql import select, func
def find_vcf(connection, genotypes, vcf_id):
	count_q = select([func.count()]).where(genotypes.c.vcf_id == vcf_id)
	(count,) = connection.execute(count_q).fetchone()
	return count",根据python表达式的方式，利用$connection$执行SQL（获取$genotypes$表中vcf_id为$vcf_id$的所有列的计数）并获取第一条数据，最后返回查询结果,"Use $connection$ to execute SQL based on the python expression (get the count of all the columns in the $genotypes$ table whose vcf_id is $vcf_id$), get the first piece of data, and finally return the query result."
14048,"def get_id(conn, managerid):
	try:
		sql = 'select MANAGER_HALL_ID from manager where MANAGER_ID=%s'%managerid
		hall_all_id= conn.execute(sql).fetchall()
		return hall_all_id
	except:
		return False","尝试通过字符串方法设置SQL语句，内容为:当MANAGER_ID等于$managerid$时查询manager中的MANAGER_HALL_ID数据,使用%操作符匹配SQL字符串中的条件。使用$conn$执行SQL语句并获取所有数据，返回所有的查询结果。如果出现异常，则返回False。","Try to set the SQL statement to query the MANAGER_HALL_ID data in manager where MANAGER_ID is $managerid$ and use the% operator to match the conditions in the SQL string. Use $conn$ to execute the SQL statement, get all the data and return all the query results. If an exception occurs, return False."
14090,"import logging
def query(engine):
	with engine.connect() as conn:
		query=""select COUNT(ovie_id) from links""
		count = conn.execute(query).fetchone()
		if count:
			return count
		else:
			logging.error(""fail"")","通过with语句根据$engine$连接数据库。设置SQL语句（从links表中获取ovie_id数据的统计值），执行SQL并获取第一条数据。如果获取到的数据不为空，返回查询结果；否则通过logging.error（）返回""fail""。","Connect to the database according to $engine$ through the with statement. Set the SQL statement (get the statistics of the ovie_id data from the links table), execute the SQL, and get the first piece of data. If the data obtained is not empty, return the query result; otherwise, return 'fail' through logging.error ()."
13333,"from sqlalchemy import create_engine
def ListarProfessoresNome(db_string,id,nome):
	db = create_engine(db_string)
	try:
		result = db.execute(""SELECT * FROM tb_user WHERE id=:id AND nome=:nome"",{""id"":id,""nome"":nome}).fetchall()
		answer = []
		for part in result:
			answer.append(part)
		res = answer
	except Exception as e:
		print(e)
		res = False
	return res",通过$db_string$获取数据库引擎。尝试执行SQL语句（根据$id$和$nome$查询tb_user表中所有列），并获取所有数据，使用for循环将查询结果的每一条插入一个list并返回，如果捕获到异常Exception，打印这个异常，并返回False。,"Get the database engine through $db_string$. Try to execute the SQL statement (query all the columns in the tb_user table based on $id$ and $nome$), get all the data and use for loop to insert each item of the query result into a list and return. If an Exception is caught, print the exception and return False."
11007,"def query_from_carrito(conn, session, clienteid,productoid):
	if ""user""in session:
		result = conn.execute(""SELECT * FROM pedidos WHERE clienteid=:clienteid AND productoid=:productoid"",{""clienteid"":clienteid,""productoid"":productoid}).fetchall()
		if(len(result) == 0):
			return
		return result[0][0]
	else:
		print(""error"")","当user在$session$中的时候，使用$conn$执行SQL（根据$clienteid$和$productoid$查询pedidos表中的所有列）并获取所有数据。如果查询结果长度为0，就直接返回，否则返回查询结果的[0][0]号元素。如果不在$session$中则打印""error""信息。","When user is in $session$, use $conn$ to execute SQL (query all columns in the pedidos table based on $clienteid$ and $productoid$) and get all the data. If the length of the query result is 0, return directly, otherwise return the [0] [0] element of the query result. Print ""error"" information if it is not in $session$."
13963,"from sqlalchemy.sql import select
from sqlalchemy import create_engine
def read_all_results(db_cnf, table, id):
	engine = create_engine(db_cnf)
	conn = engine.connect()
	sql = select([table]).where(table.c.id == id)
	results = conn.execute(sql).fetchall()
	return results",通过$db_cnf$获取数据库引擎并建立连接。使用Python表达式的方式设置SQL语句（根据$id$查询$table$表中的所有数据），执行SQL获取所有数据并返回。,"Get the database engine through $db_cnf$ and establish a connection. Use the Python expression to set the SQL statement (query all the data in the $table$ table according to $id$), execute SQL to get all the data and return."
11429,"def getTableSchema(conn, type):
	tableSQLQuery = ""SELECT sql FROM sqlite_master WHERE type =: type""
	res = conn.execute(tableSQLQuery,{""type"":type}).fetchone()
	return res[0]","设置sql（根据$type$查询sqlite_master表中sql列）,使用$conn$执行SQL并获取第一条数据，返回查询结果的第0个元素。","Set up SQL (query SQL column in sqlite_master table based on $type$), use $conn$ to execute SQL and get the first piece of data, and return the 0th element of the query result."
11586,"def test_has_table(engine, mid):
	d = engine.execute(""SELECT * FROM mytable WHERE mid = :mid"", {""mid"": mid}).fetchall()
	assert len(d)!=0
	return d",通过$engine$执行SQL语句，其内容为：根据$mid$查询mytable中的所有列，并获取所有数据。设置断言判断返回结果的长度不为0，返回所有的查询结果。,"Execute the SQL statement through $engine$, and the content is as follows: Query all the columns in the 'mytable' table based on $mid$ and get all the data. Set the assertion to determine that the length of the returned result is not 0 and return all query results."
11047,"from flask import redirect,url_for
def submitreview(conn,user_id,book_id):
	review = conn.execute(""SELECT review FROM reviews WHERE user_id=:user_id AND book_id=:book_id"",{""user_id"":user_id,""book_id"":book_id}).fetchall()
	return redirect(url_for(""book"", review=review))","使用$conn$执行SQL（根据$user_id$和$book_id$查询reviews表中的review信息）并获取所有数据。将查询结果传入为“review”参数并通过url_for和redirect定位到""book""页面。","Use $conn$ to execute SQL (query the review information in the reviews table based on $user_id$ and $book_id$) and get all the data. Pass in the query result as the ""review"" parameter and navigate to the ""book"" page through url_for and redirect."
11588,"from flask import render_template
def book_select(conn, isbn):
	result = conn.execute(""SELECT title FROM books WHERE isbn = :isbn"", {""isbn"": isbn}).fetchone()
	return render_template('book_select.html', title=result)",通过$conn$执行SQL（根据$isbn$查询books中的第一条title数据），渲染并返回'book_select.html'，其中title参数为查询结果。,"Execute SQL through $conn$ (query the first title data in books based on $isbn$), render and return 'book_select.html', where the title parameter is the query result."
14233,"def getTop(db_conn):
	query = ""SELECT * FROM getTopVentas""
	result = db_conn.execute(query).fetchall()
	top = []
	for r in result:
		top.append(r)
	return top",设置查询语句为：获取getTopVentas中的所有列，通过$db_conn$连接执行SQL获取所有数据。使用for循环将查询结果中的每一项元素都存储到list中并将list内容返回。,Set the query statement: Get all the columns in getTopVentas and execute SQL to get all the data through the $db_conn$ connection. Use for loop to store each element in the query result into list and return the list content.
13430,"def get_stats_master(conn, id):
	sql = ""SELECT value FROM stats_master WHERE id =: id""
	result_proxy = conn.execute(sql,{""id"":id})
	a = []
	for row in result_proxy:
		a.append(row)
	return a",使用$conn$执行SQL（根据$id$获取stats_master表中的value列），然后使用for循环对查询结果的每一项转化为list，最后返回list,Use $conn$ to execute the SQL (get the value column in stats_master table based on $id$). Then use for loop to convert each item of the query results into list and finally return the list.
14018,"def postgresql_table(conn,public):
	with conn.connect() as connection:
		table_tup = connection.execute(""SELECT tablename FROM pg_tables WHERE schemaname =:public "", {""schemaname"":public}).fetchall()
		tables = [tup[0] for tup in table_tup]
		print(tables)",通过$conn$和with语句连接数据库，执行SQL语句：查询pg_tables表中schemaname为$public$的所有tablename，将查询结果每一项的第0个元素存储为list并返回。,"Connect to the database through the $conn$ and with statements and execute the SQL statement: Query all tablename in the pg_tables table that a schemaname is $public$, store the 0th element of each item of the query result as list and return."
11311,"def get(e,DEPARTMENT):
	conn = e.connect()
	query = conn.execute(""select distinct from salaries where DEPARTMENT = :DEPARTMENT"",{""DEPARTMENT"":DEPARTMENT})
	return {'departments': [i[0] for i in query.cursor.fetchall()]}",使用$e$创建数据库连接，执行SQL（根据$DEPARTMENT$查询salaries表中distinct列的所有数据）。将查询结果中每一项的第0个元素存储为list，并作为字典中departments所对应的值返回。,"Use $e$ to create a database connection and execute SQL (query all data in the distinct column of the salaries table based on $DEPARTMENT$). Store the 0th element of each item in the query result as list, and return as the value corresponding to departments in the dictionary."
13801,"def getUserEntry(appEngine, userId):
	connector = appEngine.connect()
	res = connector.execute(""SELECT COUNT(userName) FROM user WHERE id =: id"", {""id"": userId}).fetchall()
	return res[0]",通过$appEngine$与数据库建立连接。执行SQL语句：查询user表中id为$userId$的所有userName的数目，返回查询结果的第0个元素。,"Establish the connection to the database through $appEngine$. Execute SQL statement: Query the number of all userName in the user table with id as $userId$, return the 0th element of the query results."
13153,"def test_transaction_close(conn,name):
	result = conn.execute('select count(user_id) from query_users where name=:name',{""name"":name}).fetchone()
	conn.close()
	return result",使用$conn$执行SQL（根据$name$获取query_users表中被计数方法处理的user_id列）并获取第一条数据，然后关闭$conn$连接，最后返回查询结果,"Execute SQL with $conn$ (get the user_id column in the query_users table processed by the count method where name is $name$) and get the first data, then close the $Conn$ connection and return the query results."
14272,"from sqlalchemy.sql import select
def table(engine, formulario):
	connection = engine.connect()
	s = connection.execute(select([formulario])).fetchall()
	return s",通过$engine$连接数据库，使用Python表达式的方式执行SQL语句：查询$formulario$表中的所有数据，返回查询结果。,Connect the database through $engine$ and use the Python expression to execute the SQL statement: Query all the data in the $formulario$ table and return the query results.
14081,"from flask import render_template,request
def book(conn, isbn):
	book = conn.execute(""SELECT * FROM books WHERE isbn = :isbn"", {""isbn"":isbn}).fetchone()
	if book is None:
		return None
	if request.method ==""POST"":
		return render_template(""book.html"",book = book)","使用$conn$执行SQL语句（根据$isbn$获取books表中的所有列，并获取第一条数据。如果查询结果为空，返回None；如果request模块发送请求的方式为post，渲染并返回""book.html"",其中book参数为查询结果。","Use $conn$ to execute the SQL statement (get all the columns in the books table based on $isbn$ and get the first piece of data. If the query result is empty, return None; if the request module sends the request in a way that renders for post, return ""book.html"", where the book parameter is the query result."
13030,"def getOrder(conn,orderId):
	execStr = ""SELECT * FROM orderItem WHERE orderId = :orderId""
	execResults = conn.execute(execStr,{""orderId"":orderId}).fetchall()
	conn.close()
	return execResults",设置SQL（根据$orderId$查询orderItem中的所有列）。使用$conn$执行SQL并获取所有数据。关闭连接并返回查询结果。,Set up SQL (query all columns in orderItem based on $orderId$). Use $conn$ to execute SQL and get all the data. Close the connection and return the query results.
11495,"def findbyid(conn, id):
	sql = ""SELECT * FROM cars WHERE id = %s""%id
	cars = conn.execute(sql).fetchall()
	return cars","利用字符串匹配设置sql（根据$id$查询cars表中全部信息）,使用$conn$执行SQL并获取所有查询结果，返回查询结果。","Use the string matching to set SQL (query all the information in the cars table based on $id$). Use $conn$ to execute SQL, get all the query results, and return the query results."
13769,"def getNaForAColumn(conn,col,func_length):
	sql = 'SELECT * FROM tablesModel WHERE col=:col and func_length = :func_length'
	q = conn.execute(sql, {""col"": col,""func_length"":func_length}).fetchone()
	return q[0]",设置SQL（根据$col$，$func_length$查询tablesModel表中所有列），根据$conn$执行SQL并获取第一条数据，返回数据的第0个元素。,"Set SQL (query all columns in the tablesModel table based on $col$ and $func_length$), execute SQL based on $conn$, get the first piece of data, and return the 0th element of the data."
11273,"def prepare_db(engine, id):
	with engine.acquire() as conn:
		res=conn.execute(""SELECT sanic_polls FROM sanic_polls WHERE id=:id"",{""id"":id}).fetchall()
		return res",使用with语句，利用$engine$的获取方法连接，执行SQL(根据$id$查询sanic_polls的sanic_polls列)并获取所有数据，最后返回查询结果,"Use the with statement, connect with the acquisition method of $engine$, execute SQL (query the sanic_polls column of sanic_polls based on $id$), get all the data, and finally return the query result."
11464,"def get_master_data(conn, items):
	to_return = []
	for item in items:
		sql = ""SELECT * FROM table WHERE item =: item""
		results = conn.execute(sql,{""item"":item}).fetchall()
		to_return.append(results)
	return to_return","使用for循环遍历$items$中的每个元素,设置sql（根据item为遍历后的每条结果，查询table表中全部信息）,使用$conn$执行SQL并获取所有查询结果，将每次获得的查询结果存储到一个list中，最后返回这个list。","Use for loop to iterate through each element in $items$, set up SQL (query all the information in the 'table' table based on 'item' which is every piece of the result after iteration), use $conn$ to execute the SQL and get all the query results, store the obtained query results in a list, and finally return the list."
14295,"def dictate(conn,word):
	stmt = ""SELECT * FROM vocabulary WHERE word = :word ""
	vocabulary_row = conn.execute(stmt,{""word"":word}).fetchone()
	if vocabulary_row:
		print(vocabulary_row)",设置SQL语句（根据$word$查询vocabulary表中的所有列），使用$conn$执行SQL获取第一条数据。如果执行结果存在，则将其打印。,"Set the SQL statement (query all the columns in the vocabulary table based on $word$) and use $conn$ to execute SQL to get the first piece of data. If the execution result exists, it is printed."
13698,"def flights(db,id):
	res = db.execute(""select * from flights where flight_id =:id"",{""id"":id}).fetchall()
	print(res)",使用$db$执行SQL（查询当flight_id为$id$时flights表中的所有列）并获取所有数据。最后打印查询结果。,"Execute the SQL (query all columns in the flights where the flight_id is $id$) using $db$ and get all the data. Finally, print the query result."
11180,"from sqlalchemy.sql import select
def query_old_recs(conn,table,id):
	s = select(table.c.lang_code).where(table.c.id == id)
	task = conn.execute(s).fetchall()
	return task",使用Python表达式的方式设置SQL（通过$id$查询$table$中的lang_code列），使用$conn$执行SQL获取所有数据，并返回获取的数据。,"Use Python expressions to set SQL (query the lang_code column in $table$ where id is $id$) , execute SQL with $conn$ to get all the data, and return it."
13947,"def printTable(conn, value):
	sql = ""SELECT * FROM table WHERE value =: value""
	cols = conn.execute(sql,{""value"":value}).fetchall()
	headers = []
	for col in cols:
		print(col)
		headers.append(col)
	return headers",设置SQL语句（根据$value$获取table表中的所有列），使用$conn$连接执行SQL获取所有数据。使用for循环遍历执行结果并打印，将执行结果中的每一项元素都存储到list中并将list内容返回。,"Set the SQL statement (get all the columns in the 'table' table based on $value$), use the $conn$ connection to execute SQL and get all the data. Use for loop to traverse the execution result, print it, store each element of the execution result into list and return the list content."
13114,"def main(conn,flight_id):
	res = conn.execute(""SELECT id, origin, destination, duration FROM flights WHERE id = :flight_id"",{""flight_id"":flight_id}).fetchall()
	if len(res) == 0:
		print(""No flights."")
		return 
	return res","使用$conn$执行SQL（根据id为$flight_id$获取flights表中的id, origin, destination, duration四列信息）并获取所有数据，如果查询结果的长度为0，则打印""No flights.""并直接返回，最后返回查询结果","Execute the SQL (get the columns ID, origin, destination, duration in the flights where id is $flight_id$) with $conn$ and get all the data. If the length of the query result is 0, print ""No flights."" and return directly to the query result."
14207,"from flask import jsonify
def get_user_byid(conn, id):
	q = ""select * from users where id = {}"".format(id)
	user = conn.execute(q).fetchone()
	return jsonify(dict(user))","设置SQL语句（使用format()函数格式化输出字符串,通过字符串$id$查询users表中的所有列）,通过$conn$连接执行SQL获取第一条数据，将执行结果转化为dict并使用jsonify返回。","Set the SQL statement (use the format () function to format the output string, query all the columns in the users table through the string $id$), execute SQL to get the first piece of data via the $conn$ connection, convert the execution result to dict and use jsonify to return."
13288,"from sqlalchemy.sql import select
def get_source(conn, user_id, TelegramUsers):
	sql = select([TelegramUsers.c.id,]).where(TelegramUsers.c.telegram_user_id == user_id)
	results = conn.execute(sql).fetchall()
	return results",在python表达式方式下设置SQL（当telegram_user_id等于$user_id$时，获取$TelegramUsers$表中id列）。使用$conn$获取所有数据并返回查询结果。,Set the SQL (get the id column in the $TelegramUsers$ where the telegram_user_id is $user_id$) under the Python expression. Use $conn$ to get all the data and return the query results.
13247,"def find_bartenders_start_end(engine, name):
	with engine.connect() as con:
		sql_Works = ""SELECT * FROM Works WHERE Barsname =: name""
		records = con.execute(sql_Works,{""name"":name}).fetchall()
		results = [dict(row) for row in records]
		if results is None:
			return None
		return results",在with语句中根据$engine$获取数据库连接，设置SQL（查询当Barsname等于$name$时，Works表中的所有列）。使用数据库连接执行SQL并获取所有数据。将查询结果中每一项转化成dict类型，如果处理后结果为空，则返回None，否则返回查询结果。,"Get the database connection from $engine$ in the with statement and set the SQL (query all the columns in the Works when the Barsname is equal to $name$) . Execute the SQL using the database connection and get all the data. Convert each item in the query result to type dict and return None if the result is empty after processing, otherwise return the query result."
11050,"from flask import request,redirect,url_for,render_template
def login_sle(conn,id,username):
	if request.method == ""POST"":
		rows = conn.execute(""SELECT * FROM users_ba WHERE id=:id AND username=:username"",{""id"":id,""username"":username}).fetchall()
		if len(rows) != 1 :
			print(""invalid username and/or password"") 
		else:
			return redirect(url_for(""index""))
	else:
		return render_template(""login.html"")","如果request的method为""POST""，则使用$conn$执行SQL（根据$id$和$username$查询users_ba表中的所有列）并获取所有数据。如果查询结果长度不为1，则打印""invalid username and/or password""，否则重定向到""index""的url。如果method不是""POST""，则返回渲染后的""login.html""页面。","If the method of request is ""POST"", use $conn$ to execute SQL (query all columns in the users_ba table based on $id$ and $username$) and get all the data. If the query result length is not 1, print ""invalid username and/or password"", otherwise redirect to the url of ""index"". If method is not ""POST"", return the rendered ""login.html"" page."
14012,"def query_id(conn,t_id):
	if t_id is not None:
		try:
			res_ids = conn.execute('select id from resources where t_id = : t_id ',{""t_id"":t_id}).fetchall()
			conn.close()
			return res_ids
		except:
			return False",如果$t_id$不为空，则尝试性使用$conn$查询resources表中t_id为$t_id$的所有id数据，确保$conn$关闭，返回所有的查询结果，出现异常时，则返回False。,"If $t_id$ is not empty, try to use $conn$ to query all id data in the resources table that the t_id is $t_id$, make sure that $conn$ is closed, return all query results, and return False in case of an exception."
13818,"def get_unicode(engine, type):
	query = ""SELECT * FROM DUAL WHERE type =: type""
	res = engine.execute(query, {""type"": type}).fetchall()
	return [dict(row) for row in res]",设置查询语句为：根据$type$获取DUAL中的所有列。使用$engine$执行查询语句获取所有数据。将查询结果每一项转化为dict存储为list并返回。,Set the query statement to: Get all the columns in DUAL based on $type$. Execute the query statement with $engine$ to get all the data. Convert each item of the query results into dict and store it as list and return it.
14202,"from sqlalchemy.sql import select
def book_exists(conn, books, book_id):
	s = select(books).where(books.c.id == book_id)
	rp = conn.execute(s).fetchall()
	if rp is None:
		return False
	return True",使用Python表达式的方式设置SQL：查询$books$表中id为$book_id$的内容，通过$conn$执行SQL语句获取所有数据。如果执行结果为空，则返回False；否则返回True。,"Use the Python expression to set SQL: Query the contents of the $books$ table where id is $book_id$ and execute the SQL statement via $conn$ to get all the data. If the execution result is empty, return False; otherwise return True."
13110,"def filter_beers(engine,max_price):
	with engine.connect() as con:
		rs = con.execute(""SELECT * FROM sells WHERE price=:max_price and lt=:max_price"",{""max_price"": max_price}).fetchall()
		results = [dict(row) for row in rs]
		return results",使用with语句利用$engine$连接数据库并执行SQL（根据price为$max_price$和lt为$max_price$获取sells表中的所有信息）并获取所有数据，然后使用for循环对查询结果的每一项转化为字典类型，最后返回字典类型,"Use the with statement to connect to the database with where engine is $engine$ and execute the SQL（get all the information in the sells where price is $max_price$ and It is $max_price$) and get all the data, then use the for loop to convert each item of the query result to a dictionary type. Finally, the dictionary type is returned."
14192,"def get_campaign(conn):
	result = conn.execute('select * from campaigns').fetchall()
	if result is None:
		return None
	return result",通过$conn$执行SQL语句：查询campaigns表中的所有列，并获取全部数据。如果执行结果为空，返回None；否则，返回所有的执行结果。,"Execute SQL statement by $conn$: Query all columns in campaigns table and get all the data. If the execution result is empty, return None; otherwise, return all the execution results."
13299,"def search_name(conn):
	query = ""SELECT datname FROM pg_database""
	names = conn.execute(query).fetchall()
	items = [i[0] for i in names]
	return items",使用$conn$执行SQL（获取pg_database表中的datname列）获取所有数据，将查询结果中每一项的第0个元素存储到list中并返回。,"Use $conn$ to execute SQL (get the datname column in the pg_database) to get all the data, store the 0th element of each item in the query result in a list and return."
11215,"def get_historial(conn,clienteid):
	result = conn.execute(""select * from pedidos where clienteid =:clienteid"",{""clienteid"":clienteid}).fetchall()
	if(len(result) == 0):
		return None
	historial = []
	for auxdic in result:
		historial.append(auxdic)
	return historial",使用$conn$执行SQL（根据$clienteid$查询pedidos表中所有列）并获取所有数据，如果查询结果的长度为0，则返回空，使用for循环将查询结果中的每一项都加到list中，并返回。,"Use $conn$ to execute SQL (query all columns in the pedidos table based on $clienteid$) and get all the data. Return empty if the length of the query result is 0, and use for loop to add each item in the query result to 'list' and return."
13439,"def test_engine_connect_execute(conn, id):
	player_sql = ""SELECT * FROM players WHERE id =: id""
	results = conn.execute(player_sql,{""id"":id}).fetchall()
	assert len(results)>0",使用$conn$执行SQL(根据$id$获取players表中的所有列)并获取所有数据，然后设置断言，查询结果的长度大于0,Use $conn$ to execute SQL (get all columns in the players table based on $id$) and get all the data. Then set assertion that the length of query result is greater than 0.
11657,"def get_tablenum(engine,date):
	with engine.connect() as connection:
		num = connection.execute(""select count(*) from table where invoicedate=:date"",{""date"":date}).fetchall()
		print(num)",使用with语句通过$engine$连接数据库，执行SQL（根据invoicedate为$date$获取table表中的被计数处理的所有列）并获取所有数据，最后打印查询结果,"Use the with statement to connect the database through $engine$, execute SQL (get all the counted columns in the 'table' table where invoicedate is $date$), get all the data, and finally print the query result."
14063,"def FindMuseo(con, museo):
	query = 'SELECT * FROM musei WHERE id = :museo'
	res = con.execute(query,{""museo"":museo})
	return res.fetchone()",设置SQL：查询musei表中id为$museo$的所有列，使用$con$执行SQL语句，返回获取的第一条数据。,"Set SQL: To query all columns in the musei table where id is $museo$, use $con$ to execute the SQL statement and return the first piece of data obtained."
13221,"def search_neihan(conn):
	neihan_results = conn.execute(""SELECT * FROM neihan"").fetchall()
	return neihan_results",使用$conn$执行SQL语句（查询neihan中的所有列），获取所有数据并返回。,"Execute the SQL statement (query all the columns in neihan) with $conn$, get all the data and return."
13713,"from flask import jsonify
def api(conn,isbn):
	if isbn:
		book = conn.execute(""SELECT * FROM books WHERE isbn = :isbn"", {""isbn"": isbn}).fetchone()
		return jsonify({""title"": book.title,""author"": book.author})
	else:
		return jsonify({""error"": ""Invalid isbn""})","如果$isbn$存在，则使用$conn$执行SQL（根据$isbn$查询books表中的所有列）并获取第一条数据。使用序列化方法返回查询结果中的title和author属性。否则使用序列化方法返回{""error"": ""Invalid isbn""}。","If $isbn$ exists, use $conn$ to execute SQL (query all columns in the books table based on $isbn$) and get the first piece of data. Use the serialization method to return the title and author properties in the query results; otherwise, return {""error"": ""Invalid isbn""} with the serialization method."
13208,"def select_entry(conn, title):
	sql = ""SELECT * from content_table WHERE title =: title""
	testrow = conn.execute(sql,{""title"":title}).fetchall()
	if testrow == None:
		return False
	else:
		return testrow",使用$conn$执行SQL（根据$title$查询content_table中所有列），并获取所有数据。如果获取的结果为None则返回False，否则返回查询结果。,"Execute the SQL (query all the columns in content_table where title is $title$) with $conn$ and get all the data. Return False if the result is None, otherwise the query result is returned."
11329,"def insert_dummy_cardType(conn,cardType_id,cardType_name):
	ins = conn.execute(""select values from card where cardType_id=:cardType_id and cardType_name=:cardType_name"",{""cardType_id"":cardType_id,""cardType_name"":cardType_name}).fetchone()
	return ins",使用$conn$执行SQL（根据$cardType_id$和$cardType_name$查询card表中values列），获取第一行数据，并将数据返回。,"Use $conn$ to execute SQL (query the values column in the card table based on $cardType_id$ and $cardType_name$), get the first row of data, and return the data."
11452,"def select_value(conn, value):
	sql = ""SELECT * FROM tbl WHERE value =: value""
	records = conn.execute(sql,{""value"":value})
	rs = [dict(zip(tuple(records.keys()), record)) for record in records.cursor]
	return rs","设置sql（根据$value$查询tbl表中全部信息）,使用$conn$执行SQL并获取cursor，用for循环遍历执行得到的结果，将每条数据与其keys值转化为tuple并以zip打包。接着转化为dict并插入一个list中，最后返回这个list。","Set up SQL (query all information in tbl table based on $value$), execute SQL with $conn$ and get the cursor, use for loop to iterate through the results, convert each piece of data and its 'keys' value into tuple and pack it in zip. Then convert it into dict and insert it into a list, and finally return the list."
13356,"from sqlalchemy.sql import select
def test_json_query(teng,table,doc):
	with teng.connect() as conn:
		stmt = select(table).where(table.c.doc == doc)
		results = conn.execute(stmt).fetchall()
		return results[0][0]",使用with语句根据$teng$连接数据库，根据python表达式设置SQL：（根据$doc$查询$table$表中所有列），执行SQL并获取所有数据，返回第0条查询结果的第0个元素。,"Use the with statement to connect the database according to $teng$, set SQL according to the python expression (query all columns in the $table$ table based on $doc$), execute SQL, get all the data, and return the 0th element of the 0th query result."
13270,"def select_title(conn, isbn):
	title_sql = ""SELECT title FROM Books WHERE isbn =: isbn""
	titles = conn.execute(title_sql,{""isbn"":isbn}).fetchall()
	if titles==None:
		return False
	else:
		res = [item for item in titles]
		return res",设置SQL的内容为：通过$isbn$查询Books中的所有title。使用$conn$执行SQL并获取所有数据。如果查询结果为空返回False，否则将查询结果中转化为list并返回。,"Set the SQL: query all titles in Books with $isbn$. Execute SQL with $conn$ and get all the data. If the query result is null and return False, otherwise the query result is converted to a list and return."
11281,"def get_urls(conn,devid):
	sqlq = ""SELECT req_url_host FROM httpreqs2 WHERE devid = :devid ""
	res=conn.execute(sqlq,{""devid"":devid}).fetchall()
	for r in res:
		print(r[0])
	return res",使用$conn$执行SQL(根据$devid$获取httpreqs2的req_url_host列)并获取所有数据，然后使用for循环对查询结果中的每一项打印第0个元素，最后返回查询结果,"Use $conn$ to execute SQL (get the req_url_host column of httpreqs2 based on $devid$), get all the data, use for loop to print the 0th element of each item in the query result, and finally return the query result."
13736,"from sqlalchemy import create_engine
def getProvider(db_string, telefone):
	db = create_engine(db_string)
	try:
		don = db.execute(""select INTO from project where telefone = :telefone"",{""telefone"":telefone}).fetchone()
		if don:
			res = True
	except:
		res = False
	return res",通过$db_string$获取数据库引擎并建立连接。尝试执行SQL语句（根据$telefone$查询project表中INTO列），并获取第一条数据，如果获取到数据，返回True，如果捕获到异常，返回False。,"Get the database engine and establish a connection through $db_string$. Try to execute the SQL statement (query the INTO column in the project table according to $telefone$) and get the first piece of data. If data is obtained, return True. If an exception is caught, return False."
13569,"def test_any_with_operator(conn,scores):
	s = ""SELECT name FROM users WHERE scores=:scores""
	res=conn.execute(s,{""scores"":scores}).fetchall()
	return res","设置sql（根据$scores$查询users表中name列）,使用$conn$执行SQL并获取所有查询结果，并返回查询结果。","Set up sql (query the name column in the users table according to $scores$), use $conn$ to execute SQL, get all the query results, and return them."
13318,"from flask import render_template,request,redirect,url_for
def login(conn,user):
	if request.method == 'POST':
		rows = conn.execute(""SELECT * FROM users WHERE username=:user"",{""user"":user}).fetchall()
		if not rows:
			return redirect(url_for('login'))
		return redirect(url_for('home'))
	else:
		return render_template('login.html')",如果请求方式为'POST'：使用$conn$执行SQL（当username等于$user$时查询users表中所有列），如果获取到数据：跳转到'login'页面，否则跳转到'home'页面；否则，返回渲染后的'login.html',"If the request method is' POST', use $conn$ to execute SQL (query all columns in the users table where username is $user$). If get the data,  jump to the 'login' page; otherwise, jump to the' home' page and return the rendered 'login.html'."
11673,"import flask
from sqlalchemy.sql import select
def quizStart(conn, Students, userid):
	username, progress = conn.execute(select([Students.c.student_id, Students.c.progress]).where(Students.c.student_id == userid)).fetchone()
	return flask.jsonify(progress=progress)",利用$conn$，根据python表达式的方式执行SQL(获取$Students$表中student_id为$userid$的student_id和progress两列)并获取第一条数据，最后返回jsonify处理的progress内容，其中progress参数为查询结果的progress列,"Use $conn$ to execute SQL according to the python expression (get the student_id and progress columns in the $Students$ table whose student_id is $userid$), get the first piece of data, and finally return the progress content processed by jsonify, where the progress parameter is the progress column of the query result."
11290,"def tearDown(engine,DATABASE_NAME):
	conn = engine.connect()
	res=conn.execute(""select * from database where DATABASE_NAME=:DATABASE_NAME"",{""DATABASE_NAME"":DATABASE_NAME}).fetchall()
	conn.close()
	return res",使用$engine$连接数据库并执行SQL(根据$DATABASE_NAME$获取database中的所有列)并获取所有数据，然后关闭连接，最后返回查询结果,Connect to the database with $engine$ and execute SQL (get all the columns in database based on $DATABASE_NAME$) and get all the data. Close the connection and finally return the query result.
11234,"from sqlalchemy import create_engine
def getResultOfStatement(db_host,projId, models):
	engine = create_engine(db_host)
	connection = engine.connect()
	try:
		project = connection.query(models.Fuzzjob).filter(models.ID==projId).first()
		return project
	except Exception as e:
		print(e)
	finally:
		connection.close()","通过$db_host$获取数据库引擎并建立连接,尝试使用ORM方式执行SQL语句，获取$models$表中ID为$projId$的Fuzzjob列，获取第一条数据并返回。如果执行时出现异常，则打印异常，最终确保连接关闭","Get the database engine via $db_host$ and establish a connection, try to use ORM method to execute the SQL statement, get the Fuzzjob column in $models$ table with 'ID': $projId$, get the first piece of data and return. If an exception occurs during execution, print the exception and finally make sure the connection is closed."
13918,"from sqlalchemy import create_engine
def database_exists(url, datname):
	engine = create_engine(url)
	sql = ""SELECT * FROM pg_database WHERE datname =: datname""
	try:
		data = engine.execute(sql,{""datname"":datname}).fetchall()
		if data:
			return True
	except:
		return False",使用$url$获取数据库引擎。设置SQL语句为：查询pg_database表中datname为$datname$的所有列。尝试执行SQL获取所有数据，如果执行结果存在，返回True。如果出现异常，返回False。,"Use $url$ to get the database engine. Set the SQL statement: Query all columns in the pg_database table where datname is $datname$. Try to execute SQL, get all the data, and return True if an execution result exists. If an exception occurs, return False."
11576,"from flask import render_template,jsonify
def api(conn, book_id):
	bkout = conn.execute(""SELECT name FROM reviews WHERE book_id = :book_id"", {""book_id"": book_id}).fetchone()
	if bkout is None:
		return render_template(""error.html"")
	return jsonify(bkout)","通过$conn$执行SQL语句：根据$book_id$获取reviews中的第一条name。如果查询结果为空，渲染并返回""error.html""；否则使用jsonify返回查询结果。","Execute the SQL statement through $conn$: Get the first name in the reviews table based on $book_id$. If the query result is empty, render and return ""error.html""; otherwise, use jsonify to return the query result."
13264,"from flask import render_template
def book(conn, id):
	book_sql = ""SELECT * FROM BOOKS WHERE id = :id""
	books_by_id = conn.execute(book_sql,{""id"":id}).fetchall()
	if books_by_id is None:
		return render_template(""error"")
	else:
		return render_template(""book_detail.html"", book=books_by_id)","设置SQL语句（通过$id$查询BOOKS中的所有列）。使用$conn$执行SQL语句并获取所有数据。如果查询结果为空，渲染并返回“error”。否则渲染并返回""book_detail.html""，其中参数book为查询结果。","Set the SQL statement (query all columns in BOOKS where id is $id$) . Execute the SQL statement with $conn$ and get all the data. If the query result is empty, render and return ""error"". Otherwise render and return ""book_detail.html"", where the parameter book is the result of the query."
11110,"from sqlalchemy import create_engine
def checkGED(db_engine_name,id):
	engine = create_engine(db_engine_name)
	with engine.connect() as conn:
		try:
			texts = conn.execute(""SELECT year_id FROM month WHERE id=:id"",{""id"":id}).fetchall()
			print(texts)
			go = True
		except:
			go = False
	return go",通过$db_engine_name$获取数据库引擎。通过with语句根据获取的数据库引擎连接数据库。尝试性使用连接执行SQL语句（查询month表中id为$id$的全部year_id），打印所有数据，并设置查询状态为True。如果SQL执行出现异常则设置查询状态为False，最后返回查询状态。,"Get the database engine where the name of db_engine is $db_engine_name$. Connect to the database via the with statement based on the acquired database engine. Try to use the connection to execute an SQL statement (query all year_id with an id of $id$ in the month table) , print all the data, and set the query state to True. If an exception occurs during SQL execution, the query state is set to False, and finally the query state is returned."
13310,"from sqlalchemy import create_engine
from sqlalchemy.orm.session import sessionmaker
def select_story(path,Story,story_id):
	engine = create_engine(path)
	Session = sessionmaker(bind=engine)
	session = Session()
	story = session.query(Story).filter(Story.id == story_id).first()
	return story",使用ORM的方式，通过$path$获取数据库引擎，进一步获取Session对象。执行SQL语句（根据$story_id$查询$Story$表中所有列），获取第一条数据，并将查询结果返回。,"Use ORM method to get the database engine through $path$ and further get the Session object. Execute the SQL statement (query all the columns in the $Story$ table according to $story_id$), get the first piece of data, and return the query results."
11456,"from sqlalchemy.sql import select
def get_source(engine, studentTbl, student):
	conn = engine.connect()
	sql = select([studentTbl.c.isSuspended]).where(studentTbl.c.email == student)
	judges = conn.execute(sql).fetchall()
	conn.close
	return judges",通过$engine$建立连接。根据python表达式设置SQL：（根据email为$student$查询$studentTbl$表中isSuspended列）。执行SQL并获取所有数据，关闭连接，返回查询结果。,"Establish a connection via $engine$. Set up SQL based on the Python expression: (query $studentTbl$ table for isSuspended column based on 'email':  $student$). Execute the SQL and get all the data, close the connection and return the query result."
11057,"from sqlalchemy.sql import select
def get_recs(conn,table,taskid):
	sql = select(table.c.updatetime).where(table.c.taskid == taskid)
	recs_time = conn.execute(sql).fetchall()
	return [res[0] for res in recs_time]",使用python表达式设置SQL：根据$taskid$查询$table$表中的updatetime信息。使用$conn$执行SQL并获取所有数据。将查询结果每一项的第0条数据存入list中并返回。,Use the python expression to set up SQL: To query the updatetime information in the $table$ table based on $taskid$. Use $conn$ to execute SQL and get all the data. Store the 0th data of each item of the query result in list and return.
13306,"from sqlalchemy import create_engine
def read_db_data(CONN_STRING,lname):
	engine = create_engine(CONN_STRING)
	insurances = engine.execute(""SELECT data FROM ins00 WHERE lname=:lname"",{""lname"":lname}).fetchall()
	results = []
	for ins in insurances: 
		results.append(ins)
	return ''.join(results)",通过$CONN_STRING$获取数据库引擎并建立连接。执行SQL语句（根据$lname$查询ins00表中data列）并获取所有数据，使用for循环将查询结果的每一条插入到一个list中，并以无分割符的字符串形式返回结果。,"Get the database engine and establish a connection through $CONN_STRING$. Execute the SQL statement (query the data column in the ins00 table according to $lname$) and get all the data, use for loop to insert each item of the query result into a list, and return the result with an undelimited string fromat."
13595,"def updateOrderdetail(conn,orderid):
	query = 'select * from orderdetail where orderid=:orderid'
	res=conn.execute(query,{""orderid"":orderid}).fetchall()
	return res",设置SQL（根据$orderid$查询orderdetail表中所有列），根据$conn$执行SQL并获取所有查询结果，并将数据返回。,"Set up SQL (query all columns in the orderdetail table based on $orderid$), execute SQL based on $conn$, get all the query results, and return the data."
11027,"import csv
def reader_sel(conn):
	f = open(""flights.csv"")
	reader = csv.reader(f)
	for origin in reader:
		result = conn.execute(""SELECT duration FROM flights WHERE origin=:origin"",{""origin"":origin}).fetchall()
		print(result)
	f.close()","打开""flights.csv""文件。利用csv读取打开的文件。对于读取的每个origin信息，利用$conn$执行SQL语句（根据origin查询flights中duration的信息）并打印查询结果。最后关闭已打开的文件。","Open the ""flights.csv"" file. Use csv to read open files. For each origin information read, use $conn$ to execute the SQL statement (query the information of the duration in the flights based on the origin) and print the query results. Finally, close the open file."
11008,"def selsect_password(conn, username, password, check_password_hash):
	reclist = conn.execute(""SELECT password FROM users WHERE username=:username"",{""username"":username})
	for i in reclist:
		if check_password_hash(i['password'], password):
			return True
		else:
			return False",使用$conn$执行SQL：根据$username$查询users表中的password。对查询结果进行循环，利用$check_password_hash$函数检验循环中每一项元素的password属性和$password$的是否匹配。匹配则返回True，否则返回False。,"Use $conn$ to execute SQL: Query the password in the users table based on $username$. Loop through the query results and use the $check_password_hash$ function to verify that the password attribute of each element in the loop matches the $password$. If matches, return True, otherwise return False."
13494,"from sqlalchemy.sql import select
def get_source(conn, words, pkid):
	sql = select([words.c.word]).where(words.c.id == pkid)
	words = conn.execute(sql).fetchall()
	return words",使用python表达式的方式执行SQL（根据id为$pkid$获取$words$表中的word列）并利用$conn$执行SQL获取所有数据，最后返回查询结果,Use the Python expression to execute SQL (get the word column in the $words$ table with id as $pkid$) and use $conn$ to execute SQL to get all the data. Finally return the query results.
14123,"def getCount(conn,type):
	res = conn.execute(""SELECT name FROM sqlite_master WHERE type=:type"",{""type"":type}).fetchone()
	for x in res:
		print(x)
	return res[0]",通过$conn$执行SQL语句：根据$type$查询sqlite_master表中的第一条name数据。for循环遍历所有查询结果并将其打印。返回查询结果的第0个元素。,Execute the SQL statement via $conn$: Query the first name data in the sqlite_master table based on $type$. For loop iterates through all query results and prints. Return the 0th element of the query result.
13036,"def ResetTable(conn):
	drop_val = conn.execute(""SELECT * FROM drop_table"").fetchall()
	for i in drop_val:
		print(i)",使用$conn$执行SQL（查询drop_table表中的所有列）。使用for循环打印查询结果中的每一项数据。,Use $conn$ to execute SQL (query all columns in the drop_table table). Use for loop to print each item of data in the query results.
13966,"from sqlalchemy.sql import select
def get_source(conn, city_name, city_table):
	sql = select([city_table]).where(city_table.c.city_name == city_name)
	cities = conn.execute(sql).fetchall()
	if cities:
		return cities
	return 0",使用Python表达式的方式设置SQL语句，内容为：查询$city_table$表中city_name为$city_name$的所有信息，使用$conn$执行SQL获取所有信息，如果执行结果存在，则返回执行结果；否则，返回0.,"Use the Python expression to set the SQL statement: Query all the information in the $city_table$ table where city_name is $city_name$ and use $conn$ to execute SQL to get all the information. If the execution result exists, return the execution result, otherwise, return 0."
14285,"def main(con,flight_id):
	flight = con.execute(""SELECT origin, destination FROM flights WHERE flight_id = :flight_id"", {""flight_id"": flight_id}).fetchone()
	if flight is None:
		return False
	for f in flight:
		print(f)",使用$con$连接执行SQL语句（根据$flight_id$获取flights表中的第一条origin和destination）。如果执行结果为空，返回False。for循环遍历执行结果并打印。,Use the $con$ connection to execute the SQL statement (get the first origin and destination in the flights table based on $flight_id$). Return False if the execution result is empty. Use for loop traversal to execute the result and print it.
14168,"from sqlalchemy import create_engine
def get_id(connection,name):
	engine = create_engine(connection)
	res=engine.execute(""SELECT id FROM pg_tables WHERE name =:name"",{""name"":name}).fetchall()
	ret = []
	for row in res:
		ret.append(row)
	return ret",通过$connection$创建数据库引擎。执行SQL（根据$name$查询pg_tables表中所有的id数据）。使用for循环将查询结果中的每一项元素都存储到list中并将list内容返回。,Create the database engine via $connection$. Execute SQL (query all the id data in the pg_tables table based on $name$). Use for loop to store each element in the query results into 'list' and return the list content.
11143,"from sqlalchemy.sql import select
def query_old_recs(conn,ico,id):
	s = select(ico.c.address).where(ico.c.id == id)
	recsinf = conn.execute(s).fetchall()
	return recsinf",使用Python表达式的方式设置SQL语句，其内容是：使用$id$查询$ico$表中的address列。使用$conn$连接执行SQL语句获取所有数据，返回所有的查询结果。,"Set up the SQL statement using a Python expression, which use $id$ to query the address column in the $ico$. Execute an SQL statement with a $conn$ connection to get all the data and return all the query results."
11632,"from sqlalchemy import create_engine
def get_tabel(connection_string,tid):
	engine = create_engine(connection_string)
	try:
		query = ""select * from table where table_id =:tid""
		ret_data = engine.execute(query,{""tid"":tid}).fetchall()
		return ret_data
	except Exception as ex:
		print(ex)",使用$connection_string$获取数据库引擎，尝试执行SQL（根据table_id为$tid$获取table表中的所有列）并获取所有数据，返回查询结果，如果执行时出现异常，则打印异常,"Use $connection_string$ to get the database engine, try to execute SQL (get all the columns in the 'table' table where table_id is $tid$) and get all the data, return the query results, and print the exception if there is an exception during execution."
13824,"def post_comment(conn, book_id):
	query = ""SELECT * FROM book_reviews WHERE book_id =: book_id""
	res = conn.execute(query, {""book_id"": book_id}).fetchall()
	return [dict(row) for row in res]","设置SQL语句，内容为:通过$book_id$查询book_reviews表中的所有列,使用$conn$连接执行SQL语句获取全部数据，将查询结果每一项转化为dict存储为list并返回。","Set up the SQL statement with the following contents: Query all columns in the book_reviews table through $book_id$, use $conn$ connection to execute the SQL statement to get all the data. Convert each item of the query results into dict and store it as list and return it."
11163,"def get_table_names(conn,type_t,DBAPIError):
	if type_t is not None:
		try:
			names =conn.execute(""SELECT name FROM sqlite_master WHERE type_t=:type_t"",{""type_t"":type_t}).fetchall()
			return names
		except DBAPIError:
			return None",如果$type_t$不为空，则尝试性使用$conn$查询sqlite_master表中type_t为$type_t$的所有name；当出现$DBAPIError$异常时返回None。,"If $type_t$ is not empty, try to use $conn$ to query all names in the sqlite_master where type_t is $type_t$. Return None when a $DBAPIError$ exception occurs."
14079,"def test_sqlite3(conn):
	c = conn.cursor()
	res = c.execute(""select * from customer"").fetchall()
	print(res)",使用$conn$创建游标对象，并通过游标对象执行SQL语句（从customer表中查询所有列）并获取全部数据，打印查询结果。,"Use $conn$ to create a cursor object and execute a SQL statement through the cursor object (query all columns from the customer table), get all the data, and print the query results."
11075,"def nameinsert(engine,name):
	conn = engine.connect()
	myfullname=conn.execute(""SELECT fullname FROM users WHERE name=:name"",{""name"":name}).fetchone()
	print(myfullname)",使用$engine$获取连接，并根据连接执行SQL（查询name列为$name$时users表中的fullname信息）并获取第一条数据。最后打印查询结果。,"Use $engine$ to get the connection, and execute SQL based on the connection (query the fullname information in the users table when name is listed as $name$) and get the first piece of data. Finally, print the query results"
13980,"from sqlalchemy import create_engine
def ExcluirProfessor(db_string, id):
	db = create_engine(db_string)
	try:
		sql = ""SELECT * FROM tb_professor WHERE id =: id""
		results = db.execute(sql,{""id"":id}).fetchall()
		if results:
			res = True
		else:
			res = False
	except Exception as e:
		print(e)
		res = False
	return res",通过$db_string$获取数据库引擎。尝试设置SQL语句：根据$id$获取tb_professor中的所有列，执行SQL获取所有数据。如果执行结果存在，将True赋值给res；否则，将False赋值给res。若出现Exception，则打印异常信息，将False赋值给res。最后返回res。,"Get the database engine by $db_string$. Try to set SQL statement: Get all columns in tb_professor according to $id$, execute SQL to get all the data. If the execution result exists, assign True to res; otherwise, assign False to res. If an Exception occurs, print the exception message and assign False to res. Finally, return res."
11625,"from sqlalchemy import create_engine
def main(dburi,gid):
	engine = create_engine(dburi, convert_unicode=False, echo=False)
	sql = ""select greylist_stamp from greylist where greylist_id=:gid""
	gstamps = engine.execute(sql,{""gid"":gid}).fetchall()
	return gstamps","通过$dburi$获取数据库引擎，其中convert_unicode参数为False,echo参数为False，执行SQL（获取greylist表中greylist_id为$gid$的greylist_stamp列）并获取所有数据，最后返回查询结果","Get the database engine through $dburi$, where convert_unicode parameter is False and echo parameter is False, execute SQL (get the greylist_stamp column in the greylist table where greylist_id is $gid$), get all the data, and finally return the query result."
13965,"from sqlalchemy import create_engine
import logging
def select_data(root_user, value):
	engine = create_engine(root_user)
	conn = engine.connect()
	data_sql = ""SELECT * FROM database WHERE value =: value""
	try:
		results = conn.execute(data_sql,{""value"":value}).fetchall()
		conn.close()
		return results
	except Exception as e:
		logging.warn(e)",利用$root_user$获取数据库引擎并进行连接。设置SQL语句：根据$value$获取database表中的所有列。尝试执行SQL语句获取所有数据，确保数据库连接关闭，返回执行结果。如果出现Exception，则使用logging.warn()返回异常信息。,"Use $root_user$ to get the database engine and connect. Set the SQL statement: get all the columns in the database table based on $value$. Try to execute the SQL statement to get all the data, make sure the database connection is closed, and return the execution result. If an Exception occurs, use logging.warn() to return exception information."
13994,"def get_well_by_wellbore_id(conn, id):
	sql = ""SELECT well_id FROM WITS_WELLBORE WHERE id =: id""
	res = conn.execute(sql,{""id"":id}).fetchall()
	return res",设置SQL语句为：通过$id$查询WITS_WELLBORE表中的well_id，使用$conn$执行SQL获取所有数据，返回获取到的所有数据。,"Set the SQL statement: Query the well_id, in the WITS_WELLBORE table through $id$ and use $conn$ to execute SQL to get all the data and return all the data obtained."
13401,"def test_cursor(cursor, id):
	ret = []
	s = ""SELECT name FROM tbl WHERE id =: id""
	assert not cursor.closed
	cursor.execute(s, {""id"":id})
	async with cursor:
		for i in cursor:
			ret.append(i)
		return ret",设置SQL（根据$id$获取tbl表中的name列），设置断言判断$cursor$没有关闭.通过$cursor$执行SQL语句，在异步with语句处理$cursor$情况下，使用for循环将$cursor$中每一项数据转化为list并返回。,"Set the SQL (get the name column in the tbl table based on $id$), set the assertion to determine that $cursor$ is not closed. Execute the SQL statement through $cursor$. Use for loop to convert each item of data in $cursor$ into list and return it in the case of an asynchronous with statement processing $cursor$."
14163,"from sqlalchemy import create_engine
def query_db(sql_str,url):
	engine = create_engine(sql_str)
	res = engine.execute(""select alembic from migrations where url=:url"",{""url"":url}).fetchall()
	return res",利用$sql_str$创建数据库引擎。执行SQL语句（根据$url$获取migrations表中的alembic）获取所有数据，并将获取的数据返回。,Create a database engine via $sql_str$. Execute the SQL statement (get the alembic in the migrations table according to $url$) to get all the data and return the obtained data.
11662,"def main(conn,dest,dur):
	sql = ""select origin from flights where destination=:dest and duration=:dur""
	res = conn.execute(sql,{""dest"":dest,""dur"":dur}).fetchall()
	print(res)",使用$conn$执行SQL（获取flights表中的destination为$dest$和duration为$dur$的origin列）并获取所有数据，最后打印查询结果,"Use $conn$ to execute SQL (get the origin table in flights table where is destination $dest$ and duration is $dur$), get all the data, and finally print the query result."
13800,"def sample_insert(conn,first,last):
	query = ""SELECT info FROM USERS WHERE first = :first and last = :last""
	red = conn.execute(query, {""first"": first, ""last"": last}).fetchall()
	print(red)
	return red","设置sql（根据$first$和$last$查询USERS表中info列）,使用$conn$执行SQL并获取所有查询结果，打印查询到的信息并返回。","Set sql (query the info column in the USERS table based on $first$ and $last$), use $conn$ to execute SQL, get all the query results, print the queried information and return."
13325,"def orderdetail(db_engine, orderid, prodid):
	try:
		db_conn=db_engine.connect()
		check = db_conn.execute(""SELECT quantity FROM orderdetail WHERE orderid=%s AND prod_id=%s"", (str(orderid), str(prodid)))
		lista = list(check)
		quant = len(lista)
		print(quant)
		if quant == 0:
			return None
		else:
			price = db_conn.execute(""SELECT price FROM products WHERE prod_id=%s"", (str(prodid)))
			return price
	except:
		if db_conn is not None:
			db_conn.close()",尝试通过$db_engine$连接数据库，使用字符串匹配执行SQL（根据字符串化的$orderid$与对应于prodid字段的字符串化的$prodid$查询orderdetail表中quantity列），将查询结果转化为list，获取其长度并打印，如果长度为0，返回None，否则，使用字符串匹配执行SQL（根据对应于prod_id字段的字符串化的$prodid$查询products表中price列），返回查询结果。如果执行时出现异常，如果连接不为空，则关闭数据库连接。,"Try to connect the database through $db_engine$, use string matching to execute SQL (query the quantity column in the orderdetail table based on the serialized $orderid$ and the serialized $prodid$ corresponding to the prodid field), convert the query result to list, get its length and print. If the length is 0, return None; otherwise, use string matching to execute SQL (query the price column in the products table based on the serialized $prodid$ corresponding to the prod_id field) and return the query result. If an exception occurs during execution, and the connection is not empty, close the database connection."
11031,"from sqlalchemy.sql import select
from sqlalchemy import create_engine
def connect_to_cloudsql_sqlalchemy_bak(connection_string,string,too_old): 
	engine = create_engine(connection_string)
	sql_q = select(string.c.id).where(string.c.col == too_old)
	res = engine.execute(sql_q).fetchall()
	return res",使用$connection_string$创建数据库引擎。利用python表达式设置SQL（当col为$too_old$的时候，查询$string$表中的所有id），执行SQL并获取所有数据。最后返回查询数据。,"Use $connection_string$ to create a database engine. Set SQL with the python expression (when col is $too_old$, query all the id in the $string$ table), execute SQL and get all the data. Finally, return the query data."
13395,"def test_active_secret_not_deleted(conn,secret_uuid):
	results=conn.execute(""SELECT * FROM secrets WHERE secret_uuid=:secret_uuid"",{""secret_uuid"":secret_uuid}).fetchall()
	secret_list = []
	for row in results:
		secret_list.append(str(row[0]))",使用$conn$执行SQL（根据$secret_uuid$查询secrets表中所有列），并获取所有查询数据，用for循环遍历获取的所有查询结果，将每条数据的第0个元素转化为字符串，插入一个list中。,"Use $conn$ to execute SQL (query all columns in the secrets table based on $secret_uuid$) and get all the query data, use for loop to traverse all the obtained query results, convert the 0th element of each piece of data into a string and insert it into a list."
11292,"def testmixednesting(tlengine,user_name):
	external_connection = tlengine.connect()
	try:
		res=external_connection.execute(""select user_id from users where user_name=:user_name"", {""user_name"":user_name}).fetchall()
		return res
	finally:
		external_connection.close()",使用$tlengine$连接数据库，尝试执行SQL(根据$user_name$获取users的user_id列)并获取所有数据，然后返回查询结果，最终确保连接关闭,"Use $tlengine$ to connect to the database, try to execute SQL (get the user_id column of users based on $user_name$) and get all the data. Return the query result and finally ensure that the connection is closed."
14243,"from sqlalchemy import create_engine
def get_genre(SQLALCHEMY_DATABASE_URI, genrename):
	try:
		engine = create_engine(SQLALCHEMY_DATABASE_URI)
		result = engine.execute(""SELECT id FROM genre WHERE genrename:genrename"",{""genrename"":genrename}).fetchall()
		return result
	except:
		raise",尝试使用$SQLALCHEMY_DATABASE_URI$获取数据库引擎。然后查询genre表中genrename为$genrename$的所有id，返回查询结果。如果出现异常，则通过raise抛出异常信息。,"Try to use $SQLALCHEMY_DATABASE_URI$ to get the database engine. Query all the id in the genre table whose genrename is $genrename$ and return the query result. If an exception occurs, throw the exception information through 'raise'."
11505,"def subtype(conn, case):
	query = ""SELECT * FROM my_cards WHERE case = :case""
	item = conn.execute(query, {""case"": case}).fetchall()
	assert item != []
	return item",设置SQL查询语句，其内容为查询my_cards表中case为$case$的所有列。使用$conn$执行SQL语句获取所有数据。设置断言判断返回结果不为空list，返回所有的查询结果。,Set the SQL query statement that queries all columns with case $case$ in the my_cards table. Use $conn$ execute the SQL statement to get all the data. Set the assertion to determine that the returned result is not an empty list and return all the query results.
13624,"import logging
from sqlalchemy import create_engine
def get_root_user(host, root_user):
	engine = create_engine(host)
	conn = engine.connect()
	try:
		user = conn.execute(""select * from database where root_user=:root_user"",{""root_user"":root_user}).fetchone()
		conn.close()
		return user
	except Exception:
		logging.warn(""Fail"")","使用$host$创建数据库引擎并获取连接。尝试性使用conn执行SQL（根据$root_user$查询database中的所有列）并获取第一条数据。关闭连接并返回数据。如果出现异常，则使用logging.warn记录""Fail""。","Create the database engine using $host$ and get the connection. Experiment with using conn to execute SQL (query all the columns in the database based on $root_user$) and get the first result. Close the connection and return data. If an exception occurs, logging.warn is used to record 'Fail'."
11514,"from sqlalchemy import create_engine
def query_info(SQLALCHEMY_SERVER_URI, mid):
	engine = create_engine(SQLALCHEMY_SERVER_URI, echo=True)
	ot = engine.execute(""SELECT name FROM model WHERE mid = :mid"", {""mid"": mid}).fetchone()
	return ot",通过$SQLALCHEMY_SERVER_URI$获取数据库引擎，其中echo参数为True。执行SQL语句（通过$mid$获取model表中的第一条name数据），返回查询结果。,"Get database engine through $SQLALCHEMY_SERVER_URI$, where echo parameter is True. Execute SQL statement (get the first piece of name data in model table through $mid$) and return query result."
11481,"def get_survey(engine, survey):
	survey_sql = ""SELECT email FROM userdetails WHERE survey =: survey""
	emails = engine.execute(survey_sql,{""survey"":survey}).fetchall()
	return [dict(email) for email in emails]","设置SQL（根据$survey$查询userdetails表中email列），根据$engine$执行SQL并获取所有查询结果，使用for循环将查询结果的每一条转化为dict,以list存储并返回。","Set up SQL (query the email column in the userdetails table based on $survey$), execute SQL based on $engine$ and get all the query result. Use for loop to convert each query result to dict, and store it in list and return."
13070,"from flask import request,render_template
def login(conn,username):
	if request.method=='POST':
		user_data = conn.execute(""SELECT password FROM users WHERE username=:username"", {'username': username}).fetchone()
		if user_data is None:
			return render_template('login.html')
		else:
			return user_data",如果request请求方法为POST，则使用$conn$执行SQL（根据$username$查询users表中的password）并获取第一条数据。如果查询结果不为None，则返回渲染后的'login.html'，否则返回查询后的结果。,"If the request request method is POST, use $conn$ to execute SQL (query the password in the users table based on $username$) and get the first piece of data. If the query result is not None, return the rendered 'login.html'. Otherwise, return the query results."
11052,"from sqlalchemy.exc import SQLAlchemyError
def import_user(conn,username):
	try:
		row=conn.execute(""SELECT id FROM user_dataset WHERE name=:name"",{""name"":username}).fetchone()
		return row['id']
	except SQLAlchemyError:
		print('Failed')",尝试性使用$conn$执行SQL（查询当$name$为$username$时user_dataset中的id）并获取第一条数据。返回查询结果中关键字为id所对应的值。如果出现SQLAlchemyError异常，则打印'Failed'。,"Try to use $conn$ to execute SQL (query the id in user_dataset when $name$ is $username$) and get the first piece of data. When the keyword is id, return the corresponding value in the query result. If an SQLAlchemyError exception occurs, print 'Failed'."
13163,"def main(conn,origin,destination,duration):
	res=conn.execute(""select * from flights where origin=:origin, destination=:destination, duration=:duration"",{""origin"": origin, ""destination"": destination, ""duration"": duration}).fetchall()
	return res",使用$conn$执行SQL（根据$origin$、$destination$和$duration$获取flights表中的所有列）并获取所有数据，最后返回查询结果,"Execute the SQL (get all the columns in the flights where origin is $origin$, destination is $destination$, and duration is $duration$) with $conn$, get all the data, and return the query results."
13516,"import logging
def getReportList(conn,quarter_list):
	logger = logging.getLogger()
	try:
		sql = ""select * from ts_basic_report where quarter_list =:quarter_list""
		print(sql)
		hava_df = conn.execute(sql,{""quarter_list"":quarter_list}).fetchall()
		hava_df_list = list(hava_df)
		length = len(hava_df_list)
		if length<1:
			logger.info(str(""no data""))
		else:
			logger.info(str(length))
	except Exception as e:
		logger.error(""fail"")","初始化日志模块，尝试设置SQL（根据$quarter_list$查询ts_basic_report表中全部信息），打印sql语句，使用$conn$执行sql并获取所有数据，将查询结果转化为list，若list长度小于1，输出info日志，并将参数赋值为""no data""，否则输出info日志，参数为list长度。如果执行时出现Exception异常，则返回error日志，参数为""fail""。","Initialize the log module, try to set SQL (query all the information in the ts_basic_report table according to $quarter_list$), print the sql statement, use $conn$ to execute sql and get all the data, convert the query results to list. If the list length is less than 1, output the info log, and assign the parameter to ""no data""; otherwise, output the info log, and the parameter is the list length. If an Exception occurs during execution, return the error log and the parameter is ""fail""."
13498,"def getEvent(conn, id):
	login_sql = ""SELECT login FROM USER WHERE id =: id""
	logins = conn.execute(login_sql,{""id"":id}).fetchall()
	return [login for login in logins]",利用$conn$执行SQL（根据$id$获取USER表中的login列）并获取所有数据。然后使用for循环对查询结果的每一项存储为list并返回list内容,Use $conn$ to execute the SQL (get the login column in the USER table based on $id$) and get all the data. Then use for loop to store each item of the query results as list and return the contents of the list.
11360,"def test_morerollback_off_conn(conn,tlengine):
	try:
		trans = conn.execute('SELECT * FROM query_users WHERE tlengine =:tlengine', {""tlengine"": tlengine}).fetchone()
		return trans
	finally:
		conn.close()",尝试使用$conn$执行SQL（根据$tlengine$查询query_users表中全部信息），获取第一条数据，并返回查询结果，最后关闭连接。,"Try to use $conn$ to execute SQL (query all the information in the query_users table based on $tlengine$), get the first piece of data, return the query results, and finally close the connection."
11528,"def get_data(conn, code):
	result = conn.execute(""SELECT COUNT(*) FROM stockdata WHERE code = :code"", {""code"": code}).fetchall()
	print(result)",使用$conn$连接执行SQL语句，其内容为：根据$code$查询stockdata中的所有列的数目，并获取所有的数据，返回查询结果。,Use the $conn$ connection to execute the SQL statement with the following content: Query the number of all columns in stockdata based on $code$ and get all the data and return the query results.
11170,"def test_update_attributes_name(conn,get_user):
	s =""SELECT test_user FROM mock_client WHERE get_user=""+get_user
	myexpected=conn.execute(s)
	return myexpected",设置SQL语句为根据$get_user$获取mock_client中的所有test_user，使用$conn$连接执行SQL并返回查询结果。,"Set the SQL statement to get all test_user in the mock_client based on $get_user$, execute the SQL using the $conn$ connection, and return the query results."
13606,"from flask import request,redirect,url_for
from sqlalchemy import create_engine
def editCourse(db_file,courseID):
	if request.method != 'POST':
		return redirect(url_for('code'))
	engine = create_engine(db_file)
	connection = engine.connect()
	res = connection.execute(""SELECT description from Course WHERE courseID = :courseID"",{""courseID"":courseID}).fetchall()
	connection.close()
	return res",如果request请求方法为POST，则使用redirect和url_for转到'code'页面。否则使用$db_file$创建数据库引擎并获取链接。执行SQL（根据$courseID$查询Course表中的description信息）并获取所有数据。关闭连接并返回查询结果。,"If the request method of request is POST, use redirect and url_for to go to the 'code' page. Otherwise, use $db_file$ to create the database engine and get the connection. Execute the SQL (query the description in the Course table where courseID is $courseID$) and get all the data. Close the connection and return the query results."
11585,"from sqlalchemy import create_engine
def get_tech_info_by_chat_id(call_center, chat_id):
	engine = create_engine(call_center)
	conn = engine.connect()
	result = conn.execute(""SELECT * FROM technician WHERE chat_id = :chat_id"", {""chat_id"": chat_id}).fetchall()
	res = []
	for row in result:
		res.append(row[0])
	return res",通过$call_center$获取数据库引擎并建立连接。执行SQL语句（根据$chat_id$查询technician表中的所有列）并获取所有数据，使用for循环将查询结果中每一项的第0个元素存储到list中，并返回list的内容。,"Get the database engine and establish a connection through $call_center$. Execute the SQL statement (query all the columns in the technician table based on $chat_id$), get all the data, use for loop to store the 0th element of each item of the query result into list, and return the list content."
13871,"from flask import request
def login(conn, login):
	if request.method == 'POST':
		try:
			query = ""SELECT * FROM users WHERE login = :login""
			entries = conn.execute(query, {""login"": login}).fetchall()
			return [dict(row) for row in entries]
		except:
			raise",如果request模块发送请求的方式为post，则尝试性设置SQL（通过$login$查询users中的所有列），使用$conn$连接执行SQL并获取所有数据，将查询结果每一项转化为dict存储为list并返回。否则，使用raise抛出异常。,"If the request module sends the request as post, try to set up the SQL (query all columns in users through $login$), use the $conn$ connection to execute the SQL and get all the data. Convert each item of the query results into dict to store as list and return it. Otherwise, use raise to throw the exception."
11332,"from sqlalchemy import create_engine
def get_form_details(url, project_id, form_id):
	engine = create_engine(url)
	sql = ""SELECT form FROM odkform WHERE project_id=:project_id and form_id=:form_id""
	result = engine.execute(sql,{""project_id"":project_id,""form_id"":form_id}).fetchone()
	engine.dispose()
	return result",通过$url$获取数据库引擎并建立连接。执行SQL语句（根据$project_id$和$form_id$查询odkform表中form列），获取第一条结果，关闭所有连接，将查询结果返回。,"Get the database engine and establish a connection through $url$. Execute the SQL statement (query the form column in the odkform table according to $project_id$ and $form_id$), get the first result, close all connections, and return the query results."
11242,"from flask import render_template
def Registration(conn,subtitle):
	users = conn.execute(""SELECT * FROM user_rev1 where subtitle=:subtitle"",{""subtitle"":subtitle}).fetchall()
	print(users)
	return render_template(""users.html"", users=users)","使用$conn$执行SQL（根据$subtitle$获取user_rev1中的所有列）并获取所有数据，打印查询结果，最后返回渲染后的""users.html""，其中users参数为查询结果","Use $conn$ to execute SQL (get all the columns in the user_rev1 based on $subtitle$), get all the data, print the query result, and finally return the rendered ""users.html"", where the users parameter is the query result."
11410,"from flask import render_template
def getFlowers(engine, name):
	connection = engine.connect()
	sql = ""SELECT * FROM FLOWERS WHERE name=:name""
	flowers = connection.execute(sql,{""name"":name})
	connection.close()
	return render_template('home.html', flowers=flowers)","通过$engine$建立连接。设置SQL语句（根据$name$查询FLOWERS表中所有列），使用connection执行sql，关闭连接，返回渲染后的""home.html""页面，其中flowers参数设置为查询结果。","Establish a connection via $engine$. Set the SQL statement (query all the columns in the FLOWERS table based on $name$), use connection to execute SQL, close the connection, and return the rendered ""home.html"" page, where the flowers parameter is set to the query result."
14068,"import csv
def main(conn):
	b = open(""books.csv"")
	reader = csv.reader(b)
	for pubyear in reader:
		res = conn.execute(""select author from books where pubyear =:pubyear"", {""pubyear"":pubyear}).fetchall()
		print(res)",打开books.csv文件并读取，for循环遍历文件的读取内容，使用$conn$执行SQL（通过pubyear查询books表中的所有author）并打印结果。,"Open the books.csv file and read, use for loop traversal to read the content of the file, use $conn$ to execute SQL (query all 'author' in the books table through pubyear) and print the results."
11203,"from sqlalchemy import create_engine
def create_user(database_uri, password):
	engine = create_engine(database_uri)
	conn = engine.connect()
	try:
		res=conn.execute(""select user from USER where PASSWORD=:password"",{""password"":password}).fetchall()
		return res
	except Exception:
		print('Error assigning permissions')",通过$database_uri$获取数据库引擎并建立连接，尝试执行SQL语句（根据PASSWORD为$password$获取USER中的user），获取执行后所有数据并返回。如果执行时出现Exception异常，则打印错误信息“Error assigning permissions”,"Get database engine by $database_uri$ and establish connection, try to execute SQL statement (get user in USER according to 'PASSWORD': $password$), get all data after execution and return. If an Exception occurs during execution, return the error message ""Error assigning permissions""."
11510,"from sqlalchemy import create_engine
def countries(greencouriers, id):
	engine = create_engine(greencouriers, echo=True,encoding='utf-8')
	conn = engine.connect()
	try:
		out = conn.execute(""SELECT name FROM countries WHERE id = :id"", {""id"": id}).fetchone()
		conn.close()
		return out
	except UnicodeDecodeError:
		raise Exception()","运用$greencouriers$获取数据库引擎并建立连接（其中echo参数为True,encoding参数为'utf-8'）。尝试性执行SQL语句（根据$id$查询countries表中的第一条name数据）。关闭数据库连接并返回查询结果。如果出现UnicodeDecodeError异常，则使用raise抛出Exception()异常。","Get the database engine using $greencouriers$ and establish the connection (where echo parameter is True, encoding parameter is 'utf-8'). Try to execute the SQL statement (query the first piece of name data in the countries table based on $id$). Close the database connection and return the query result. If UnicodeDecodeError exception occurs, use raise to throw an Exception() exception."
11697,"def get_Target(session,uuids):
	sql = ""select * from target where id=:uuids""
	targets = session.execute(sql,{""uuids"":uuids}).fetchall()
	session.close()
	return targets",利用$session$执行SQL（根据id为$uuids$获取target表中的所有列）并获取所有数据，然后关闭$session$连接，最后返回查询结果,"Execute SQL with $session$ (get all the columns in the target table where id is $uuids$), get all the data, then close the $session$ connection, and finally return the query result."
14195,"def getDataframe(conn):
	sql = 'select category from iris'
	result = conn.execute(sql).fetchall()
	return result",设置SQL语句：从iris表中查询category数据，通过$conn$执行SQL获取所有数据，返回执行结果。,"Set SQL statement: Query category data from iris table, execute SQL by $conn$ to get all data and return the execution result."
13417,"def get_pk_sequence(pgconn):
	sql = ""SELECT max(id) FROM table""
	rs = pgconn.execute(sql).fetchone()
	return rs[0]",通过$pgconn$执行SQL（获取table表中id列的最大值）并获取第一条数据，最后返回查询结果的第0个元素,Execute SQL through $pgconn$ (get the maximum value of id column in the 'table' table) and get the first piece of data. Finally return the 0th element of the query result.
13759,"from flask import render_template, request
def login(conn,username,password):
	if request.method == ""POST"":
		rows = conn.execute(""SELECT * FROM logins WHERE username = :username and password = :password"", {""username"":username,""password"":password}).fetchall()
		return rows
	else:
		return render_template(""login.html"")","如果请求方式为""POST""，利用$conn$执行SQL（根据$username$和$password$查询logins表中所有列），并获取所有数据，将查询结果返回。否则返回渲染后的""login.html""页面。","If the request method is ""POST"", use $conn$ to execute SQL (query all columns in the logins table based on $username$ and $password$), get all the data, and return the query results; otherwise, return the rendered ""login.html"" page."
11336,"def setup_class(conn,user_id,user_name,extra_data):
	all=""select * FROM Table where user_id=:user_id and user_name=:user_name and extra_data=:extra_data""
	metadata = conn.execute(all, {""user_id"": user_id,""user_name"":user_name,""extra_data"":extra_data}).fetchone()
	return metadata","设置sql（根据$user_id$,$user_name$和$extra_data$查询Table表中全部信息），使用$conn$执行SQL并获取第一行数据，并将数据返回。","Set up sql (query all the information in the 'Table' table based on $user_id$, $user_name$ and $extra_data$), use $conn$ to execute SQL, get the first row of data, and return the data."
13149,"def get_user_list(conn, UID, LID):
	sql = ""select * from USER_LIST where UID=:UID and LID=:LID""
	res=conn.execute(sql,{""UID"":UID,""LID"":LID}).fetchall()
	conn.close()
	return res",使用$conn$执行SQL（根据$UID$和$LID$获取USER_LIST表中的所有列）并获取所有数据，然后关闭$conn$连接，最后返回查询结果,"Execute SQL (get all the columns in USER_LIST where UID is $UID$ and LID is $LID$) with $conn$, get all the data, then close the $Conn$ connection and return the query results."
11121,"from sqlalchemy.sql import select
def get_recs(conn,table,name):
	s = select(table.c.id).where(table.c.name == name)
	recss = conn.execute(s).fetchall()
	return [item[0] for item in recss]",使用Python表达式的方式设置SQL语句为根据$name$获取$table$中的id列，使用$conn$连接执行SQL并获取所有数据。将查询结果每一项的第0个元素存储为list并返回。,"Use a Python expression to set the SQL statement to get the id column in $table$ where the name is $name$, execute the SQL using the $conn$ connection, and get all the data. Store the 0th element of each item of the query result as a list and return it."
14268,"def main(conn, f_id):
	flight = conn.execute(""SELECT origin,destination,duration FROM fligts WHERE id = :id"",{""id"":f_id}).fetchone()
	if flight is None:
		print(""fail"")
		return
	return flight","使用$conn$查询fligts表中id为$f_id$的第一条origin,destination,duration。如果查询结果为空，打印""fail""并直接返回；否则返回查询结果。","Use $conn$ to query the first origin,destination,duration in the fligts table where the id is $f_id$. If the query result is empty, print ""fail"" and return directly; otherwise, return the query result."
13012,"def query_grow(engine):
	connection = engine.connect()
	result = connection.execute(""SELECT * FROM growth"").fetchall()
	connection.close()
	return result",使用$engine$获取连接。使用连接执行SQL（查询growth中的所有列）并获取所有数据。关闭连接并返回查询结果。,Use $engine$ to get the connection. Use the connection to execute the SQL (query all columns in the growth) and get all the data. Close the connection and return the query results.
11128,"def validate_username(conn,username):
	user = conn.execute(""SELECT * FROM users_again2 WHERE username=:username"",{""username"":username}).fetchone()
	if user:
		return user",使用$conn$连接执行SQL语句：通过$username$查询users_again2中的所有列，并获取第一条数据。如果查询结果存在，则返回查询结果。,"Execute the SQL statement using the $conn$ connection: query all columns in users_again2 where the name of user is $username$ and get the first data. If the query result exists, the query result is returned."
11229,"def getDBUsers(conn, dbnr):
	try:
		rows = conn.execute(""SELECT * FROM dbkoppelusers WHERE dbnr =:dbnr"", {""dbnr"":dbnr}).fetchall()
		return rows
	except Exception as error:
		print(error)",尝试通过$conn$执行SQL（根据$dbnr$获取dbkoppelusers中的所有列）并获取所有数据，返回查询结果，如果出现异常，则打印异常,"Try to execute SQL via $conn$ (get all the columns in the dbkoppelusers based on $dbnr$) and get all the data, return the query result, and print the exception if there is an exception."
11474,"from sqlalchemy.sql import select
def get_source(conn, slivers, deleted):
	sql = select([slivers]).where(slivers.c.deleted == deleted)
	results = conn.execute(sql).fetchall()
	slivers = []
	for i in results:
		slivers.append(i)
	return slivers",根据python表达式设置SQL：（根据$deleted$查询$slivers$表中所有列）。通过$conn$执行SQL并获取所有数据，使用for循环遍历每一项查询结果，并存储为list，最后返回这个list。,"Set SQL based on the Python expression: (query all columns in $slivers$ table based on $deleted$). Execute the SQL with $conn$ and get all the data, use for loop to iterate through each query result and store as a list, and finally return the list."
14253,"def teardown(conn,t_id):
	result = conn.execute(""select name from falcon_portal_test where t_id =: t_id"",{""t_id"":t_id}).fetchall()
	return result",使用$conn$连接执行SQL（通过$t_id$查询falcon_portal_test表中的所有name数据）。将查询结果返回。,Use the $conn$ connection to execute SQL (query all the name data in the falcon_portal_test table through $t_id$). Returns the query results.
14071,"def getIdCommandOnHost(session, CommandsOnHost, id):
	query = session.query(CommandsOnHost).filter(CommandsOnHost.id == id).fetchall()
	if len(query) > 0:
		ret = []
		for q in query:
			ret.append(q)
	else:
		ret=-1
	session.close()
	return ret",通过$session$使用ORM方式设置SQL语句：通过$id$查询$CommandsOnHost$表中的所有数据。如果查询结果的长度大于0，使用for循环将查询结果中的每一项元素都存储到list中；否则将-1赋值给查询结果。确保$session$关闭，并将list内容返回。,"Use ORM method to set the SQL statement through $session$: Query all data in the $CommandsOnHost$ table through $id$. If the length of the query result is greater than 0, use for loop to store each element in the query result into list; otherwise, assign -1 to the query result. Make sure $session$ is closed and return the list content."
13511,"def import_data(conn,title):
	result = conn.execute(""select isbn from books where title=:title)"",{""title"": title}).fetchall()
	print(result)
	return result",利用$conn$执行SQL（根据$title$查询books表中isbn列），获取所有查询结果并打印，将查询结果返回。,"Execute SQL with $conn$ (query the isbn column in the books table according to $title$), get all the query results, print them, and return the query results."
13519,"def test_with_interface(db,user_name):
	connection = db.connect()
	try:
		res=connection.execute(""select * from users where user_name=:user_name"",{""user_name"":user_name}).fetchall()
	except Exception as e:
		print(e)
	connection.close()
	return res",利用$db$连接数据库，尝试执行SQL（根据$user_name$查询users表中所有列），并获取所有查询结果，将查询结果返回。如果捕获到Exception异常，打印这个异常，最后关闭连接。,"Connect the database with $db$, try to execute SQL (query all columns in the users table according to $user_name$), get all the query results, and return the query results. If an Exception is caught, print the exception and close the connection."
13018,"def getShareGroup(conn,shareGroup,group_id, user_id):
	share = conn.query(shareGroup).filter(shareGroup.FK_users == user_id).filter(shareGroup.FK_groups == group_id).first()
	if share is not None:
		return share",在ORM方式下，使用$conn$执行SQL（查询当FK_users等于$user_id$，FK_groups等于$group_id$时，$shareGroup$表中的所有内容）并获取第一条数据。如果查询结果不为None，则返回查询结果。,"In ORM mode, use $conn$ to execute SQL (query everything in the $shareGroup$ table when FK_users equals $user_id$ and FK_groups equals $group_id$) and get the first piece of data. If the query result is not None, return the query result."
13960,"from sqlalchemy.sql import select
def get_source(conn, tbl, num):
	sql = select([tbl]).where(tbl.c.num == num)
	rows = conn.execute(sql)
	assert len(rows) == 1
	return rows",设置SQL语句（根据$num$查询$tbl$中的所有数据），使用$conn$执行SQL获取所有数据，设置断言判断返回结果的长度为1，最后返回数据。,"Set the SQL statement (query all the data in $tbl$ according to $num$), use $conn$ to execute SQL to get all the data, set the assertion to determine that the length of the returned result is 1, and finally return the data."
11179,"def query_page(engine,id):
	with engine.begin() as conn:
		s_idata=conn.execute(""SELECT s_id FROM seasons WHERE id=:id"",{""id"":id}).fetchall()
		return [dict(row) for row in s_idata]",使用with语句通过$engine$连接数据库。执行SQL语句（查询seasons表中id为$id$的全部s_id），将查询结果每一项转化为dict存储为list并返回。,"Connect to the database with $engine$ using the with statement. Execute the SQL statement (query all s_id in the seasons table where id is $id$), and convert each query item into dict and store it as a list and return it."
13977,"from sqlalchemy.sql import select
def get_source(conn, id, summary_item):
	sql = select([summary_item]).where(summary_item.c.summary_id == id)
	res = conn.execute(sql).fetchall()
	return [dict(row) for row in res]",使用Python表达式的方式设置SQL语句：查询$summary_item$表中summary_id为$id$的所有数据，使用$conn$执行SQL获取所有数据，将查询结果每一项转化为dict存储为list并返回。,"Use the Python expression to set up the SQL statemen: Query all the data in the $summary_item$ table with 'summary_id': $id$, use $conn$ to execute SQL to get all the data, convert each item of the query result to dict, store it as list, and return."
14072,"def test1(conn):
	sql = 'select * from fname'
	res = conn.execute(sql).fetchall()
	return res",设置SQL：从fname表中查询所有列，使用$conn$执行SQL获取所有数据并返回。,"Set SQL: To query all columns from the fname table, and use $conn$ to execute SQL to get all the data and return."
11187,"from flask import jsonify
def acceleration_hour(conn,time_val):
	sql_query = ""SELECT grade FROM acceleration WHERE time_val={}"".format(time_val)
	time_data=conn.execute(sql_query).fetchall()
	return jsonify(time_data)","设置SQL语句（使用format()函数格式化输出字符串,通过字符串$time_val$查询acceleration表中的grade数据），通过$conn$连接执行SQL语句并获取所有数据。然后使用jsonify返回查询结果。","Set the SQL statement ( Format the output string with the format () function, query the grade data in the acceleration using the string $time_val$) , execute the SQL statement with the $conn$ join and  get all the data. Then use jsonify to return the query results."
11286,"from sqlalchemy import create_engine
from sqlalchemy.sql import select
def get_contract_by_id(DSN,Contracts,contract_id):
	async with create_engine(DSN) as engine_aiopg:
		async with engine_aiopg.acquire() as conn:
			query = select([Contracts]).where(Contracts.c.id == contract_id)
			result = conn.execute(query).fetchall()
			return result",通过with语句使用$DSN$获取数据库引擎，再使用with语句的获得方法连接数据库，根据python表达式的方式执行SQL，获取$Contracts$表中id为$contract_id$的所有列并获取所有数据，最后返回查询结果,"Use $DSN$ to get the database engine through the with statement, then use the with statement to connect to the database. Execute SQL based on the Python expression to get all the columns in the $Contracts$ table with 'id' of $contract_id$ and get all the data, and finally return the query result."
14152,"def get_url_count(conn):
	q = ""SELECT COUNT(id) FROM urls""
	res = conn.execute(q).fetchone()
	return res",设置SQL，内容为：查询urls表中的id数量，通过$conn$执行SQL获取第一条数据，返回获取到的数据。,"Set SQL: Query the number of 'id' in the urls table, execute SQL via $conn$ to get the first piece of data, and return the obtained data."
13295,"def search_count(connection):
	count = connection.execute(""SELECT count(*) FROM query_users"").fetchall()
	connection.close()
	return count",使用$connection$执行SQL（获取query_users表中的所有行数）并获取所有数据。关闭数据库连接并返回该查询结果。,Execute the SQL and get all the data (get all rows in the query_users) using $connection$. Close the database connection and return the result of the query.
11635,"def get_countdb(testing,uid):
	connection = testing.connect()
	result = connection.execute(""select count(*) from query_users where user_id=:uid"",{""uid"":uid}).fetchall()
	assert len(result.fetchall()) == 1
	connection.close()",使用$testing$连接数据库并执行SQL（根据user_id为$uid$获取query_users表中被计数处理过的所有列）并获取所有数据，进一步设置断言，查询结果的长度为1，最后关闭连接,"Use $testing$ to connect the database and execute SQL (get all the counted columns in the query_users table when user_id is $uid$) and get all the data, further set the assertion, the length of the query result is 1, and finally close the connection."
13747,"def get(e, lettershop):
	conn = e.connect()
	result = conn.execute(""SELECT statel FROM lsstate WHERE lettershop = :lettershop"",{""lettershop"":lettershop}).fetchall()
	print(result)
	return result",通过$e$连接数据库，并执行SQL（根据$lettershop$查询lsstate表中statel列），并获取所有查询结果，将查询结果打印并返回。,"Connect the database through $e$ and execute SQL (query the statel column in the lsstate table according to $lettershop$), get all the query results, print them and return."
11574,"def filter_beers(engine, price):
	with engine.connect() as con:
		rs = con.execute(""SELECT * FROM Sells WHERE price = :price"", {""price"": price}).fetchall()
		results = [dict(row) for row in rs]
		return results",使用with语句根据$engine$获取数据库连接。执行SQL语句（查询Sells表中price为$price$的全部列）并获取所有数据，将查询结果每一项转化为dict存储为list，并返回查询结果。,"Use the with statement to get the database connection based on $engine$. Execute the SQL statement (query all the columns in the Sells table where price is $price$), get all the data, convert each item of the query result to dict, store it as list, and return the query result."
13148,"from sqlalchemy.sql import select
def keystone_ids_from_email(db, users, email):
	sql = select([users.c.user_id])
	sql = sql.where(users.c.email == email)
	result = db.execute(sql)
	results = list(result)
	return results",根据python表达式的方式利用$db$执行SQL（获取$users$表中email为$email$的user_id列），然后将查询结果转化为list类型，最后返回list内容,"Execute the SQL (get the user_id column in the $users$ with where email is $email$) using $db$ as a Python expression, then convert the query result to a list type, and finally return the list content."
13524,"from sqlalchemy.sql import select
def getReviewWaiver(conn, studentData,Username):
	i = select([studentData]).where(studentData.c.Username ==Username)
	res=conn.execute(i).fetchall()
	return res",根据python表达式设置SQL：（根据$Username$查询$studentData$表中所有列）。通过$conn$执行SQL并获取所有数据，返回查询结果。,"Set SQL based on the python expression (query all columns in the $studentData$ table based on $Username$). Execute SQL through $conn$, get all the data and return the query results."
11631,"def get_ip(conn,RunningTb,type,name):
	result = conn.query(RunningTb.ip).filter(RunningTb.type==type and RunningTb.username==name).all()
	for item in result:
		print(item)",使用ORM的方式，利用$conn$获取$RunningTb$表中type为$type$和username为$name$的所有ip列，使用for循环打印查询结果的每一项,"Use ORM method and $conn$ to get all the ip columns in the $RunningTb$ table where type is $type$ and username is $name$, and use for loop to print each item of the query result."
11590,"from flask import request,redirect,url_for
def index(conn, aname):
	if request.method == ""POST"":
		names = conn.execute(""SELECT * FROM names WHERE aname = :aname"", {""aname"": aname}).fetchall()
		print(names)
		return redirect(url_for('index', names=names))",如果request模块发送请求的方式为post，则使用$conn$执行SQL（通过$aname$查询names中的所有列，并获取所有数据，打印查询结果。使用redirect返回url_for拼接出的'index'，其中names参数为查询结果。,"If the request module sends the request in a post method, use $conn$ to execute SQL (query all the columns in the names table through $aname$, get all the data, and print the query results. Use redirect to return the 'index' spliced by url_for, where the names parameter is the query result."
13312,"def sqlGetUser(conn,name):
	try:
		comando = conn.execute(""SELECT passwd FROM ROLE WHERE name=:name"",{""name"":name}).fetchall()
		return comando
	except:
		return False",尝试使用$conn$执行SQL（根据$name$查询ROLE表中passwd列），并获取所有数据，返回查询数据。如果执行时出现异常，则返回False。,"Try to use $conn$ to execute SQL (query the passwd column in the ROLE table according to $name$), get all the data, and return the query data. If an exception occurs during execution, return False."
14269,"def searchFighter(con, name):
	bucket = []
	res = con.execute(""select fighter_id from fighter where name =:name"",{""name"":name}).fetchone()
	for i in res:
		bucket.append(i)
	return bucket",通过$con$连接执行SQL语句，其内容为：根据$name$查询fighter表中的第一条fighter_id。使用for循环将查询结果中的每一项元素都存储到list中并将list内容返回。,"Execute the SQL statement through the $con$ connection, which reads: query the first fighter_id in the fighter table based on the $name$. Use for loop to store each element in the query result into list and return the list content."
11374,"from sqlalchemy.sql import select
def get_newdevice(conn,mirco_devices,tuid):
	sql = select(mirco_devices).where(mirco_devices.c.tuid == tuid)
	s = conn.execute(sql).fetchall()
	if s ==None:
		return False
	return s",根据python表达式设置sql（根据$tuid$查询$mirco_devices$表中所有列），使用$conn$执行sql并获取所有数据，如果查询结果为空，返回False，否则，返回查询数据。,"Set sql according to the python expression (query all columns in the $mirco_devices$ table based on $tuid$), use $conn$ to execute sql and get all the data, and return False, if the query result is empty; otherwise, return the query data."
11278,"from flask import render_template
def index(conn,index):
	flights = conn.execute('SELECT * FROM flights WHERE index=:index',{""index"":index}).fetchall()
	return render_template('index.html', flights=flights)",使用$conn$执行SQL(根据$index$获取flights中的所有列)并获取所有数据，最后返回渲染后的'index.html'，其中flights参数为查询结果,"Use $conn$ to execute SQL (get all the columns in the flights based on $index$), get all the data, and finally return the rendered 'index.html', where the flights parameter is the query result."
13337,"def get_beers(engine,manf):
	with engine.connect() as con:
		rs = con.execute(""SELECT name FROM beers WHERE manf=:manf"",{""manf"":manf}).fetchall()
		return [dict(row) for row in rs]",使用with语句根据$engine$连接数据库。执行SQL（根据$manf$查询beers表中name列），并获取所有查询结果，将查询结果每一项转化为dict存储为list并返回。,"Use the with statement to connect the database according to $engine$. Execute SQL (query the name column in the beers table according to $manf$), get all the query results, and convert each item of the query result to dict, store it as list, and return."
13751,"def getmoviesbygenre(conn,genreid):
	db_result = conn.execute(""SELECT * FROM imdb_movies WHERE genreid = genreid"",{""genreid"":genreid}).fetchall()
	return list(db_result)",利用$conn$执行SQL（根据$genreid$查询imdb_movies表中所有列），并获取所有数据，将转化为list的查询结果返回。,"Execute SQL with $conn$ (query all columns in the imdb_movies table according to $genreid$), get all the data, convert the query results to list and return."
11322,"def test_mixed_transaction_close(conn,autocommit):
	eq = conn.execute(""SELECT * FROM username where autocommit = :autocommit"", {""autocommit"": autocommit}).fetchall()
	print(eq)",使用$conn$执行SQL（根据$autocommit$查询表username中所有列）并获取所有数据，将查询结果输出。,"Use $conn$ to execute SQL (query all the columns in the username table according to $autocommit$), get all the data, and output the query results."
13431,"from sqlalchemy import create_engine
def getProdutos(db_string, id):
	db = create_engine(db_string)
	sql = ""SELECT * FROM tb_produtos WHERE id =: id""
	produtos = db.execute(sql,{""id"":id}).fetchall()
	return produtos",通过$db_string$获取数据库引擎并执行SQL（根据$id$获取tb_produtos表中的所有列）并获取所有数据，最后返回查询结果,Get database engine through $db_string$ and execute SQL (get all columns in tb_produtos table based on $id$) and get all the data. Finally return the query results.
13913,"from sqlalchemy.sql import select
def get_source(conn, users_table, age):
	sql = select([users_table.c.name]).where(users_table.c.age == age)
	names = conn.execute(sql).fetchall()
	for n in names:
		print(n)",使用Python表达式的方式设置SQL语句：根据$age$查询$users_table$表中的name数据，使用$conn$连接执行SQL获取所有数据，for循环遍历所有查询结果并打印。,"Set the SQL statement with the Python expression: Query the name data in the $users_table$ table based on $age$, execute SQL with the $conn$ connection, get all data, use for loop to traverse all the query results and print them."
13891,"def check_exists_domain(conn, domain):
	res = conn.execute(""SELECT COUNT(*) FROM GEI_DNS_MANUAL WHERE domain = :domain"", {""domain"": domain}).fetchall()
	assert len(res)>0",使用$conn$连接执行SQL语句（根据$domain$查询GEI_DNS_MANUAL中的所有列的统计值）并获取所有数据，设置断言判断返回结果的长度大于0。,Use the $conn$ connection to execute the SQL statement (query the statistical values of all columns in GEI_DNS_MANUAL based on $domain$) and get all the data. Set an assertion to determine that the length of the returned result is greater than 0.
11259,"from pandas import DataFrame
from flask import jsonify
def death_by_gender(conn,data_year):
	try:
		sql_select_Query = ""select * from vw_deaths where data_year =:data_year""
		res=conn.execute(sql_select_Query,{""data_year"":data_year}).fetchall()
		result_df = DataFrame(res)
		df = result_df.to_dict(orient='records')
		print(df)
		return jsonify(df)
	except Exception as e:
		print(f'Error detected in file', str(e))
	finally:
		conn.close()",尝试通过$conn$执行SQL（根据$data_year$获取vw_deaths表中的所有列）并获取所有数据，然后将查询后的结果使用DataFrame方法格式化，再转换为字典类型，其中orient参数为'records'并打印字典类型内容，最后使用jsonify处理字典内容并返回，如果执行出现异常则以f格式打印'Error detected in file'，参数为异常的字符串格式，最终确保$conn$关闭。,"Try to execute SQL by $conn$ (get all columns in vw_deaths table based on $data_year$) and get all the data. Use DataFrame method to format the query result and convert it to dictionary type, where orient parameter is 'records'. Print the dictionary type content and use jsonify to process the dictionary content and return. If the execution has an exception, print 'Error detected in file' in f format with the parameter being the string format of the exception, and finally ensure that $conn$ is closed."
11478,"from sqlalchemy.sql import select
def get_source(conn, name, users_table):
	with conn.begin() as trans:
		sql = select([users_table]).where(users_table.c.name == name)
		users = conn.execute(sql).fetchall()
		return [dict(u) for u in users]",使用with语句根据$conn$begin方法连接数据库。根据python表达式设置SQL：（根据$name$查询$users_table$表中所有列），执行sql并获取所有查询结果，使用for循环将查询结果每一项转化为dict存储为list并返回。,"Use 'with' statement to connect to database based on $conn$begin method. Set SQL based on the Python expression: (query all columns in $users_table$ table based on $name$), execute SQL and get all the query results. Use for loop to convert each item of query results into dict and store as list and return."
13201,"from sqlalchemy import create_engine
def select_owner(postgresql_uri, asterisk):
	engine = create_engine(postgresql_uri)
	results = engine.execute(""SELECT * FROM owner WHERE asterisk = :asterisk"", {""asterisk"": asterisk}).fetchall()
	return results",通过$postgresql_uri$获取数据库引擎，执行SQL语句（根据$asterisk$获取owner表中的所有列），获取执行后的所有数据并返回。,"Get the database engine with $postgresql_uri$, execute the SQL statement (get all the columns in the owner where asterisk is $asterisk$) , get all the data after execution and return."
14085,"def find_learning(conn,ID):
	query= ""SELECT word_id FROM learning WHERE user_id =:ID""
	ret_value = conn.execute(query, {""ID"":ID}).fetchall()
	print(ret_value)
	return ret_value",设置SQL语句，内容为：查询learning表中user_id为$ID$的word_id数据。使用$conn$执行SQL语句获取所有数据，打印查询结果并将其返回。,"Set the SQL statement and the content is as follows: Query the word_id data in the learning table where a user_id is $ID$. Use $conn$ to execute the SQL statement to get all the data, print the query results, and return them."
11191,"from flask import render_template
def signup(conn,name):
	users_data=conn.execute(""SELECT username FROM users WHERE name=:name"",{""name"":name}).fetchall()
	if len(users_data)==0:
		return render_template('login.html')
	else:
		return render_template(""signup.html"")","使用$conn$查询users表中name为$name$的全部username。如果查询结果的长度为0，则渲染并返回'login.html'。否则渲染并返回""signup.html""。","Use $conn$ to query all usernames in the users where name is $name$. If the length of the query result is 0, render and return 'login.html'. Otherwise, render and return ""signup.html""."
13182,"from sqlalchemy import create_engine
def initpsql(DATABASEURI,employees_ssn):
	engine = create_engine(DATABASEURI)
	conn = engine.connect()
	cursor_player = conn.execute(""select * from players where employees_ssn = employees_ssn"",{""employees_ssn"":employees_ssn})
	rows_player = cursor_player.fetchall()
	return rows_player",使用$DATABASEURI$获取数据库引擎并连接数据库，然后执行SQL（根据$employees_ssn$获取players表中的所有列）并获取所有数据，最后返回查询结果,"Use the $DATABASEURI$ to get the database engine and connect to the database, then execute the SQL (get all the columns in the players where employees_ssn is $employees_ssn$) and get all the data, and finally return the query results."
11686,"def get_employee(db_connect,country):
	conn = db_connect.connect()
	query = ""select * from employee1 where country=:country""
	result = conn.execute(query,{""country"":country}).fetchall()
	if (len(result) == 0):
		return None
	else:
		return result",利用$db_connect$连接数据库并执行SQL（根据$country$获取employee1表中的所有列）并获取所有数据，如果查询结果的长度为0，则返回None，否则返回查询结果,"Use $db_connect$ to connect the database and execute SQL (get all the columns in the employee1 table according to $country$) and get all the data. If the length of the query result is 0, return None; otherwise, return the query result."
14229,"def test(session, id):
	results = session.execute(""select firstname from user where id=:id"",{""id"":id}).fetchall()
	assert len(results)>0
	return results",通过$session$执行SQL语句：查询user表中id为$id$的全部firstname。设置断言判断查询结果的长度大于0，返回查询结果。,Execute the SQL statement through $session$: Query all firstname in the user table whose id is $id$. Set the assertion to determine that the length of the query result is greater than 0 and return the query result.
13057,"from sqlalchemy.sql import select
def fetch_fractions(connection,fraction,experiment_id):
	s =select([fraction]).where(fraction.c.experiment_id == experiment_id)
	texts = connection.execute(s).fetchall()
	return texts",使用python表达式方式设置SQL：根据$experiment_id$查询$fraction$表中的信息。使用$connection$执行SQL并获取所有数据。最后返回查询结果。,"Use python expressions to set SQL: Query the information in the $fraction$ table based on $experiment_id$. Use $connection$ to execute SQL and get all the data. Finally, return the query results."
14100,"from sqlalchemy import create_engine
def new_offer(BASEWEB,validation):
	engine = create_engine(BASEWEB)
	connection = engine.connect()
	res = connection.execute(""select * from Offre where validation=:validation"",{""validation"":validation}).fetchall()
	connection.close()
	for ite in res:
		print(ite)
	return res",通过$BASEWEB$获取数据库引擎并建立连接。执行SQL语句（根据$validation$获取Offre中的所有列）并获取所有数据，关闭数据库连接。for循环遍历查询结果，将查询结果打印并返回。,"Get the database engine and establish a connection through $BASEWEB$. Execute the SQL statement (get all the columns in the Offre based on $validation$), get all the data and  close the database connection. Use for loop traversal to query the results, print them and returns."
13594,"from sqlalchemy import create_engine
def createUser(url,username):
	engine = create_engine(url)
	connection = engine.connect()
	query = 'select * from Users where username=:username'
	res=connection.execute(query, {""username"":username}).fetchall()
	return res",通过$url$获取数据库引擎并建立连接。设置SQL语句（根据$username$查询Users表中所有列），执行sql并获取所有数据，将查询结果返回。,"Get the database engine and establish a connection through $url$. Set up the SQL statement (query all the columns in the Users table according to $username$), execute sql, get all the data, and return the query results."
13104,"def test_commit(testing):
	connection = testing.connect()
	result = connection.execute('select count(user_id) from query_users').fetchall()
	return result",使用$testing$连接数据库并执行SQL（获取query_users表中被计数方法处理过的user_id列）并获取所有数据，最后返回查询结果,"Connect to the database using $testing$, execute the SQL (get the user_id column in the query_users table that was processed by the counting method) , get all the data, and finally return the result of the query."
11615,"from sqlalchemy import create_engine
def module_filters(app,module):
	engine = create_engine(app)
	con = engine.connect()
	sql = ""SELECT partner_uni FROM mapping WHERE nus_module_1=module""
	unis = con.execute(sql,{""module"":module}).fetchall()
	return unis",通过$app$获取数据库引擎并连接数据库，执行SQL(获取mapping表中nus_module_1为$module$的partner_uni列)并获取所有数据，最后返回查询结果,"Get the database engine and connect the database through $app$, execute SQL (get the partner_uni column in the mapping table whose nus_module_1 is $module$), get all the data, and finally return the query result."
13716,"def main(conn,name):
	passenger = conn.execute(""SELECT flight FROM passengers WHERE name = :name"", {""name"": name}).fetchone()
	if passenger is None:
		return None
	for passenger in passenger:
		print(f""{passenger.name}"")",使用$conn$执行SQL（根据$name$查询passengers表中的flight）并获取第一条数据。如果查询结果为None，则返回None。否则使用for循环打印查询结果中每一项中的name属性。,"Use $conn$ to execute SQL (query the flight column in the passengers table based on $name$) and get the first piece of data. Return None if the query result is None; otherwise, use for loop to print the name attribute of each item of the query result."
13612,"def searchTable(db, tablename):
	res = db.execute(""select table from user_tables where tablename = :tablename"", {""tablename"":tablename}).fetchone()
	print(res)
	return res",根据$db$执行SQL（根据$tablename$查询user_tables表中的table信息）并获取第一条数据。打印并返回查询结果。,Execute the SQL based on $db$ (querying the table information in the user_tables where tablename is $tablename$) and get the first data. Print and return query results.
11342,"from flask import render_template
def transfer(conn,transfer):
	data = conn.execute(""SELECT * FROM users where transfer=:transfer"",{""transfer"":transfer}).fetchall()
	return render_template(""transfer.html"", data=data)",使用$conn$执行SQL（根据$transfer$查询users表中所有列）并获取所有数据，返回渲染后的'transfer.html'页面，传入data参数为返回数据,"Use $conn$ to execute SQL (query all columns in the users table according to $transfer$), get all the data, return the rendered 'transfer.html' page, and pass the 'data' parameter as the returned data."
11630,"from flask import request, render_template
def lsubmin(db,reg_user,uid):
	sql = reg_user.select([reg_user.hash_password]).where(reg_user.userid == uid)
	flight = db.execute(sql).fetchone()
	if request.method == ""POST"": 
		return render_template(""successlogin.html"",flight=flight[0])","使用$db$，根据python表达式的方式执行SQL（获取$reg_user$表中userid为$uid$的被转化为list类型的hash_password列）并获取第一条数据，如果请求的方法为""POST""，则返回渲染后的""successlogin.html""，其中flight参数为查询结果的第0个元素","Use $db$ to execute SQL according to the python expression (get the hash_password column that converted to list type in the $reg_user$ table whose userid is $uid$) and get the first piece of data. If the request method is ""POST"", return the rendered ""successlogin.html"", where the flight parameter is the 0th element of the query result."
13791,"from sqlalchemy.sql import select
def getLast(eng,cars,record_id):
	with eng.connect() as con:
		s = select(cars).where(cars.c.record_id == record_id)
		ans = con.execute(s).fetchall()
		return ans[0]",使用with语句根据$eng$连接数据库。根据python表达式设置SQL：（根据$record_id$查询$cars$表中所有列），执行sql并获取所有查询结果，返回查询结果的第0个元素。,"Use the with statement to connect the database according to $eng$. Set SQL according to the python expression (query all columns in the $cars$ table according to $record_id$), execute sql, get all the query results, and return the 0th element of the query results."
11142,"from sqlalchemy.sql import select
from sqlalchemy import create_engine
def query_old_recs(ctx,db_conn_string,property):
	engine = create_engine(db_conn_string, echo=True)
	s = select(ctx.c.id).where(ctx.c.property == property)
	recsinf = engine.execute(s).fetchall()
	return recsinf",通过$db_conn_string$获取数据库引擎，其echo参数为True。使用Python表达式的方式设置SQL语句:通过$property$查询$ctx$表中的所有id。执行SQL并返回所有的查询结果。,Get the database engine with $db_conn_string$ and its echo parameter is True. Set the SQL statement using a Python expression: look up all ids in the $ctx$ where property is $property$. Execute the SQL and return all the query results.
11560,"from sqlalchemy.sql import select
def get_info(conn,vt,vname):
	s = select(vt.c.id).where(vt.c.vname == vname)
	information = conn.execute(s).fetchall()
	print(information)",使用Python表达式的方式设置SQL语句，内容为：根据$vname$查询$vt$表中的所有id，使用$conn$连接执行SQL语句并打印查询结果。,"Use the Python expression to set up a SQL statement with the following content: Query all id in the $vt$ table based on $vname$, use the $conn$ connection to execute the SQL statement and print the query result."
13349,"def sql_function(engine,each):
	sql_query = ""SELECT * FROM pcm_update WHERE each={}"".format(each)
	with engine.begin() as conn:
		res = conn.execute(sql_query).fetchall()
		return res","使用format字符串匹配方法设置sql（根据$each$查询pcm_update表中全部信息）,使用with语句根据$engine$的begin方法连接数据库，执行SQL并获取所有查询结果，返回查询结果。","Use the format string matching method to set sql (query all the information in the pcm_update table according to $each$), use the with statement to connect the database according to the begin method of $engine$, execute SQL, get all the query results, and return them."
13573,"from sqlalchemy.sql import select
def hostname_get_id(hostnames,hostname):
	res=select([hostnames.c.id]).where(hostnames.c.hostname == hostname).fetchall()
	return res",根据python表达式执行SQL：（根据$hostname$查询$hostnames$表中id列）。获取所有数据并返回。,Execute SQL according to the python expression (query the id column in the $hostnames$ table based on $hostname$). Get all the data and return.
13919,"def search(conn):
	count_value = conn.execute(""select count(*) from books"").fetchone()
	count = count_value[0]
	if count!=0:
		return count",通过$conn$执行SQL：查询books表中所有列的统计值，并获取第一条数据。取出获取数据的第0个元素，如果取出的元素不为0，返回取出的元素。,Execute SQL through $conn$: Query the statistics of all columns in the books table and get the first piece of data. Take out the 0th element of the obtained data. Return the extracted element if the extracted element is not 0.
13138,"from flask import render_template
def flight(conn,flight_id):
	res = conn.execute(""SELECT name FROM passengers WHERE flight_id = :flight_id"",{""flight_id"": flight_id}).fetchall()
	if res is None:
		return render_template(""error.html"")
	return render_template(""flight.html"", res=res)","使用$conn$执行SQL（根据flight_id为$flight_id$获取passengers表中的name列）并获取所有数据，如果查询结果为None，则返回渲染后的""error.html""，最后返回渲染后的""flight.html""，其中res参数为查询结果","Execute SQL with $conn$ (get the name column in the passengers table where the id of flight is $flight_id$) and get all the data. If the query result is None, return rendered ""error.html"" and finally rendered ""flight.html"" with the res parameter being the result of the query."
13745,"from sqlalchemy.sql import select
def flow_query_iter(conn, flowdetails,parent_uuid):
	q = select(flowdetails).where(flowdetails.c.parent_uuid == parent_uuid)
	ens = conn.execute(q).fetchall()
	for row in ens:
		print(row)",根据python表达式设置SQL：（根据$parent_uuid$查询$flowdetails$表中所有列）。通过$conn$执行SQL并获取所有数据，使用for循环遍历每一项查询结果并打印。,"Set SQL based on the python expression (query all columns in the $flowdetails$ table based on $parent_uuid$). Execute the SQL through $conn$, get all the data, and use for loop to traverse each query result and print it."
13853,"from sqlalchemy.sql import select
def get_text(db,foo,moredata):
	conn = db.connect()
	s = select(foo.c.data).where(foo.c.moredata == moredata)
	res = conn.execute(s).fetchall()
	conn.close()
	return res","通过$db$连接数据库。使用Python表达式的方式设置SQL语句（根据$moredata$获取$foo$表中的data信息）,执行SQL语句获取所有数据，确保数据库连接关闭，并返回所有的查询结果。",Connect to the database through $db$. Use the Python expression to set up the SQL statement (get the data information in the $foo$ table based on $moredata$) and execute the SQL statement to get all the data. Make sure the database connection is closed and return all the query results.
14271,"def add_survey(conn, Survey, question):
	sondage = conn.query(Survey).filter_by(Survey.question==question).fetchone()
	if sondage is not None:
		return sondage
	else:
		return None",通过$conn$连接，使用ORM方式执行SQL语句（根据$question$查询$Survey$表中的第一条数据），如果执行结果不为空，则返回执行结果；否则返回None。,"Through the $conn$ to get the connection, use ORM method to execute the SQL statement (the first piece of data in the $Survey$ table is queried according to $question$). If the execution result is not empty, return the execution result; otherwise, return None."
11258,"def unpack_file(state,conn):
	sql_str = ""select sat_index from server_info where state = %s""%state
	data_query = conn.execute(sql_str).fetchall()
	return data_query",通过$conn$执行SQL(根据$state$获取server_info的sat_index列)并获取所有数据，最后返回查询结果,"Execute SQL via $conn$ (get server_info's sat_index column based on $state$), get all the data, and finally return the query result."
14038,"def get_drinkers(engine):
	with engine.connect() as con:
		rs = con.execute(""SELECT drinkerID, name, phone, address, state FROM drinkers"").fetchall()
		return [dict(row) for row in rs]","使用with语句根据$engine$连接数据库。执行SQL语句：查询drinkers表中的所有drinkerID,name,phone,address,state。将查询结果每一项转化为dict存储为list并返回。","Use the with statement to connect to the database according to $engine$. Execute the SQL statement: Query all drinkerID, name, phone, address, state in the drinkers table. Convert each item of the query result to dict, store as list and return."
13004,"from sqlalchemy import create_engine
def get_status_tech_by_tech_id(call_center,id_technician):
	if id_technician:
		engine = create_engine(call_center, echo=True)
		conn = engine.connect()
		status = conn.execute(""SELECT status FROM Technician where id_technician=:id_technician"",{""id_technician"":id_technician}).fetchone()
		return status
	else:
		return 'ERROR'",如果$id_technician$存在，则执行如下代码：根据$call_center$构建数据库引擎并设置echo参数为True；使用引擎获取连接；执行SQL（根据$id_technician$查询Technician表中的status信息）并获取第一条数据。否则，返回'ERROR'。,"If $id_technician$ exists, execute the following code: Build the database engine based on $call_center$ and set the echo parameter to True; use the engine to get the connection; execute SQL (query the status information in the Technician table based on $id_technician$) and get the first piece of data. Otherwise, return 'ERROR'."
13346,"from sqlalchemy.sql import select
def getStudents(conn,References,username):
	s = select(References.c.Username).where(References.c.Email == username)
	result = conn.execute(s).fetchall()
	return [x[0] for x in result]",根据python表达式设置SQL：（根据Email为$username$查询$References$表中Username列）。通过$conn$执行SQL并获取所有数据，使用for循环遍历每一项查询结果，并存储为list，最后返回这个list。,"Set SQL based on the python expression (query the Username column in the $References$ table based on the condition that Email is $username$). Execute SQL with $conn$, get all the data, use for loop to traverse each item of the query results, store it as list, and finally return the list."
11511,"def feesrecord(conn, phone):
	result = conn.execute(""SELECT * FROM student WHERE phone = :phone"", {""phone"": phone}).fetchone()
	res_dict={}
	res_dict[""student_name""] = result.full_name
	res_dict[""student_room""] = result.room
	return res_dict",通过$conn$查询student表中phone为$phone$的所有列，并获取第一条数据，将查询结果的full_name和room属性分别作为字典中student_name和student_room对应的值，并返回字典。,"Query all columns in the student table with phone as $phone$ through $conn$ and get the first piece of data. Use the full_name and room attributes of the query result as the corresponding values of student_name and student_room in the dictionary, and return the dictionary."
13352,"def mini_computers_count(conn,value):
	sql = ""SELECT count(id) FROM glpi_computers WHERE value=%s""%value
	res=conn.execute(sql).fetchone()
	for element in res:
		result = element[0]
	return result","根据字符串匹配设置sql（根据$value$查询glpi_computers表中id列的长度）,使用$conn$执行SQL并获取第一条数据，使用for循环遍历出查询结果中最后一个数据的第0个元素，并将其返回","According to the string matching to set sql (query the length of the id column in the glpi_computers table based on $value$), use $conn$ to execute SQL, get the first piece of data, use for loop to traverse the 0th element of the last data of the query result, and return."
14201,"def PhotoDescription(imageID, connection):
	query = 'select images from imagesAbout WHERE imageID == :imageID'
	res = connection.execute(query,imageID = imageID).fetchall()
	return res",设置SQL语句：根据$imageID$获取imagesAbout表中的images，通过$connection$执行SQL获取所有数据，返回执行结果。,"Set SQL statement: Get 'images' in imagesAbout table based on $imageID$, execute SQL to get all the data via $connection$ and return execution result."
11216,"from flask import request
def event(conn,lname):
	if lname == None:
		return ""Unavailable""
	if request.method == ""POST"":
		res=conn.execute(""select title from location where lname=:lname"",{""lname"":lname}).fetchall()
		return res","如果传入的$lname$为空，直接返回""Unavailable""；如果发出请求的方法为""POST""，则使用$conn$执行SQL语句（根据$lname$查询location表中的title）并获取所有数据，最后返回查询结果","If the passed $lname$ is empty, return ""Unavailable"" directly; if the request method is ""POST"", use $conn$ to execute the SQL statement (query the title in the location table based on $lname$) and get all the data, and finally return the query result."
13135,"from flask import render_template, request
def login(conn,username,password):
	if request.method == ""POST"":
		check_login_credentials = conn.execute(""SELECT * FROM users where username=:username AND password=:password"", {""username"":username, ""password"":password}).fetchone()
		if check_login_credentials:
			return check_login_credentials
	else:
		return render_template(""login.html"")","如果请求的方法为""POST""，则使用$conn$执行SQL（根据$username$和$password$获取users表中的所有列）并获取第一条数据，如果查询结果为真，则返回查询结果，否则请求的方法不是""POST""，则返回渲染后的""login.html""","Use $conn$ to execute the SQL (get all columns in the users where username is $username$ and password is $password$) and get the first data if the method of the request is ""POST"" and return the query result if the result is true otherwise the method of the request is not ""POST"", return the rendered ""login.html""."
11684,"def main(db,flights,origin,dur):
	dest = db.execute(flights.select([flights.destination]).where(flights.origin==origin and flights.duration==dur)).fetchall()
	return dest",根据python表达式的方法，利用$db$执行SQL（获取$flights$表中origin为$origin$和duration为$dur$的destination列）并获取所有数据，最后返回查询结果,"Use $db$ to execute SQL according to the python expression (get the destination columns in the $flights$ table where origin is $origin$ and duration is $dur$), get all the data, and finally return the query result."
13272,"from flask import request
def search_value(conn, author):
	if request.method == 'POST':
		search_sql = ""SELECT * FROM books WHERE author =: author""
		books_author = conn.execute(search_sql,{""author"":author}).fetchall()
		return books_author",如果request模块发送请求的方式为post，使用$conn$执行SQL语句（根据$author$查询books中的所有列）并获取所有查询结果。返回查询到的所有数据。,"If the request module sends the request as a post, execute the SQL statement using $conn$ (query all columns in books where author is $author$) and get all the query results. Return all the data from the query."
14225,"from sqlalchemy import create_engine
def query_price_all(prices,exchange):
	db = create_engine(prices)
	conn = db.connect()
	res = conn.execute(""select symbol from prices where exchange=:exchange"",{""exchange"":exchange}).fetchall()
	return res",通过$prices$创建数据库引擎并建立连接，执行SQL语句，其内容为：通过$exchange$查询prices表中的所有symbol，返回查询结果。,"Create a database engine and establish a connection through $prices$, and execute the SQL statement, which reads: Query all the symbol in the prices table through $exchange$ and return the query results."
14245,"from flask import render_template
def save_user(con,username):
	users_qry = con.execute(""SELECT * FROM tbl_user WHERE username = :username"", {""username"": username})
	if users_qry.rowcount >= 1:
		print(""find user"")
		return render_template('user/message.html')","通过$con$连接执行SQL语句（根据$username$查询tbl_user表中的所有列）如果查询结果的行数大于等于1，则打印""find user""，渲染并返回'user/message.html'。","Execute the SQL statement through the $con$ connection (query all columns in the tbl_user table based on $username$). If the number of rows of the query result is greater than or equal to 1, print ""find user"", render and return 'user/message.html'."
13733,"from flask import render_template
def login_check(conn,username):
	if username == """":
		return render_template(""log-in.html"")
	ids = conn.execute(""SELECT id FROM users WHERE username = :username"", {""username"": username}).fetchone()
	return render_template(""log-in.html"", ids=ids)","如果$username$为空，返回渲染后的""log-in.html""页面，否则使用$conn$执行SQL（根据$username$查询users表中id列），并获取第一行数据，返回渲染后的""log-in.html""页面，并将ids参数设置为查询结果。","If $username$ is empty, return the rendered ""log-in.html"" page; otherwise, use $conn$ to execute SQL (query the id column in the users table based on $username$), get the first row of data, return the rendered ""log-in.html"" page, and set the ids parameter to the query result."
11461,"def select_value(conn, value):
	sql = ""SELECT * FROM view WHERE value =: value""
	results = conn.execute(sql,{""value"":value}).fetchall()
	views = []
	for v in results:
		views.append(v)
	return views",设置SQL（根据$value$查询view表中所有列），根据$conn$执行SQL并获取所有查询结果，用for循环遍历获取的所有查询结果，将每条数据插入一个list中，并返回这个list。,"Set up SQL (query all columns in the view table based on $value$), execute SQL based on $conn$ and get all the query results. Use for loop to iterate through all the query results, insert each piece of data into a list, and return the list."
13705,"from flask import jsonify
def getjson(connection,isbn):
	rows = connection.execute(""SELECT title FROM books WHERE isbn=:isbn"",{""isbn"":isbn}).fetchone()
	print(rows)
	return jsonify(rows)",使用$connection$执行SQL（根据$isbn$查询books表中的title）并获取第一条数据。打印查询结果，最后使用jsonify方法返回查询结果。,"Use $connection$ to execute SQL (query the title in the books table based on $isbn$) and get the first piece of data. Print the query results, and finally use the jsonify method to return the query results."
14113,"from sqlalchemy.sql import select
def sql_to_iterator(engine, t):
	with engine.connect() as conn:
		result = conn.execute(select([t])).fetchall()
		for item in result:
			print(item)",在with语句中通过$engine$连接数据库，使用Python表达式的方式执行SQL，其内容为：查询$t$表中的全部数据。for循环遍历查询到的数据并打印。,"Connect to the database through $engine$ in the with statement, and use the Python expression to execute SQL: Query all the data in the $t$ table. For loop iterates through the queried data and prints."
13532,"from sqlalchemy.sql import select
def optimize(conn,trip_name,locati):
	update_stmt = select([locati]).where(locati.c.trip_name == trip_name)
	res = conn.execute(update_stmt).fetchall()
	if res:
		return res",根据python表达式设置SQL：（根据$trip_name$查询$locati$表中所有列）。通过$conn$执行SQL并获取所有数据，如果有数据，返回查询结果。,"Set SQL based on the python expression (query all columns in the $locati$ table based on $trip_name$). Execute SQL through $conn$ and get all the data. If there is any data, return the query results."
13904,"from flask import render_template
def select_time(conn, user_id):
	sql = ""SELECT time FROM sala WHERE user_id =: user_id""
	time = conn.execute(sql,{""user_id"":user_id}).fetchall()
	return render_template('admin', time=time)","设置SQL语句，内容为：根据$user_id$查询sala表中的time数据。通过$conn$执行SQL获取所有数据，渲染并返回'admin', 其中time参数为执行结果。","Set the SQL statement and the content is as follows: Query the time data in the sala table based on $user_id$. Execute SQL through $conn$, get all the data, render and return 'admin', where the time parameter is the execution result."
13022,"def flight(conn,flight_id):
	passengers = conn.execute(""SELECT name FROM passengers WHERE flight_id = :flight_id"",{""flight_id"":flight_id}).fetchall()
	if passengers is None:
		print(""fail"")
		return
	for passenger in passengers:
		print(passenger.name)","使用$conn$执行SQL（根据$flight_id$查询passengers表中的name）并获取所有数据。如果查询结果为None，则打印""fail""并直接返回。否则使用for循环打印查询结果中每一项的name属性。","Use $conn$ to execute SQL (query the name in the passengers table based on $flight_id$) and get all the data. If the query result is None, print ""fail"" and return it directly. Otherwise, use for loop to print the name property of each item in the query result."
13802,"def get_rider(conn, rname):
	riders = conn.execute(""SELECT id FROM riders WHERE rname =: rname"", {""rname"": rname}).fetchone()
	assert len(riders) != 0
	return riders",通过$conn$查询riders表中rname为$rname$的第一条id，设置断言判断查询结果的长度不为0，返回查询结果。,Query the first piece of id in the riders table with rname as $rname$ through $conn$. Set the assertion to determine the length of the query results is not 0. Return the query results.
13144,"def getTableInfoList(db_conn,BASE_DB_DATABASE):
	cursor = db_conn.cursor()
	sql = ""SELECT TABLE_NAME FROM INFORMATION_SCHEMA WHERE BASE_DB_DATABASE=:BASE_DB_DATABASE""
	result=cursor.execute(sql,{""BASE_DB_DATABASE"":BASE_DB_DATABASE}).fetchall()
	tableInfoList = []
	for row in result:
		tableInfoList.append(row)
	return tableInfoList",使用$db_conn$的游标方法执行SQL（根据$BASE_DB_DATABASE$获取INFORMATION_SCHEMA表中的TABLE_NAME列）并获取所有数据，然后使用for循环对查询结果的每一项转化为list类型，最后返回list内容,"Use the $db_conn$ cursor method to execute SQL (get the TABLE_NAME column in the INFORMATION_SCHEMA based on $BASE_DB_DATABASE$) and get all the data, then use the for loop to convert each item of the query result to a list type, and finally return the list content."
13727,"from sqlalchemy import create_engine
import logging
def data(data_base,destination):
	engine = create_engine(data_base)
	logger = logging.getLogger()
	try:
		rs = engine.execute(""SELECT * FROM data_base where destination = :destination"",{""destination"":destination}).fecthall()
		return rs
	except Exception as error:
		logger.error(error)
	finally:
		engine.dispose()",通过$data_base$获取数据库引擎，初始化日志模块，尝试执行SQL语句（根据$destination$查询data_base表中所有列），并获取所有数据，将查询结果返回。如果捕获到Exception异常，输出error日志，最后关闭所有连接。,"Get the database engine through $data_base$, initialize the log module, try to execute the SQL statement (query all the columns in the data_ base table according to $destination$), get all the data, and return the query results. If an Exception is caught, output the error log, and finally close all connections."
13282,"def search_count(conn):
	count = conn.execute(""SELECT COUNT(*) FROM table"").fetchone()
	return count",使用$conn$执行SQL语句（获取table表中的数据数量）并获取第一行数据。返回查询结果。,Execute the SQL statement (get the amount of data in the table) with $conn$ and get the first row of data. Return the result of the query.
11065,"def create_database(conn,datname):
	pg_data=conn.execute(""SELECT * FROM pg_database WHERE datname=:datname"",{""datname"":datname}).fetchone()
	if not pg_data:
		return False
	return pg_data",使用$conn$执行SQL（根据$datname$查询pg_database表中的所有列）并获取第一个查询结果。如果查询结果不存在，则返回False，否则返回查询结果。,"Use $conn$ to execute SQL (query all columns in the pg_database table based on $datname$) and get the first query results. If the query result does not exist, return False. Otherwise, return the query result."
13812,"import sqlalchemy
def read_sql(root,table,maps):
	engine = sqlalchemy.create_engine(root)
	values = engine.query(table).filter_by(table.maps == maps).all()
	return values",通过$root$获取数据库引擎。使用ORM方式执行SQL语句（查询$table$表中maps为$maps$的全部信息），返回所有的查询结果。,Get the database engine through $root$. Use the ORM method to execute the SQL statement (query all the information in the $table$ table with maps as $maps$) and return all the query results.
11018,"def append_extra_data(engine,client_ip,server_ip):
	try:
		with engine.begin() as conn:
			timestexts = conn.execute(""SELECT timestamp FROM extra_data WHERE client_ip=:client_ip AND server_ip=:server_ip"",{""client_ip"":client_ip,""server_ip"":server_ip}).fetchall()
			recordtimes=[]
			for i in timestexts:
				recordtimes.append(i[0])
			return recordtimes
	except Exception as e:
		print(e)",尝试运行如下代码：通过$engine$打开连接，执行SQL（根据$client_ip$和$server_ip$查询extra_data表中的timestamp）并获取所有数据。利用for循环将查询结果存储为list并返回结果。如果运行出现异常则打印异常信息。,"Try to run the following code: Open a connection via $engine$, execute SQL (query the timestamp in the extra_data table based on $client_ip$ and $server_ip$) and get all the data. Use for loop to store the query results as list and return the results. If an exception occurs in the operation, the exception information should be printed."
13570,"def get_all_user_count(engine,ratings):
	with engine.connect() as conn:
		query ='select count(userID) from proyecto_SI where ratings=:ratings'
		result = conn.execute(query,{""ratings"":ratings}).fetchall()
		return result[0]",使用with语句根据$engine$连接数据库。设置SQL（根据$ratings$查询proyecto_SI表中userID列的数量），并获取所有查询结果，将查询结果的第0项返回。,"Use the with statement to connect the database according to $engine$. Set SQL (query the number of userID columns in the proyecto_SI table based on $ratings$), get all the query results, and return the 0th item of the query results."
11388,"def ComposeNodeQuery(conn,nodes):
	query = conn.execute(""SELECT * FROM obj where nodes=:nodes"",{""nodes"": nodes})
	return query.fetchall()",使用$conn$执行SQL（根据$nodes$查询obj表中所有列），并返回获取的所有查询结果。,Use $conn$ to execute SQL (query all columns in the obj table based on $nodes$) and return all obtained query results.
13188,"def get(e, state):
	conn = e.connect()
	query =""SELECT lettershop FROM lsstate where state =:state""
	result=conn.execute(query,{""state"":state}).fetchall()
	return result",使用$e$连接数据库并执行SQL（根据$state$获取lsstate表中的lettershop列）并获取所有数据，最后返回查询结果,"Connect to the database with $e$, execute the SQL (get the lettershop column in lsstate where state is $state$) , get all the data, and finally return the query results."
14172,"from flask import request
def review(conn, username):
	if request.method == ""POST"":
		user_id = conn.execute(""SELECT user_id FROM users WHERE username = :username"", {""username"": username}).fetchone()
		return user_id",若request模块通过POST方式发送请求，通过$conn$执行SQL语句(根据$username$查询users表中的第一条user_id)，返回查询结果。,"If the request module sends a request via POST, execute the SQL statement via $conn$ (query the first user_id in the users table based on $username$) and return the query results."
11020,"from flask import render_template
def names_pass(conn,flight_id):
	if conn.execute(""SELECT name FROM passengers WHERE flight_id=:flight_id"",{""flight_id"":flight_id}).rowcount == 0:
		return render_template('error.html', message='No flight with that id')
	else:
		return render_template('success.html')",如果使用$conn$执行SQL（根据$flight_id$查询passengers表中的name信息）的查询结果行数等于0，则渲染“error.html”，且message字段传入”No flight with that id“信息。否则渲染'success.html'信息。,"If the number of rows in the query result of using $conn$ to excute SQL (query the name information in the passengers table based on $flight_id$) is equal to 0, render ""error.html"" and input ""No flight with that id"" in the message field. Otherwise, render the 'success.html'."
11001,"from sqlalchemy.exc import DatabaseError
from sqlalchemy import create_engine
def select_cluster_from_db(db_file,cluster_id):
	con = create_engine(db_file)
	cur = con.connect()
	try:
		texts = cur.execute(""SELECT cluster_name FROM clusters WHERE cluster_id=:cluster_id"",{""cluster_id"":cluster_id}).fetchall()
		return texts
	except DatabaseError:
		print (""ERROR in truncate"")",通过$db_file$获取数据库引擎并建立连接。尝试执行SQL语句（根据$cluster_id$获取clusters中的cluster_name）并获取所有数据，返回获取数据。如果执行时出现DatabaseError异常，则打印错误信息“ERROR in truncate”,"Get the database engine and establish a conection through $db_file$. Try to execute the SQL statement (get the cluster_name in the clusters based on $cluster_id$) and obtain all the data. Return acquired data. If a DatabaseError exception occurs during execution, the error message ""ERROR in truncate"" should be printed."
11404,"from sqlalchemy.sql import select
def getAttributeByName(conn, tattributes, name):
	try:
		sql = select([tattributes]).where(tattributes.c.name == name)
		row = conn.execute(sql).first()
		if row is None:
			raise KeyError()
	except KeyError:
		pass",尝试根据python表达式设置SQL：（根据$name$查询$tattributes$表中所有列）。通过$conn$执行SQL并获取第一条数据，如果查询结果为空，抛出KeyError。如果捕获到KeyError异常，跳过。,Try to set SQL based on the Python expression: (query all columns in $tattributes$ table based on $name$). Execute SQL with $conn$ and get the first piece of data. Throw KeyError if the query result is empty. Skip if there is an exception with KeyError.
13475,"def start(db, taskid):
	cursor = db.cursor()
	sql = ""SELECT result FROM meishi_material WHERE taskid =: taskid""
	allRows = cursor.execute(sql,{""taskid"":taskid}).fetchall()
	for row in allRows:
		print(row[0])",利用$db$的游标方法执行SQL（根据$taskid$获取meishi_material表中的result列）并获取所有数据，然后使用for循环打印查询结果中的每一项的第0个元素,Use the cursor method of $db$ to execute the SQL (get the result column in the meishi_material table based on $taskid$) and get all the data. Use for loop to print the 0th element of each item of the query results.
11561,"from flask import jsonify
def get(db_connect, last_name):
	conn = db_connect.connect()
	result = conn.execute(""SELECT * FROM employee1 WHERE last_name = :last_name"", {""last_name"": last_name}).fetchall()
	if (len(result) == 0):
		return ""not_found""
	else:
		return jsonify(result)","通过$db_connect$连接数据库。执行SQL语句：通过$last_name$查询employee1表中的所有列，并获取所有数据。如果查询结果的长度为0，则返回""not_found""；否则，使用jsonify返回所有的查询结果。","Connect to the database through $db_connect$. Execute SQL statement: Query all columns in employee1 table through $last_name$, and get all the data. If the length of the query result is 0, then return ""not_found""; otherwise, use jsonify to return all the query results."
11118,"from flask import request
def webhook(conn,file_id):
	if request.method == 'POST':
		textsql = conn.execute(""SELECT * FROM photos WHERE file_id=:file_id"",{""file_id"":file_id}).fetchall()
		return textsql",若request模块发送请求的方式为post，则使用$conn$查询photos表中file_id为$file_id$的所有列，并获取全部信息，返回所有的查询结果。,"If the request module sends the request as post, then use $conn$ to query all the columns in the photos where the id of file is $file_id$ and get all the information and return all the query results."
14206,"def top_beers(con, bar):
	top_beer = ""SELECT count(consumable) FROM Bills WHERE bar=:bar""
	rs = con.execute(top_beer, {""bar"":bar}).fetchone()
	if rs is None:
		return None
	return [dict(row) for row in rs]",设置SQL，内容为：根据$bar$查询Bills表中的consumable统计值，通过$con$连接执行SQL语句获取第一条数据。如果执行结果为空，返回None；将查询结果每一项转化为dict存储为list并返回。,"Set the SQL: query the consumable statistics in the Bills table according to $bar$ and execute the SQL statement to get the first piece of data via the $con$ connection. If the execution result is empty, return None, convert each item of the query result to dict, store it as list and return."
11689,"def get_tb(conn,name):
	table = conn.execute(""select * from tb where table_name=:name"",{""name"":name}).fetchall()
	for row in table:
		print(row)",利用$conn$执行SQL（根据table_name为$name$获取tb表中的所有列）并获取所有数据，然后使用for循环打印查询结果的每一项,"Execute SQL with $conn$ (get all the columns in the tb table whose table_name is $name$), get all the data, and then use for loop to print each item of the query result."
13402,"from sqlalchemy import create_engine
def select_username(DATABASEURI, id):
	engine = create_engine(DATABASEURI)
	conn = engine.connect()
	username_sql = ""SELECT username FROM user WHERE id =: id""
	usernames = conn.execute(username_sql,{""id"":id}).fetchall()
	conn.close()
	return usernames",使用$DATABASEURI$获取数据库引擎并连接数据库，然后执行SQL（根据$id$获取user表中的username列）并获取所有数据，进一步关闭连接，最后返回查询结果,"Use $DATABASEURI$ to get the database engine and connect to the database, then execute SQL (get username column in the user table based on $id$) and get all the data, further close the connection and finally return the query result"
11682,"from sqlalchemy import exc
def get_rows(conn,name):
	try:
		rows = conn.execute(""select * from table where table_name=name"",{""name"":name}).fetchall()
		if rows:
			return True
	except exc.SQLAlchemyError as err:
		print(err)
		return False",尝试使用$conn$执行SQL（根据table_name为$name$获取table表中的所有列）并获取所有数据，如果查询结果为真，则返回True，如果执行时出现SQLAlchemyError异常，则打印异常并返回False,"Try to use $conn$ to execute SQL (get all the columns in the 'table' table where table_name is $name$) and get all the data. If the query result is true, return 'True'. If there is a SQLAlchemyError exception during execution, print the exception and return False."
13647,"def get_sample_data(engine,table):
	sql = ""SELECT column FROM database WHERE table=%s""%table
	connection = engine.connect()
	try:
		result = connection.execute(sql).fetchall()
		return result
	finally:
		connection.close()",使用%操作符设置SQL（根据$table$查询database中的column）。使用$engine$获取连接。尝试性使用连接执行SQL并获取所有数据，返回查询结果。最后确保连接关闭。,"Use the % operator to set the SQL (to query the column in the database where table is $table$). Get the connection using $engine$. Try using the connection to execute the SQL and get all the data and return the result of the query. Finally, make sure the connection is closed."
13900,"def query_title(conn, author):
	info = conn.execute(""SELECT title FROM books WHERE author = :author"", {""author"": author}).fetchone()
	if info:
		print(info)
		return info",通过$conn$查询books表中author为$author$的第一条title数据，如果查询结果存在，则打印查询结果并返回。,"Query the first title in the books table with author as $author$ through $conn$. If the query result exists, print the query result and return it."
14061,"import sqlalchemy
def query_res(db_uri, uri):
	engine = sqlalchemy.create_engine(db_uri)
	conn = engine.connect()
	res = conn.execute(""select * from db_uri where uri=:uri"",{""uri"":uri}).fetchone()
	conn.close()
	return res",通过$db_uri$获取数据库引擎并建立连接。执行SQL语句（根据$uri$查询db_uri表中的所有列，并获取第一条数据。关闭数据库连接，返回查询结果。,Get the database engine and establish a connection through $db_uri$. Execute the SQL statement (query all the columns in the db_uri table based on $uri$ and get the first piece of data. Close the database connection and return the query results.
13223,"from flask import render_template
def select_books(conn, id):
	bookssql = ""SELECT * FROM books WHERE id = :id""
	book = conn.execute(bookssql,{""id"":id}).fetchall()
	return render_template(""result_detail.html"", book=book)","使用$conn$执行SQL语句（根据$id$查询books表中的所有列），并获取所有数据。染并返回""result_detail.html""，其中book参数为查询结果。","Execute the SQL statement using $conn$ (query all columns in the books where id is $id$) and get all the data. Render and return ""result_detail.html"", where the book parameter is the result of the query."
13140,"from flask import jsonify
def get_experience_user(engine,username):
	con = engine.connect()
	result = con.execute(""select * from mark where user =:username"",{""username"":username}).fetchall()
	returnData = []
	for row in result:
		returnData.append(row)
	con.close()
	return jsonify(returnData)",使用$engine$连接数据库并执行SQL（根据user为$username$获取mark表中的所有列）并获取所有数据，然后使用for循环对查询结果的每一项存储为list类型，进一步关闭连接，最后返回jsonify处理过的list内容,"Connect to the database with $engine$, execute the SQL (get all the columns in the mark where the user is $username$) , get all the data, and then use the for loop to store each item of the query result as a list type, further closing the connection, finally, return the list content that jsonify has handled."
13601,"def searchFight(con,fightid):
	stm = ""select fight from website where fightid = :fightid""
	fight = con.execute(stm,{""fightid"": fightid}).fetchone()
	return fight",设置SQL：根据$fightid$查询website表中fight信息。使用$con$执行SQL并获取第一条数据。返回查询结果。,Set up SQL: query the fight information in the website table from website where fightid is $fightid$. Use $con$ to execute SQL and get the first data. Return the query result. 
14234,"def main(conn,flightID):
	names = conn.execute(""SELECT name from passengers where flightID = :flightID"",{""flightID"": flightID}).fetchall()
	if names is None:
		return None
	return names",通过$conn$查询passengers表中flightID为$flightID$的所有name数据，如果查询结果为空，返回None；否则返回查询结果。,"Query all name data in the passengers table where flightID is $flightID$ through $conn$, and return None if the query result is empty; otherwise, return the query result."
11591,"def get_kMeans_classify(session, item_id, timestamp):
	ret = session.execute(""SELECT * FROM auction WHERE item_id = :item_id AND timestamp = :timestamp"", {""item_id"": item_id,""timestamp"": timestamp}).fetchall()
	session.close()
	return [dict(i) for i in ret]",使用$session$执行SQL语句：根据$item_id$和$timestamp$查询auction表中的所有列，并获取所有数据，确保$session$关闭，将查询结果每一项转化为dict存储为list并返回。,"Use $session$ to execute the SQL statement: Query all the columns in the auction table based on $item_id$ and $timestamp$, get all the data, make sure that $session$ is closed, convert each item of the query result to dict, store it as list, and return."
13920,"def book(conn, isbn):
	sql = ""SELECT date FROM books WHERE isbn =: isbn""
	date = conn.execute(sql,{""isbn"":isbn}).fetchone()
	if date:
		return date",设置SQL语句：根据$isbn$查询books表中的date数据，使用$conn$连接执行SQL获取第一条数据。如果获取的数据存在，则将其返回。,"Set the SQL statement: Query the date in the books table based on $isbn$, use the $conn$ connection to execute SQL and get the first piece of data. If the obtained data exists, return it."
13832,"def get_value(session,Event,id):
	values = session.query(Event).filter(Event.id == id).all()
	return dict(values)",通过$session$使用ORM方式执行SQL语句：根据$id$查询$Event$表中的所有数据，将查询结果转化为字典并返回。,Use the ORM method to execute SQL statement through $session$: Query all data in the $Event$ table based on $id$. Convert the query results to dictionary and return it.
13176,"from sqlalchemy import create_engine
def init_db(postgresql,admin):
	try:
		conn = create_engine(postgresql).connect()
		res=conn.execute('select size from DATABASE where admin=:admin',{""admin"":admin}).fetchall()
		return res
	except Exception as error:
		print(error)",尝试使用$postgresql$获取数据库引擎并连接数据库，然后执行SQL（根据$admin$获取DATABASE表中的size列）并获取所有数据，返回查询结果，如果执行时出现异常，则打印异常,"Try to use $postgresql$ to get the DATABASE engine and connect to the DATABASE, then execute the SQL (get the size columns in the DATABASE where admin is $admin$) and get all the data, return the query results, and print the exception if an exception occurs during execution."
13968,"from flask import render_template
def book(conn, Isbn):
	sql = ""SELECT * FROM BOOKS WHERE Isbn =: Isbn""
	books = conn.execute(sql,{""Isbn"":Isbn}).fetchone()
	return render_template(""book.html"", book=books)","设置SQL（根据$Isbn$查询BOOKS表中的所有列）,使用$conn$执行SQL获取第一条数据，渲染并返回""book.html""，其中book参数为执行结果。","Set SQL (query all columns in the BOOKS table based on $Isbn$), use $conn$ to execute SQL to get the first piece of data, render and return ""book.html"", where the book parameter is the execution result."
13463,"def select_value(conn, idNumber):
	sql = ""SELECT name FROM data WHERE id =: idNumber""
	names = conn.execute(sql,{""idNumber"":idNumber}).fetchall()
	return names",通过$conn$执行SQL（根据id为$idNumber$获取data表中的name列）并获取所有数据，最后返回查询结果,Execute SQL through $conn$ (get name column in the data table with id as $idNumber$) and get all data. Finally return the query results.
13037,"def queryTilelist(conn):
	the_tuple = conn.execute(""SELECT * FROM test_table"").fetchall()
	querylist = []
	for tup in the_tuple:
		querylist.append(tup)
	return querylist",使用$conn$执行SQL（查询test_table中的所有列）并获取所有数据。使用for循环的方式将查询结果中的每一项存储到list中并返回。,Use $conn$ to execute SQL (query all columns in test_table) and get all the data. Use for loop to store each item in the query result into list and return.
13948,"def book_api(conn, isbn):
	sql = ""SELECT * FROM books WHERE isbn =: isbn""
	book = conn.execute(sql,{""isbn"":isbn}).fetchone()
	if book is None:
		return False
	else:
		return True",设置SQL查询语句，其内容为：根据$isbn$查询books表中的所有列，使用$conn$连接执行SQL获取第一条数据。如果获取的数据不为空，返回False；否则，返回True。,"Set the SQL query statement and the content is as follows: Query all the columns in the books table based on $isbn$, use the $conn$ connection to execute SQL and get the first piece of data. Return False, if the acquired data is not empty; otherwise, return True."
13094,"def queryStock(conn):
	stock_names = conn.execute(""SELECT stock_name FROM stock"").fetchall()
	conn.close()
	return [dict(rows) for rows in stock_names]",使用$conn$执行SQL（查询stock表中的stock_name）并获取所有数据。关闭$conn$并将查询结果中每一项数据转户为list后返回。,Use $conn$ to execute SQL (query stock_name in the stock table) and get all the data. Close $conn$ and transfer each item of data in the query results to list and return.
13123,"def test_branch(db,user1):
	connection = db.connect()
	try:
		res=connection.execute(""select count(user_id) from query_users where user_name=:user1"",{""user1"":user1}).fetchall()
		return res
	finally:
		connection.close()",使用$db$连接数据库，尝试执行SQL（根据user_name为$user1$获取query_users表中的被计数方法处理的user_id列）并获取所有数据，然后返回查询结果，最终确保关闭连接,"Using $db$ to connect to the database, try to execute SQL (get the user_id column in the query_users table processed by the counting method where user_name is $user1$) and get all the data, then return the query results, finally ensure that the connection is closed."
11154,"def getMovies(conn,year):
	m = ""SELECT movietitle FROM imdb_movies WHERE year=""+year
	resultproxy=conn.execute(m)
	for r in resultproxy:
		return r",设置SQL（通过$year$查询imdb_movies中的movietitle），使用$conn$连接执行SQL，使用for循环遍历查询结果并返回。,"Set up SQL (query movietitle in the imdb_movies where year is $year$) , execute SQL with a $conn$ connection, and loop through the query results with a for loop and return."
13684,"def func1(conn, id, birth):
	addresses = conn.execute(""select address from personal_info where id=:id and birth=:birth"",{""id"":id,""birth"":birth}).fetchall()
	return [ad for ad in addresses]",使用$conn$执行SQL（根据$id$和$birth$查询personal_info中的address信息）并获取所有数据。最后通过list形式返回查询结果。,"Execute SQL (query address information in personal_info where id is $id$ and birth is $birth$) with $conn$ and get all the data. Finally, return the result of the query as a list."
11688,"def get_setting(db,key):
	try:
		quer = ""select scheduler from ModelSetting where key=:key""
		res = db.execute(quer,{""key"":key}).fetchone()
		return res
	except Exception as e: 
		print(e)
		return False",尝试使用$db$执行SQL（根据$key$获取ModelSetting表中的scheduler列）并获取第一条数据，返回查询结果，如果执行时出现异常，则打印异常并返回False,"Try to use $db$ to execute SQL (get the scheduler column in the ModelSetting table according to $key$), get the first piece of data, and return the query result. If an exception occurs during execution, print the exception and return False."
11445,"def select_id(conn, name):
	sql = ""SELECT id FROM flight WHERE name =: name""
	flights = conn.execute(sql,{""name"":name}).fetchall()
	for flight in flights:
		print(""{} : {}"".format(flight.id, name))","设置sql（根据$name$查询flight表中id列）,使用$conn$执行SQL并获取所有查询结果，用for循环遍历获取的所有查询结果，使用format字符串匹配方法打印每条数据的id字段，与$name$。","Set up the SQL (query the id column in the flight table based on $name$), use $conn$ to execute the SQL and get all the query results. Use for loop to iterate through all the obtained query results, and use the format string matching method to print the 'id' field of each piece of data and $name$."
11546,"def test_country_id_not_null(conn,Country,id):
	country_ids = conn.query(Country).filter(Country.id == id).first()
	assert len(country_ids) == 0",通过$conn$连接，使用ORM方式执行SQL语句（根据$id$查询$Country$表中的第一条数据），设置断言判断返回结果的长度为0。,"Execute the SQL statement (query the first piece of data in the $Country$ table based on $id$) using ORM method through the $conn$ connection, and set the assertion to determine the length of the returned result as 0."
13536,"def get_wfreq(conn,query_param):
	wfreq_data = conn.execute(""select WFREQ from samples_metadata where sampleid=:query_param"",{""query_param"":query_param}).fetchone()
	print(wfreq_data)
	return wfreq_data[0]",利用$conn$执行SQL（根据sampleid为$query_param$查询samples_metadata表中WFREQ列），并获取第一行数据，将查询结果打印，并返回查询数据的第0个元素。,"Execute SQL with $conn$ (query the WFREQ column in the samples_metadata table where sampleid is $query_param$), get the first row of data, print the query result, and return the 0th element of the query data."
11316,"from sqlalchemy import create_engine
def Histogram(pg_connstring, count):
	engine = create_engine(pg_connstring)
	conn = engine.connect()
	sql = ""SELECT group from table where count = :count""
	theresult_json = conn.excute(sql,{""count"":count}).fetchone()
	conn.close()
	return theresult_json",通过$pg_connstring$获取数据库引擎并建立连接。执行SQL语句（根据$count$查询table表中group列的第一条数据），关闭连接，将查询结果返回。,"Get the database engine and establish a connection through $pg_connstring$. Execute the SQL statement (query the first piece of data in the group column of the table table based on $count$), close the connection, and return the query results."
13529,"def create_database(default_engine,name):
	connection = default_engine.connect()
	res=connection.execute(""select * from DATABASE where name=:name"",{""name"":name}).fetchall()
	connection.close()
	return res",利用$default_engine$连接数据库，执行SQL（根据$name$查询DATABASE表中所有列），并获取所有查询结果，关闭连接，将查询结果返回。,"Connect the database with $default_engine$, execute SQL (query all columns in the DATABASE table based on $name$), get all the query results, close the connection, and return the query results."
13583,"from flask import render_template
def show(db):
	jobs = list(db.execute(""SELECT jobid, jobdesc, companyname FROM jobs"").fetchall())
	users = list(db.execute(""SELECT userid, username FROM jobseekers"").fetchall())
	return render_template(""admin.html"", jobs = jobs, users = users)","利用$db$执行SQL（查询jobs表中jobid, jobdesc, companyname列），获取所有查询结果并转化为list，执行SQL（查询jobseekers表中userid, username列）获取所有查询结果并转化为list,返回渲染后的""admin.html""页面，参数jobs为第一次查询结果,users为第二次查询结果。","Use $db$ to execute SQL (query the jobid, jobdesc and companyname columns in the jobs table), get all the query results, convert them to list. Execute SQL (query the userid and username columns in the jobseekers table), get all the query results, convert them to list, return the rendered ""admin.html"" page, where the parameter jobs is the result of the first query and users is the result of the second query."
11285,"def crudesqlalchemy_select(conn,id):
	selects = conn.execute('SELECT * FROM products WHERE id =:id',{""id"":id}).fetchall()
	jsonList = [dict(r) for r in selects]
	return jsonList",使用$conn$执行SQL(根据$id$获取products中的所有列)并获取所有数据，然后将查询结果的每一项保存为字典类型并返回字典内容,Execute SQL with $conn$ (get all the columns in the products based on $id$) and get all the data. Store each item of the query result as dictionary type and return the dictionary content.
14151,"from sqlalchemy import create_engine
def Users_list(DSQLALCHEMY_DATABASE_URI):
	engine = create_engine(DSQLALCHEMY_DATABASE_URI)
	con = engine.connect()
	rs = con.execute('SELECT Name FROM users')
	Users = rs.fetchall()
	con.close()
	return Users",使用$DSQLALCHEMY_DATABASE_URI$创建数据库引擎并进行连接。执行SQL：查询users表中的Name，然后获取所有数据，关闭数据库连接，返回获取到的数据。,"Create a database engine with $DSQLALCHEMY_DATABASE_URI$ and create a connection. Execute SQL: Query Name in users table, get all the data, close the database connection and return the obtained data."
11549,"def findall(conn, clause):
	if clause:
		rs = conn.execute(""SELECT * FROM data WHERE clause = :clause"", {""clause"": clause}).fetchall()
		return [item for item in rs]
	else:
		return None",若clause存在，则使用$conn$连接执行SQL语句：根据$clause$获取data中的所有列，并获取所有数据，将查询结果存储为list并返回。否则返回None。,"If clause exists, then use $conn$ connection to execute SQL statement: get all columns in data based on $clause$, get all data and store query result as list and return it. Otherwise return None."
13269,"from flask import request,render_template
def adminlogin(conn, username):
	if request.method == ""POST"":
		user_sql = ""SELECT * FROM users WHERE username = :username""
		user = conn.execute(user_sql,{""username"":username}).fetchall()
		return render_template(""adminlogin.html"", user = user)
	else:
		return render_template(""adminlogin.html"")","如果请求的方法为""POST""，则设置SQL语句，通过$conn$执行SQL语句（根据$username$在users中查询所有列）并获取所有数据。渲染返回""adminlogin.html""，其中参数user为查询结果。否则渲染并返回""adminlogin.html""。","If the requested method is ""POST"", set up the SQL statement, execute the SQL statement (query all columns in users where the name of user is $username$) with $conn$ and get all the data. The render returns ""adminlogin.html"" with the parameter user as the result of the query. Otherwise render and return ""adminlogin.html""."
11172,"def query_page(conn,taname):
	user=conn.execute(""SELECT * FROM users WHERE taname=:taname"",{""taname"":taname})
	if user == None:
		return False
	else:
		return True",使用$conn$查询users表中taname为$taname$的所有列。如果查询结果为空，则返回False，否则返回True。,"Use $conn$ to query all columns in the users where taname is $taname$. Return False if the query result is empty, or True if it is not."
13412,"def ping_connection(dbapi_connection, item_id):
	cursor = dbapi_connection.cursor()
	try:
		query_sql = ""SELECT * FROM items WHERE item_id =: item_id""
		results = cursor.execute(query_sql,{""item_id"":item_id}).fetchall()
		cursor.close()
		return results
	except:
		return False",设置$dbapi_connection$的游标方法，然后尝试执行SQL（根据$item_id$获取items表中的所有列）并获取所有数据，进一步关闭连接并返回查询结果，如果不尝试则直接返回False,"Set the cursor method of $dbapi_connection$, then try to execute SQL (get all columns in items table based on $item_id$) and get all the data, further close the connection and return the query result. If not try then return False directly."
14228,"def get_beers(engine,type):
	with engine.connect() as con:
		rs = con.execute('SELECT name, manufacture FROM Items WHERE type =:type',{""type"":type}).fetchall()
		return [dict(row) for row in rs]",使用with语句根据$engine$连接数据库。执行SQL语句（根据$type$获取Items中的全部name和manufacture），将查询结果每一项转化为dict存储为list并返回。,"Use the with statement to connect to the database according to $engine$. Execute the SQL statement (get all the name and manufacture in the Items according to $type$), convert each item of the query result to dict, store it as list and return."
13353,"from sqlalchemy.sql import select
def save_to_db(conn,equity_contracts,conId):
	if conId:
		s = select(equity_contracts.c.oneSecBars).where(equity_contracts.c.conId == conId)
		recs = conn.execute(s).fetchall()
		return recs",如果$conId$不为空，根据python表达式设置SQL：（根据$conId$查询$equity_contracts$表中oneSecBars列）。通过$conn$执行SQL并获取所有数据，返回查询结果。,"If $conId$ is not empty, set the SQL based on the python expression (query the oneSecBars column in the $equity_contracts$ table based on $conId$). Execute SQL through $conn$, get all the data and return the query results."
11059,"from sqlalchemy.sql import select
def test_change(conn,table_name,drop_id):
	game = select(table_name).where(table_name.c.drop_id == drop_id)
	drop_recs = conn.execute(game).fetchall()
	return drop_recs",使用python表达式的方式设置SQL：根据$drop_id$查询$table_name$表中的所有信息。使用$conn$执行SQL并获取所有数据，最后返回查询结果。,"Use the python expression to set up SQL: To query all the information in the $table_name$ table based on $drop_id$. Use $conn$ to execute SQL and get all the data, and finally return the query results."
11538,"from sqlalchemy.sql import select
def get_inget_articles_for_roundupfo(conn,articles_table,year):
	s = select(articles_table.c.category_id).where(articles_table.c.year == year)
	rp = conn.execute(s).fetchall()
	articles_for_roundup = [i for i in rp]
	return articles_for_roundup",使用Python表达式的方式设置SQL语句为根据$year$获取$articles_table$表中的所有category_id，使用$conn$连接执行SQL并获取数据。将查询结果每一项元素存储为list，返回list的内容。,"Use the Python expression to set the SQL statement to get all the category_id in the $articles_table$ table based on $year$, use $conn$ connection to execute the SQL and get the data. Store each element of the query result as list and return the contents of the list."
13109,"def get(conn, name):
	result=conn.execute(""select value from metadata where name=:name"",{""name"":name}).fetchall()
	return result if result else None",使用$conn$执行SQL（根据$name$获取metadata表中的value列）并获取所有数据，如果查询结果为真则返回查询结果，否则返回None,"Execute the SQL (get the value column in the metadata where name is $name$) with $conn$ and get all the data, return the query result if the query result is true, otherwise return None."
11628,"def find_user(db,clientes,cid,email,pwd):
	try:
		query = clientes.select(clientes.nombre).where(clientes.clienteid==cid and clientes.email==email and clientes.password==pwd)
		uname = db.execute(query).fetchone()
		return uname
	except Exception as e:
		return False",尝试根据python表达式的方式使用$db$执行SQL（获取$clientes$表中clienteid为$cid$、email为$email$和password为$pwd$的nombre列）并获取第一条数据，返回查询结果，如果执行时出现异常，则返回False,"Try to use $db$ to execute SQL according to the python expression (get the nombre column in the $clientes$ table where clienteid is $cid$, email is $email$, and password is $pwd$), get the first piece of data, return the query result, and return False if an exception occurs during execution."
14251,"def main(conn,author):
	res = conn.execute(""select title from books where author =:author"",{""author"":author}).fetchall()
	return res",使用$conn$执行SQL语句（根据$author$查询books表中的所有title），返回所有的查询结果。,Use $conn$ to execute the SQL statement (query all the title in the books table based on $author$) and return all the query results.
13690,"def select_passenger(db,flight_id):
	passengers = db.execute(""SELECT * FROM passengers WHERE flight_code=:id"",{""id"":flight_id}).fetchall()
	if len(passengers) == 0:
		return None
	else:
		for passenger in passengers:
			print(passenger)",使用$db$执行SQL（查询flight_code为$flight_id$的时候，passengers表中的所有列）并获取所有数据。如果查询结果长度等于0则返回None，否则使用for循环打印查询结果中每一项数据。,"Execute the SQL using $db$(all columns in the passengers table where the flight_code is $flight_id$) and get all the data. If the length of the query result is equal to 0, return None. Otherwise,use for loop to print each item of data in the query result."
13078,"from flask import request,redirect
def search(conn,isbn,title,author):
	if request.method == ""GET"":
		return redirect(""/login"")
	else:
		sql =""SELECT * FROM books WHERE isbn =:isbn AND title =:title AND author =:author""
		rows = conn.execute(sql,{""isbn"":isbn, ""title"": title, ""author"": author}).fetchall()
		if rows:
			return rows
		else:
			return redirect(""/"")","如果request请求方式为GET，则使用redirect转向""/login""页面。否则执行如下代码：设置SQL（根据$isbn$，$title$和$author$查询books表中的所有列）；使用$conn$执行SQL并获取所有数据；如果查询结果存在则直接返回，否则使用redirect转向""/""。","If the request method is GET, use redirect to turn to the ""/login"" page. Otherwise execute the following code: Set SQL (query all columns in books table based on $isbn$, $title$ and $author$); use $conn$ to execute SQL and get all data and if query results exist, return directly, otherwise use redirect to ""/""."
11291,"from sqlalchemy import create_engine
from flask import jsonify
def Rerservation(db,ProjectionId):
	engine = create_engine(db, echo=True)
	connection = engine.connect()
	res=connection.execute(""select Nombre_de_Places from projection where ProjectionId =:ProjectionId"",{""ProjectionId"":ProjectionId}).fetchall()
	connection.close()
	return jsonify({'Place': res})",通过$db$获取数据库引擎，其中echo参数为True，然后建立连接，执行SQL语句（根据$ProjectionId$获取projection中的Nombre_de_Places列）并获取所有数据，关闭连接后返回jsonify处理的'Place'和查询结果,"Get the database engine through $db$, where the echo parameter is True and establish a connection. Execute the SQL statement (get the Nombre_de_Places column in the projection based on $ProjectionId$) and get all the data. Close the connection and return the 'Place' and query result processed by jsonify."
13788,"def destroy_db(conn,wcloud_creator):
	check = conn.execute(""SELECT * from users WHERE wcloud_creator=:wcloud_creator"", {""wcloud_creator"": wcloud_creator}).fetchall()
	if check:
		return True",利用$conn$执行SQL（根据$wcloud_creator$查询users表中所有列），并获取所有查询结果，如果有查询结果，返回True。,"Execute SQL with $conn$ (query all columns in the users table according to $wcloud_creator$), get all the query results, and return True if there are query results."
13060,"def sample_query(conn,user_id,last_name):
	query = ""SELECT * FROM USERS WHERE user_id=:{} AND last_name={}"".format(user_id,last_name)
	values = conn.execute(query,{""user_id"":user_id,""last_name"":last_name}).fetchall()
	return values",使用字符串format方法设置SQL：根据$user_id$和$last_name$查询USERS表中的所有列。使用$conn$执行SQL并获取所有数据。最后返回查询结果。,"Use the string format method to set SQL: Query all columns in the USERS table based on $user_id$ and $last_name$. Use $conn$ to execute SQL and get all the data. Finally, return the query results."
14230,"def main(conn):
	flights = conn.execute(""SELECT origin, destination FROM flights"").fetchall()
	flights_list=[]
	for flight in flights:
		flights_list.append(flight)
	return flights_list",通过$conn$连接执行SQL语句，其内容为：查询flights表中的所有origin和destination信息。使用for循环将查询结果中的每一项元素都存储到list中并将list内容返回。,Execute the SQL statement through the $conn$ connection and the content is as follows: Query all origin and destination information in the flights table. Use for loop to store each element in the query result into list and return the list content.
11113,"from sqlalchemy import create_engine
def func1(host,username):
	engine = create_engine(host)
	connection=engine.connect()
	result = connection.execute(""SELECT login FROM users WHERE username=:username"",{""username"":username}).fetchall()
	for row in result:
		print(row)
	connection.close()",运用$host$获取数据库引擎并建立连接。执行SQL语句（根据$username$查询users表中的login）。按行打印所有信息。确保关闭数据库连接。,Use $host$ to get the database engine and establish a connection. Execute the SQL statement (query login in the users table where the name of user is $username$). Print all the information line by line. Make sure the database connection is closed.
14297,"from sqlalchemy.sql import select
def test_iterable(db,testing):
	conn = db.raw_connection()
	cursor = conn.cursor()
	re=cursor.execute((select([testing.c.id]))).fetchall()
	return re",通过$db$从连接池中获取1个连接，并通过连接创建游标对象，通过游标对象使用Python表达式的方式执行SQL语句：查询$testing$表中所有的id数据，返回查询结果。,"Get a connection from the 'connection' pool through $db$, create a cursor object through the connection, and use the Python expression to execute the SQL statement through the cursor object: Query all the id data in the $testing$ table and return the query results."
13379,"def index(conn,user_id,dur_secs,date_now):
	sql =""SELECT COUNT(dist) FROM runs WHERE user_id=:user_id AND dur_secs<:dur_secs AND date_now<:date_now""
	res=conn.execute(sql,{""user_id"":user_id,""dur_secs"":dur_secs,""date_now"":date_now}).fetchone()
	return res","设置sql（根据$user_id$,$dur_secs$和$date_now$查询runs表中dist列的数量）,使用$conn$执行SQL并获取第一条数据，返回查询结果。","Set sql (query the number of the dist column in the runs table based on $user_id$, $dur_secs$ and $date_now$), use $conn$ to execute SQL, get the first piece of data, and return the query results."
11236,"def update_byid(Customer, id,session):
	try:
		res=session.query(Customer).filter(Customer.id == id).all()
		session.commit()
		return res
	except:
		session.rollback()
	finally:
		session.close()",尝试使用ORM方式，通过$session$获取$Customer$表中id为$id$的所有列，然后执行提交方法并返回获取的结果，否则执行回滚方法，最终确保$session$连接关闭,"Try to use the ORM method to get all the columns in the $Customer$ table with 'id': $id$ via $session$. Then execute the submit method and return the obtained result, otherwise execute the rollback method, and finally make sure the $session$ connection is closed."
13032,"from sqlalchemy.sql import select
def query_ranobe(conn,ranobe_table,title_name):
	selecter = select([ranobe_table.c.id]).where(ranobe_table.c.title == title_name)
	result = conn.execute(selecter).fetchone()
	return result[0]",使用python表达式方式设置SQL（查询当title等于$title_name$时，$ranobe_table$表中的id）。使用$conn$执行SQL并获取第一条数据。返回查询结果的第0号元素。,Use python expressions to set SQL (query the id in the $ranobe_table$ table when title equals $title_name$). Use $conn$ to execute SQL and get the first piece of data. Return 0th elementof the query result.
11066,"def select_samename(conn,anonsid):
	res=conn.execute(""SELECT anons FROM col WHERE anonsid=:anonsid"",{""anonsid"":anonsid})
	anonsDict = [dict(zip(tuple(res.keys()), record)) for record in res.cursor]
	return anonsDict",使用$conn$执行SQL（根据$anonsid$查询col表中的anons信息）。将查询结果的keys作为tuple中第1项元素，查询结果游标的每一项作为tuple中第2个元素。最后将每一个tuple转化为dict并存入list中。最后返回list中数据。,"Use $conn$ to execute SQL (query the anons information in the col table based on $anonsid$). Take the keys of the query result as the first element in the tuple, and each item of the query result cursor as the second element in the tuple. Finally, convert each tuple to dict and store in list. Finally, retutn the data in list."
13203,"def select_user(conn, name):
	if name:
		results = conn.execute(""SELECT * FROM USER WHERE name = :name"",{""name"":name}).fetchall()
		return results
	else:
		return False",如果$name$存在，则使用$conn$执行SQL语句（根据$name$获取USER表中的所有列）并获取所有数据。最后返回所有结果。否则（$name$不存在）返回False。,"If $name$ exists, use $conn$ to execute the SQL statement (get all the columns in the USER where name is $name$) and get all the data. Finally, all the results are returned. Otherwise ($name$ does not exist) return False."
11544,"def getLeaderboard(db, votes):
	cursor = db.cursor()
	results = cursor.execute(""SELECT * FROM cars WHERE votes = :votes"", {""votes"": votes}).fetchall()
	returnArray =[]
	for result in results:
		returnArray.append(result)
	return returnArray","使用$db$连接数据库并通过cursor()方法创建游标对象，执行SQL（根据$votes$查询cars表中的所有列）并获取所有数据,使用for循环将查询结果中的每一项元素都存储到list中，并将list内容返回。","Use $db$ to connect to the database and create a cursor object with the cursor() method, execute the SQL (query all the columns in the cars table based on $votes$) and get all the data. Use for loop to store each element of the query result in list, and return the list contents."
11230,"import csv
def main(conn):
	f = open(""spis.csv"")
	reader = csv.reader(f)
	for title in reader:
		res=conn.execute(""select * from articles where title=:title"", {""title"": title}).fetchall()
		print(res)","打开""spis.csv""文件并读取，对读取的文件使用for循环，循环通过$conn$执行SQL（根据title获取articles中的所有列）并获取所有数据和打印查询的结果","Open the ""spis.csv"" file and read, use for loop on the read file, loop via $conn$ to execute the SQL (get all the columns in articles based on title, get all the data and print the query result."
13137,"def test_composite_primary_key(engine,p1,c1,green):
	try:
		with engine.begin() as conn:
			res=conn.execute(""select * from t_ccs where project_id=:p1, check_id=:c1, color=:green"",{""p1"":p1,""c1"":c1,""green"":green}).fetchall()
			return res
	except:
		raise Exception(""Error"")","尝试使用with语句利用$engine$的开始方法连接数据库，执行SQL（根据project_id为$p1$、check_id为$c1$和color为$green$获取t_ccs表中的所有列）并获取所有数据，然后返回查询结果，如果执行时出现异常，则根据""Error""抛出异常","Try to use the with statement to connect to the database using the start method of $engine$, execute the SQL (get all columns in the t_ccs table where the project_id is $p1$, the check_id is $c1$, and color is $green$) and get all the data, then return the result of the query if an exception occurs during execution, an exception is thrown on the basis of Error."
11421,"def submit_vote(conn, message_id):
	query = ""SELECT reaction FROM reactions WHERE message_id =: message_id""
	results = conn.execute(query,{""message_id"":message_id}).fetchall()
	return results","设置sql（根据$message_id$查询reactions表中reaction列）,使用$conn$执行SQL并获取所有查询结果，返回查询到的结果。","Set up SQL (query the reaction column in the reactions table based on $message_id$), use $conn$ to execute SQL, get all the query results, and return the query results."
13894,"def searchContent(conn, content):
	query = ""SELECT * FROM jihemei WHERE content = :content""
	items = conn.execute(query, {""content"": content}).fetchall()
	return items","设置查询语句为：根据$content$获取jihemei中的所有列,使用$conn$连接执行SQL获取全部数据并返回。","Set the query statement to: Get all the columns in jihemei based on $content$, use $conn$ connection to execute SQL to get all the data and return them."
11420,"def find_consumable(conn, consumable):
	sql = ""SELECT manufacturer FROM Consumables WHERE consumable =: consumable""
	rs = conn.execute(sql,{""consumable"":consumable}).fetchall()
	if rs is None:
		return None
	return [dict(row) for row in rs]","设置sql（根据$consumable$查询Consumables表中manufacturer列）,使用$conn$执行SQL并获取所有查询结果，如果查询结果为空，返回None，否则使用for循环将查询结果的每一条转化为dict,并以list存储，接着返回这个list。","Set SQL (query the manufacturer column in the Consumables table based on $consumable$), use $conn$ to execute SQL and get all the query results. If the query result is empty, return None, otherwise use for loop to convert each piece of the query result to dict, and store it in list, and then return the list."
13302,"def book_page(db,taskid):
	cursor = db.cursor()
	try:
		allRows = cursor.execute(""SELECT result FROM comic WHERE taskid=:taskid"",{""taskid"":taskid}).fetchall()
		return allRows
	except Exception as e:
		print(e)",使用$db$创建游标对象，尝试执行SQL（根据$taskid$查询comic表中result列），并获取所有数据，返回查询数据；如果执行时出现Exception异常，则打印这个异常。,"Use $db$ to create a cursor object, try to execute SQL (query the result column in the comic table based on $taskid$), get all the data, and return the query data; if an Exception occurs during execution, the exception is printed."
13081,"def enumeration(cursor,enumtypid):
	try:
		enumera = cursor.execute(""SELECT * FROM pg_enum WHERE enumtypid=:enumtypid"", {""enumtypid"": enumtypid}).fetchall()
		cursor.close()
		return [res for res in enumera]
	except Exception as ex:
		print(ex)",尝试性使用$cursor$执行SQL（根据$enumtypid$查询pg_enum中的所有列）并获取所有数据。关闭$cursor$并将查询结果以list形式返回。如果出现异常，则打印具体异常信息。,"Try to use $cursor$ to execute SQL (query all columns in pg_enum based on $enumtypid$) and get all the data. Close $cursor$ and return the query results as list. If an exception occurs, the specific exception information should be printed."
14208,"from sqlalchemy.sql import select
import sqlalchemy
def scrape_users(db_uri, table):
	db = sqlalchemy.create_engine(db_uri)
	engine = db.connect() 
	rows = engine.execute(select(table.c.screen_name))
	for row in rows.fetchall():
		print(row)
	with open('test.txt', 'a') as f:
		f.write(str(rows))",使用$db_uri$创建数据库引擎并进行连接。执行SQL语句，其内容为：查询$table$表中的所有screen_name数据，for循环遍历所有获取的数据并打印。打开test.txt文件进行写操作，将执行结果转换成字符串写入文件。,"Use $db_uri$ to create the database engine and connect. Execute the SQL statement: query all the screen_name data in the $table$ table and for loop iterates through all the acquired data and prints. Open the test.txt file for write operation, and convert the execution result into a string to write into the file."
11465,"from flask import render_template
def index(conn, id):
	vuelo_sql = ""SELECT * FROM vuelos WHERE id =: id""
	vuelos = conn.execute(vuelo_sql,{""value"":id}).fetchall()
	return render_template(""index.html"", vuelos=vuelos)","设置sql（根据$id$查询vuelos表中全部信息）,使用$conn$执行SQL并获取所有查询结果，返回渲染后的""index.html""页面，参数vuelos为查询结果。","Set up SQL (query all the information in the vuelos table based on $id$), use $conn$ to execute SQL and get all the query results, return the rendered ""index.html"" page with the vuelos parameter being the query result."
11063,"from flask import request,render_template,redirect,url_for
def select_res(conn,queryRecommend,id):
	if 'id'in request.cookies:
		values = conn.query(queryRecommend).filter(queryRecommend.uuid == id).all()
		return render_template('recommend.html', result=values) 
	else:
		return redirect(url_for('index'))",如果'id'在request的cookies中，则使用$conn$执行SQL（查询uuid为$id$时$queryRecommend$表中的所有列）并获取所有数据，返回渲染后的'recommend.html'，其中参数result为查询结果。如果'id'不在cookies中，则使用url_for和redirect跳转到'index'。,"If 'id' is in the cookies of request, use $conn$ to execute SQL (query all columns in the $queryRecommend$ table when uuid is $id$), get all the data, and return the rendered 'recommend.html', where the parameter result is the query result. If 'id' is not in cookies, use url_for and redirect to jump to 'index'."
11658,"def get_drinkerTrans(engine,dID):
	with engine.connect() as con:
		names = con.exe(""select drinkerName from D where drinkerID=:dID"",{""dID"":dID}).fetchall()
		if names is None:
			return None
		return [dict(row) for row in names]","使用with语句利用$engine$连接数据库并执行SQL（根据drinkerID为$dID$获取D表中的drinkerName列）并获取所有数据，如果查询结果是None,则返回None,最后使用for循环对查询结果的每一项转化为字典类型并返回","Use the with statement and $engine$ to connect the database and execute SQL (get the drinkerName column in the 'D' table where drinkerID is $dID$), get all the data, return None if the query result is None, use for loop to convert each item of the query result to a dictionary type and return."
14116,"from sqlalchemy.sql import select
def query_object(conn,cookies): 
	s = select([cookies.c.cookie_name])
	res = conn.execute(s).fetchall()
	for row in res:
		print(row)
	return res",使用Python表达式的方式设置SQL语句：查询$cookies$表中的cookie_name数据，通过$conn$执行SQL获取所有数据。for循环遍历所有查询结果并打印。返回所有的查询结果。,Use the  Python expression to set up SQL: Query the cookie_name data in the $cookies$ table and execute SQL through $conn$ to get all the data. For loop iterates through all the query results and prints them. Return all the query results.
13922,"from flask import jsonify
def getAllIndicados(db_connect, id):
	conn = db_connect.connect()
	try:
		sql = ""SELECT * FROM indicados WHERE id =: id""
		query = conn.execute(sql,{""id"":id}).fetchall()
		return jsonify([dict(i) for i in query])
	except Exception as e:
		print(e)",通过$db_connect$连接数据库，尝试性设置SQL语句：根据$id$获取indicados表中的所有列，执行SQL语句获取所有数据，,"Connect the database through $db_connect$, try to set the SQL statement: Get all the columns in the indicados table according to $id$, execute the SQL statement, and get all the data."
11485,"def select_value(conn, id):
	query_sql = ""SELECT name FROM data WHERE restaurant_id =: restaurant_id""
	results = conn.execute(query_sql,{""restaurant_id"":id})
	names = [dict(zip(tuple(results.keys()), record)) for record in results.cursor]
	return names","设置sql（根据restaurant_id为$id$查询data表中name列）,使用$conn$执行SQL，使用for循环遍历获取执行结果的cursor，将每条数据的keys与值接连转化为tuple，zip和dict，并存到一个list中。最后返回这个list。","Set SQL (query the name column in the data table based on restaurant_id = $id$), use $conn$ to execute the SQL. Use for loop to iterate through to get the cursor of the execution result, and convert 'keys' and 'value' of each piece of data into tuple, zip and dict. Store in a list, and return the list. "
11614,"from sqlalchemy import create_engine
def setUP(testdb,field):
	engine = create_engine(testdb)
	sql = ""SELECT * FROM table_1 WHERE some_field=:field""
	fd = engine.execute(sql,{""field"":field}).fetchall()
	return fd",使用$testdb$获取数据库引擎，执行SQL（获取table_1表中some_field为$field$的所有列）并获取所有数据，最后返回查询结果,"Use $testdb$ to get the database engine, execute SQL (get all the columns in the 'table_1' table when some_field is $field$), get all the data, and finally return the query result."
13982,"from flask import render_template
def books(conn, id):
	sql_title = ""SELECT title FROM books WHERE isbn =: id""
	results = conn.execute(sql_title,{""id"":id}).fetchall()
	if not results:
		return render_template(""error.html"")
	else:
		return render_template(""results.html"", results=results)","设置SQL语句：查询books表中isbn为$id$的title数据，使用$conn$执行SQL获取所有数据，如果执行结果不存在，渲染并返回""error.html""；否则，渲染并返回""results.html""，其中results参数为执行结果。","Set the SQL statement: query the title data in the books table where isbn is $id$, use $conn$ to execute SQL to get all the data. If the result does not exist, render and return ""error.html""; otherwise, render and return ""results.html"", where the results parameter is the execution result."
13167,"import sqlalchemy
def tearDown(db_uri,user1):
	engine = sqlalchemy.create_engine(db_uri)
	conn = engine.connect()
	res=conn.execute(""select price from DATABASE where user1=:user1"",{""user1"":user1}).fetchone()
	conn.close()
	return res",使用$db_uri$获取数据库引擎并连接数据库，然后执行SQL（根据$user1$获取DATABASE表中的price列）并获取第一条数据，进一步关闭连接，最后返回查询结果,"Use $db_uri$ to get the DATABASE engine and connect to the DATABASE, then execute SQL (get the price column in the DATABASE where user1 is $user1$) and get the first data, further close the connection, and finally return the query results."
13549,"import logging
def start(db,taskid):
	cursor = db.cursor()
	try:
		res=cursor.execute('SELECT count(taskid) from recipe_relation where taskid=:taskid',{""taskid"":taskid}).fetchone()
	except Exception as e:
		logging.error(e)
	return res[0]",使用$db$建立游标，尝试执行SQL（根据$taskid$查询recipe_relation表中taskid列的数量），并获取第一条数据。如果执行时出现Exception异常，输出error日志，最后返回查询结果的第0个元素。,"Create a cursor with $db$, try to execute SQL (query the number of taskid columns in the recipe_relation table based on $taskid$), and get the first piece of data. If an Exception occurs during execution, output the error log and return the 0th element of the query result."
11447,"from sqlalchemy import create_engine
from sqlalchemy.orm.session import sessionmaker
def select_value(db_url, secucode):
	db_engine = create_engine(db_url, echo=True)
	DB_Session = sessionmaker(bind=db_engine)
	session = DB_Session()
	sql = ""SELECT * FROM cron_dailyquote WHERE secucode =: secucode""
	results = session.execute(sql,{""secucode"":secucode}).fetchall()
	session.close()
	return results",通过$db_url$获取数据库引擎，参数echo设置为True，进一步获取Session对象。设置SQL语句（根据$secucode$查询cron_dailyquote表中所有列），执行sql并获取所有数据，关闭连接，将查询结果返回。,"Get the database engine via $db_url$, set the 'echo' parameter to True, and further get the Session object. Set up the SQL statement (query all the columns in the cron_dailyquote table based on $secucode$), execute SQL and get all the data, close the connection, and return the query result."
13860,"from sqlalchemy.sql import select
def getReferences(conn,studentData,Username):
	s = select(studentData.c.ReviewWaiver).where(studentData.c.Username == Username)
	out = conn.execute(s).fetchall()
	return dict(out)",使用Python表达式的方式设置SQL语句为根据$Username$获取$studentData$中的ReviewWaiver数据，使用$conn$连接执行SQL获取所有数据。以字典形式返回获取结果。,Use the Python expression to set SQL statement to get ReviewWaiver data in $studentData$ based on $Username$ and use $conn$ connection to execute SQL to get all the data. Return the result in the form of the dictionary.
13909,"def get(e, id):
	conn = e.connect()
	sql = ""SELECT name FROM category WHERE id =: id""
	query = conn.execute(sql,{""id"":id})
	result = [i[0] for i in query.cursor.fetchall()]
	return result",使用$e$连接数据库，设置SQL语句为：查询category表中id为$id$的name，执行SQL语句并通过cursor获取所有数据，将获取数据的每一项的第0个元素存储为list并返回。,"Use $e$ to connect the database, set the SQL statement: Query the name column in the category table whose id is $id$, execute the SQL statement, get all the data through cursor, store the 0th element of each item of the obtained data as list and return."
13935,"from sqlalchemy.sql import select
def get_score(conn, probabilities, feature_value):
	sql = select([probabilities.c.feature_name]).where(probabilities.c.feature_value == feature_value)
	row = conn.execute(sql).fetchall()
	if row is not None:
		print(row)",使用Python表达式的方式设置SQL语句：根据$feature_value$查询$probabilities$表中的feature_name，使用$conn$连接执行SQL获取所有数据，如果获取数据不为空，打印获取的数据。,"Set the SQL statement with the Python expression: Query the feature_name in the $probabilities$ table according to $feature_value$, use the $conn$ connection to execute SQL and get all the data. If the data is not empty, print the obtained data."
11271,"def read(conn,datetime):
	rows=conn.execute(""SELECT time FROM CAPTURE WHERE datetime=:datetime"",{""datetime"":datetime}).fetchall()
	data=''
	for row in rows:
		data+=str(row[0])
	return data",使用$conn$执行SQL（根据$datetime$获取CAPTURE中的time列）并获取所有数据，然后使用for循环对查询结果中的每一项的第0个元素存储为字符串类型，并返回字符串内容,"Execute the SQL with $conn$ (get the time column in CAPTURE based on $datetime$), get all the data, use for loop to store the 0th element of each item in the query result as string type and return the string content."
14226,"from sqlalchemy.sql import select
def scopDesc(conn, scop_des, sccs):
	squery = select([scop_des.c.eng_desc]).where(scop_des.c.sccs == sccs) 
	desc = conn.execute(squery)
	return desc.fetchone()",使用Python表达式的方式设置SQL语句：根据$sccs$查询$scop_des$表中的eng_desc数据，通过$conn$连接执行SQL语句，将获取到的执行结果的第一条数据返回。,"Use the Python expression to set the SQL statement: Query the eng_desc data in the $scop_des$ table according to $sccs$, execute the SQL statement through the $conn$ connection, and return the first piece of data obtained from the execution result."
13527,"from flask import render_template
def flight(db,flight_id):
	flight = db.execute(""SELECT * FROM flights WHERE id = :id"", {""id"": flight_id}).fetchone()
	if flight is None:
		return render_template(""error.html"", message=""No such flight."")
	passangers = db.execute(""SELECT name FROM passangers WHERE flight_id = :id"", {""id"": flight_id}).fetchall()
	return render_template(""flight.html"", flight=flight, passangers=passangers)","使用$db$执行SQL（根据id的值为$flight_id$查询flights表中的所有列），并获取第一条查询结果，如果未获取到数据，则返回渲染后的'error.html'，参数message为""No such flight.""。否则执行SQL（根据flight_id的值为$flight_id$查询passangers表中的name列） 返回渲染后的'flight.html'页面，其中参数flight为第一次查询结果, passangers为第二次查询结果。","Use $db$ to execute SQL (query all columns in the flights table where the id value is $flight_id$) and get the first query result. If no data is obtained, return the rendered 'error.html', where parameter message is ""No such flight."". Otherwise, execute SQL (query the name column in the passangers table whose value of flight_id is $flight_id$) and return the rendered 'flight.html' page, where the parameter flight is the result of the first query and passangers is the result of the second query."
13194,"def submit(conn,username):
	res = conn.execute(""SELECT id FROM users WHERE username = :username"", {""username"": username}).fetchone()
	if res:
		return res",使用$conn$执行SQL（根据$username$获取users表中的id列）并获取第一条数据，如果查询结果为真，则返回查询结果,"Execute the SQL (get the id column in the users where the name of user is $username$) with $conn$ and get the first data, return the query result if it is true."
13972,"def select_post(conn, category):
	post_sql = ""SELECT id FROM posts WHERE category =: category""
	results = conn.execute(post_sql,{""category"":category}).fetchall()
	return results",将SQL语句设置为：根据$category$获取posts表中的id信息，使用$conn$执行SQL获取全部信息并返回。,"Set the SQL statement: Get the id information in the posts table based on $category$, use $conn$ to execute SQL to get all the information and return."
13429,"def pullSaleData(conn,location,date):
	response = conn.execute(""SELECT name FROM sales WHERE city = :location and saleyear = :date"",{""location"": location, ""date"": date}).fetchall()
	return response",根据$conn$执行SQL(根据city为$location$和saleyear为$date$获取sales表中的name列)并获取所有数据，最后返回查询结果,Execute the SQL based on $conn$ (get the name column in the sales table with city as $location$ and saleyear as $date$) and get all the data. Finally return the query results.
11341,"from sqlalchemy.sql import select
def check_user_exist(conn,at, uname):
	sql = select(at).where(at.c.uname == uname)
	tmt = conn.execute(sql).fetchone()
	conn.close()
	return tmt",根据python表达式设置sql（根据$uname$查询$at$表中所有列）使用$conn$执行sql并获取第一条数据，关闭连接，并将查询结果返回。,"Set sql according to the python expression (query all columns in the $at$ table based on $uname$), use $conn$ to execute sql and get the first piece of data, close the connection, and return the query results."
13701,"def get_table_cursor(conn,ID):
	cur = conn.execute(""SELECT * FROM table where ID = :ID"",{""ID"":ID}).fecthall()
	print(cur)
	return [j[0] for j in cur]",使用$conn$执行SQL（根据$ID$获取table中所有列）并获取所有数据。打印查询结果，并将查询结果中每一项的第0个元素存入到list中返回。,"Use $conn$ to execute SQL (get all the columns in 'table' table based on $ID$) and get all the data. Print the query result, store the 0th element of each item in the query result into list and return."
14299,"def test(connection):
	res = connection.execute(""select type from query_test"").fetchall()
	return res",使用$connection$连接执行SQL语句，内容为：查询query_test表中的所有type，返回查询结果。,Use the $connection$ connection to execute the SQL statement and the content is as follows: Query all the type in the query_test table and return the query results.
11181,"from flask import request,render_template
def add_article(connection,title,author):
	if request.method == 'POST':
		res_data=connection.execute(""SELECT body FROM articles WHERE title=:title AND author=:author"",{""title"":title,""author"":author}).fetchall()
		return render_template('article.html', form=res_data)",如果request模块发送请求的方式为post，则使用$connection$执行SQL（通过$title$和$author$查询articles中的所有的body）渲染并返回'article.html'，其中form参数为查询结果。,"If the request module sends the request as a post, the SQL rendering (query all the body in the articles where title is $title$ and author is $author$) is performed using $connection$ and the 'article.html' is returned, where the form parameter is the result of the query."
13911,"from flask import redirect, url_for
def book(db, isbn):
	try:
		book = db.execute(""SELECT * FROM reviews WHERE isbn = :isbn"",{""isbn"": isbn}).fetchall()
		return book
	except:
		return redirect(url_for('error'))
	finally:
		db.close()",尝试通过$db$执行SQL：根据$isbn$查询reviews表中的所有列，获取所有数据并返回。如果出现异常，使用redirect返回url_for拼接出的'error'。最后确保$db$关闭。,"Try to execute SQL: Query all the columns in the reviews table based on $isbn$, get all the data, and return. If an exception occurs, use redirect to return the 'error' spliced by url_for. Finally, make sure that $db$ is turned off."
11425,"from sqlalchemy.sql import select
def get_source(conn, audit, id):
	sql = select([audit]).where(audit.c.id == id)
	results = conn.execute(sql).fetchall()
	if len(results)>0:
		return results
	else:
		return False",根据python表达式设置SQL：（根据$id$查询$audit$表中所有列）。通过$conn$执行SQL并获取所有数据，如果查询结果长度大于0，返回查询结果。否则返回False。,"Set SQL based on the Python expression: (query all columns in $audit$ table based on $id$). Execute SQL by $conn$ and get all the data, if query result length is greater than 0, return query result. Otherwise return False."
13835,"def check_existence(conn, tablename):
	out = conn.execute(""SELECT * FROM TABLE WHERE tablename =: tablename"", {""tablename"": tablename}).fetchall()
	print(out)
	return out",使用$conn$连接执行SQL语句（根据$tablename$查询TABLE表中的所有列）并获取全部数据，将查询结果打印并返回。,Use the $conn$ connection to execute the SQL statement (query all columns in the TABLE table based on $tablename$) and get all the data. Print and return the query results.
13530,"from flask import render_template
def book(conn,isbn):
	try:
		review = conn.execute(""SELECT * FROM reviews WHERE isbn = :isbn"", {""isbn"": isbn}).fetchall()
		return render_template(""book.html"", review=review)
	except:
		return None","尝试使用$conn$执行SQL（根据$isbn$查询reviews表中全部信息），并获取所有数据，返回渲染后的""book.html""页面, review参数设置为查询结果。如果执行时出现异常，则返回None。","Try to use $conn$ to execute SQL (query all the information in the reviews table based on $isbn$), get all the data, and return the rendered ""book.html"" page, where the review parameter is set to the query result. If an exception occurs during execution, return None."
11595,"def db(conn, tid):
	try:
		value = conn.execute(""SELECT * FROM table WHERE tid = :tid"", {""tid"": tid}).fetchall()
		conn.close()
		assert len(value) == 1
		return value
	except Exception as e:
		return e",尝试性使用$conn$查询table表中tid为$tid$的所有列，并获取所有数据，确保$conn$关闭，设置断言判断返回结果的长度为1，并返回查询结果。如果出现Exception异常，则返回异常信息。,"Try to use $conn$ to query all the columns in the 'table' table where tid is $tid$, get all the data, make sure that $conn$ is turned off, set the assertion to determine that the length of the returned result is 1, and return the query result. If an Exception occurs, return the exception information."
11350,"def channel_tag_df(conn,set_index):
	query = 'SELECT * FROM channeltags where set_index=:set_index'
	yes = conn.execute(query,{""set_index"":set_index}).fetchone()
	return yes","设置sql（根据$set_index$查询channeltags表中所有列）,使用$conn$执行sql并获取第一条数据，并将查询结果返回。","Set up sql (query all columns in the channeltags table based on $set_index$), execute sql with $conn$ and get the first piece of data, and return the query results."
13746,"from flask import jsonify
def price(conn,Price):
	result = conn.execute('SELECT * FROM new_pop_vs_price where Price = :Price',{""Price"":Price}).fetchall()
	all_data = []
	for row in result:
		all_data.append(row)
	return jsonify(all_data)",利用$conn$执行SQL（根据$Price$查询new_pop_vs_price表中所有列），并获取所有查询结果，用for循环遍历获取的所有查询结果，将每条数据插入一个list中，把这个list转化为json并返回。,"Execute SQL with $conn$ (query all columns in the new_pop_vs_price table according to $Price$), get all the query results, use for loop to traverse all the obtained query results, insert each piece of data into a list, convert the list to json and return."
14232,"from flask import render_template
def index(conn):
	flights = conn.execute(""SELECT * FROM flight"").fetchall()
	return render_template(""index.html"",flights=flights)","通过$conn$连接执行SQL查询语句，其内容为：查询flight表中的所有列，并获取所有数据，渲染并返回""index.html"",其中flights参数为获取到的所有数据。","Excute the SQL query statement through the $conn$ connection, which reads: Query all the columns in the flight table and get all the data, render and return ""index.html"", where the flights parameter is all the data obtained."
11620,"from flask import render_template
def flights(db,flights,id):
	fs = db.execute(flights.select().where(flights.c.flight_id == id)).fetchall()
	return render_template(""flights.html"", flights=fs)","使用$db$，根据python表达式的方式执行SQL（获取$flights$表中flight_id为$id$的所有列）并获取所有数据，最后返回渲染后的""flights.html""，其中flights参数为查询结果","Use $db$ to execute SQL according to the python expression (get all the columns in the $flights$ table whose flight_id is $id$), get all the data, and finally return the rendered ""flights.html"", where the flights parameter is the query result."
11284,"def run(engine, keyword_id):
	if keyword_id is None:
		return keyword_id
	sql = ""SELECT id FROM documents WHERE keyword_id =: keyword_id""
	con = engine.connect()
	res=con.execute(sql,{""keyword_id"":keyword_id}).fetchall()
	con.close()
	return res","如果$keyword_id$为空，则返回$keyword_id$,设置SQL（根据$keyword_id$获取documents中的id列），通过$engine$连接数据库并执行SQL语句获取所有数据，然后确保连接关闭，最后返回查询结果","If $keyword_id$ is empty, return $keyword_id$. Set SQL (get the id column in 'documents' based on $keyword_id$), connect to the database through $engine$ and execute the SQL statement to get all the data. Then make sure the connection is closed, and finally return the query result."
11212,"from sqlalchemy.sql import select
def test_nested_subtransaction_commit(conn,users,user_id):
	sql=select([users.c.user_id]).where(users.c.user_id==user_id)
	res=conn.execute(sql).fetchall()
	return res","使用python表达式的方式设置SQL（根据$user_id$获取$users$表中的user_id）,使用$conn$执行并获取所有数据，最后返回查询结果","Use the Python expression to set SQL (get the user_id in the $users$ table based on $user_id$), use $conn$ to execute and get all the data, and finally return the query result."
11385,"def get_item_statistic(conn,date,item_id):
	ret = conn.execute(""SELECT * FROM view_item_statistic where date=:date and item_id=:item_id"", {""date"": date,""item_id"":item_id}).fetchall()
	print(ret)
	ret = [dict(i) for i in ret]
	return ret","使用$conn$执行SQL（根据$date$和$item_id$查询view_item_statistic表中所有列），并获取所有查询结果，打印查询结果。使用for循环将查询结果的每一条转化为dict,并以list存储，返回这个list","Use $conn$ to execute SQL (query all columns in the view_item_statistics table based on $date$ and $item_id$), get all the query results, and print them. Use for loop to convert each item of the query result to dict, store it in list, and return the list."
14092,"from sqlalchemy.sql import select
def sync(Model, conn, mydatevar):
	a = conn.execute(select([Model]).where(Model.timestamp>mydatevar)).fetchall()
	return a",通过$conn$连接，使用Python表达式的方式执行SQL语句：查询$Model$表中timestamp大于$mydatevar$的全部数据，返回查询结果。,Use the Python expression to execute the SQL statement through the $conn$ connection: Query all the data in the $Model$ table where timestamp is greater than $mydatevar$ and return the query result.
11422,"def select_value(conn, one_row_id):
	sql = ""SELECT * FROM one_rows WHERE one_row_id =: one_row_id""
	one_row = conn.execute(sql,{""one_row_id"":one_row_id}).fetchone()
	assert len(one_row) == 1
	return one_row",设置SQL（根据$one_row_id$查询one_rows表中所有列），根据$conn$执行SQL并获取第一条数据，设置断言判断查询结果长度是否等于1，并将数据返回。,"Set SQL (query all columns in the one_rows table based on $one_row_id$), execute SQL based on $conn$ and get the first piece of data. Set assertion to determine whether the query result length is equal to 1, and return the data."
13752,"def delete_households(conn, zone_id):
	qry = conn.execute(""select num_hh FROM households_temp where zone_id = zone_id"",{""zone_id"":zone_id})
	return qry.fetchall()",利用$conn$执行SQL（根据$zone_id$查询households_temp表中num_hh列），返回获取的所有数据。,Execute SQL with $conn$ (query the num_hh column in the households_temp table according to $zone_id$) and return all the obtained data.
13604,"from sqlalchemy.sql import select
def get_hazards_by_type(conn,tb,haz_type):
	query = select([tb.hazards]).where(tb.columns.type == haz_type)
	result = conn.execute(query).fetchall()
	hazards = []
	for item in result:
		hazards.append(item)
	return hazards",使用python表达式的方式设置SQL：查询当type为$haz_type$时$tb$中的hazards。使用$conn$执行SQL并获取所有数据。使用for循环的方式将查询结果转化为list并返回。,Use python expressions to set up SQL: query the hazards in $tb$ where the type is $haz_type$. Use $conn$ to execute SQL and get all data. Use the for loop to convert the query result into a list and return it. 
13726,"from sqlalchemy.sql import select
def selectThirdForm(conn, References,Username): 
	query = select(References).where(References.c.Username == Username)
	rs = conn.execute(query).fetchall()
	assert len(rs)!=0
	return rs",根据python表达式设置SQL：（根据$Username$查询$References$表中所有列）。通过$conn$执行SQL并获取所有数据，设置断言判断查询结果长度是否不等于0，返回查询结果。,"Set SQL based on the python expression (query all columns in the $References$ table based on $Username$). Execute SQL through $conn$ and get all the data, set assertions to determine whether the query result length is not equal to 0, and return the query result."
13962,"import sqlalchemy
def tearDown(db_uri, name):
	engine = sqlalchemy.create_engine(db_uri)
	conn = engine.connect()
	query_sql = ""SELECT * FROM computer WHERE name =: name""
	computers = conn.execute(query_sql,{""name"":name}).fetchall()
	conn.close()
	return computers",通过$db_uri$获取数据库引擎并建立连接。设置SQL语句（根据$name$查询computer表中的所有列），执行SQL获取所有数据，确保数据库连接关闭，返回执行结果。,"Get the database engine through $db_uri$ and establish a connection. Set the SQL statement (query all columns in the computer table according to $name$), execute SQL to get all the data, make sure the database connection is closed, and return the execution result."
13128,"from flask import render_template
def book_page(conn,session):
	row = conn.execute(""SELECT username FROM users WHERE id = :id"", {""id"": session}).fetchone()
	return render_template(""book_page.html"", row=row[0])","使用$conn$执行SQL（根据id为$session$获取users表中的username列）并获取第一条数据，最后返回渲染后的""book_page.html""，其中row参数为查询结果的第0个元素","Execute SQL with $conn$ (get the username column in the users where id is $session$) and get the first piece of data, then return the rendered ""book_page.html"" with the row parameter as the 0th element of the query result."
11367,"def purge_revision(conn,revobj, revision):
	items = conn.execute(revobj).filter(revobj.revision == revision).all()
	for item in items:
		print(item)",使用ORM的方式，利用$conn$执行SQL（根据$revision$查询$revobj$表中全部信息），并使用for循环逐条打印查询结果,"Use ORM method to execute SQL with $conn$ (query all the information in the $revobj$ table according to $revision$), and use for loop to print the query results one by one."
14213,"from sqlalchemy.sql import select
def select_db(conn, pcinfor5):
	s = select(pcinfor5.c.PC_IP)
	result = conn.execute(s).fetchall()
	return [item[0] for item in result]",使用Python表达式的方式设置SQL语句：查询$pcinfor5$表中的PC_IP，通过$conn$连接执行SQL获取全部数据，将查询结果每一项的第0个元素存储为list并返回。,"Use the Python expression to set up the SQL statement: Query the PC_IP in the $pcinfor5$ table, execute the SQL through the $conn$ connection to get all the data, store the 0th element of each item of the query result as list and return."
13019,"from sqlalchemy import create_engine
def login_user(DATABASE_URL,user_email,user_psswd):
	try:
		engine = create_engine(DATABASE_URL)
		sql = ""SELECT * FROM PROJECT_1_USERS WHERE USER_EMAIL = :user_email AND USER_PASSWORD = :user_psswd""
		user = engine.execute(sql,{""user_email"": user_email, ""user_psswd"": user_psswd}).fetchall()
		return user
	except Exception as err:
		print (err)",尝试性执行如下代码：使用$DATABASE_URL$创建数据库引擎；设置SQL（查询当USER_EMAIL等于$user_email$，USER_PASSWORD等于$user_psswd$时，PROJECT_1_USERS表中的所有信息）；执行SQL并获取所有数据；最后返回查询结果。如果出现异常，则打印异常信息。,"Try to execute the following code: Use $DATABASE_URL$ to create a database engine; set up SQL (query all the information in the PROJECT_1_USERS table when USER_EMAIL equals $user_email$ and USER_PASSWORD equals $user_psswd$); execute SQL and get all the data; and finally return the query results. If an exception occurs, the exception information is printed."
14066,"from sqlalchemy.sql import select
def select_table(db, table):
	with db.connect() as conn:
		rs = conn.execute(select([table]))
		return rs.fetchall()",使用$db$和with语句连接数据库，使用Python表达式的方式执行SQL查询$table$表中的数据，获取所有数据并返回。,"Use the $db$ and with statements to connect to the database, and use the Python expression to execute SQL to query the data in the $table$ table, get all the data and return."
13025,"from flask import render_template
def sign(conn,username,password):
	sql = ""SELECT * FROM users WHERE username= :username AND password = :password""
	user = conn.execute(sql,{""username"": username, ""password"": password}).fetchone()
	if user is None:
		return render_template(""error.html"")
	else :
		return render_template(""index.html"", user=user)","设置SQL（根据$username$和$password$查询users表中的所有列）。使用$conn$执行SQL并获取第一条数据。如果查询结果为None，则返回渲染后的""error.html""。否则返回渲染后的""index.html""，并将查询结果传给user参数。","Set up SQL (query all columns in the users table based on $username$ and $password$). Use $conn$ to execute SQL and get the first piece of data. If the query result is None, return the rendered ""error.html"".Otherwise, return the rendered ""index.html"" and pass the query result  to the user parameter."
13915,"def select_user(db, user_id):
	connection = db.connect()
	try:
		sql = ""SELECT user_name FROM query_users WHERE user_id =: user_id""
		user_name = db.execute(sql,{""user_id"":user_id}).fetchone()
		assert len(user_name) == 0
		connection.close()
		return user_name
	except Exception as e:
		print(e)",尝试设置SQL为：根据$user_id$选取query_users中的user_name数据，使用$db$执行SQL获取第一条数据，设置断言判断执行结果的长度为0，关闭数据库连接，返回执行结果。如果出现Exception，打印异常信息。,"Try to set SQL: Select the user_name data in query_users table according to $user_id$, use $db$ to execute SQL, get the first piece of data, set the assertion to determine that the length of the execution result is 0, close the database connection, and return the execution result. If there is an Exception, print exception message."
11135,"from sqlalchemy.sql import select
from sqlalchemy.orm.session import sessionmaker
def query_old_recs(engine,incremental_record,id):
	Session = sessionmaker(bind=engine)
	session = Session()
	s = select(incremental_record).where(incremental_record.c.id == id)
	recs = session.execute(s).fetchall()
	for row in recs:
		row_dict = dict(row)
		print(row_dict)
	return recs",创建一个配置过的Session类（其bind参数为$engine$），并将其实例化。使用Python表达式的方式设置SQL语句为通过$id$查询$incremental_record$中的所有数据并执行SQL语句。通过for循环遍历查询结果，将查询结果每一项转化为dict存储，并打印转化后的存储结果。最后返回所有的查询结果。,"Create a configured Session class with a bind parameter of $engine$ and instantiate it. Use a Python expression to set the SQL statement to query all the data in $incremental_record$ by $id$ and execute the SQL statement. The query results are iterated through the for loop, each item of the query results is converted to dict storage, and the converted storage results are printed. Finally, all query results are returned."
13470,"from flask import request,render_template
def index(conn, id):
	if request.method == 'POST': 
		sql = ""SELECT username FROM users WHERE id =: id""
		results = conn.execute(sql,{""id"":id}).fetchall()
		return results
	return render_template(""login.html"")","如果请求的方法为'POST'，则利用$conn$执行SQL（根据$id$获取users表中的username列）并获取所有数据并返回查询结果，最后返回渲染后的""login.html""","If the requested method is 'POST', then use $conn$ to execute the SQL (get the username column in the users table based on $id$), get all the data and return the query results. Finally return the rendered ""login.html""."
14244,"from sqlalchemy.sql import select
def get(db,users,name):
	connection = db.connect()
	results = connection.execute(select([users.c.user_id]).where(users.c.user_name==name)).fetchall()
	connection.close()
	return results","通过$db$连接数据库。使用Python表达式的方式执行SQL语句（获取$users$表中user_name为$name$的user_id）获取所有数据,关闭数据库连接，并返回所有的查询结果。","Connect the database through $db$. Use the Python expression  to execute the SQL statement (get the user_id in the $users$ table whose user_name is $name$) to get all the data, close the database connection, and return all the query results."
11124,"from sqlalchemy import create_engine
def int_page(host,ByggUnik):
	conn = create_engine(host).connect()
	rooms = conn.execute(""SELECT * FROM Room WHERE ByggUnik=:ByggUnik"",{""ByggUnik"":ByggUnik}).fetchall()
	return rooms",使用$host$获取数据库引擎并建立连接。执行SQL语句（根据$ByggUnik$查询Room中的所有列）获取所有数据，并返回查询结果。,Use $host$ to get the database engine and establish a connection. Execute the SQL statement (query all columns in the Room where the ByggUnik is $ByggUnik$) to get all the data and return the query results.
14216,"from sqlalchemy import create_engine
def query(testdb_uri,uri):
	engine = create_engine(testdb_uri)
	res = engine.execute(""select id from pgcrypto where uri=:uri"",{""uri"":uri}).fetchall()
	return res",通过$testdb_uri$创建数据库引擎，执行SQL（根据$uri$查询pgcrypto表中的所有id），返回所有的查询结果。,"Create the database engine with $testdb_uri$ and execute the SQL (query all the id in the pgcrypto table based on $uri$), and return all the query results."
13528,"from sqlalchemy import create_engine
def initialize_db(app,phone):
	engine = create_engine(app)
	with engine.connect() as con:
		statement = ""select * from users where phone=:phone""
		res=con.execute(statement, {""phone"":phone}).fetchall()
		return res",通过$app$获取数据库引擎，使用with语句连接数据库。设置SQL（根据$phone$查询users表中所有列），执行sql并获取所有查询结果，将查询结果返回。,"Get the database engine through $app$ and use the with statement to connect the database. Set up SQL (query all columns in the users table according to $phone$), execute sql, get all the query results, and return the query results."
11399,"def get_teamabbr(engine, name):
	with engine.begin() as conn:
		res = conn.execute(""select team_name_abbr from team where name =:name"", {""name"": name}).fetchone()
		return res[0]",使用with语句根据$engine$连接数据库。执行SQL（根据$name$查询team表中team_name_abbr列），并获取第一行数据，返回查询结果的第0个元素。,"Use the with statement to connect to the database according to $engine$. Execute SQL (query the team_name_abbr column in the team table according to $name$), get the first row of data, and return the 0th element of the query result."
13411,"from sqlalchemy import create_engine
def fetch_test(DATABASE_URL, id):
	engine = create_engine(DATABASE_URL)
	name_sql = ""SELECT name FROM test WHERE id =: id""
	test_rows = engine.execute(name_sql,{""id"":id}).fetchall()
	for row in test_rows:
		print(row)",使用$DATABASE_URL$获取数据库引擎并执行SQL（根据$id$获取test表中的name列）并获取所有数据，然后使用使用for循环打印查询结果的每一项,"Use $DATABASE_URL$ to get the database engine and execute the SQL (get the name column in the test table based on $id$) and get all the data, then use for loop to print each item of the query result"
11441,"from flask import request, render_template
def select_Table(conn, category):
	if request.method == 'POST':
		select_sql = ""SELECT title FROM posts WHERE category =: category""
		titles = conn.execute(select_sql,{""category"":category}).fetchall()
		return titles
	return render_template('updateTable.html')","如果请求方式为""POST""，设置sql（根据$category$查询posts表中title列）,使用$conn$执行SQL并获取所有查询结果并返回。否则返回渲染后的'updateTable.html'页面。","If the request method is ""POST"", set SQL (query the title column in the posts table based on $category$), use $conn$ to execute SQL, get all the query results and return. Otherwise, return the rendered 'updateTable.html' page."
11664,"from sqlalchemy import create_engine
def search_numunits(pg_connstring,id,price,year):
	engine = create_engine(pg_connstring)
	conn = engine.connect()
	query = ""select count(numunits) from orderlines where nodeid=:id and totalprice=:price and YEAR=:year""
	nums = conn.execute(query,{""id"":id,""price"":price,""year"":year}).fetchall()
	conn.close()
	return nums",利用$pg_connstring$获取数据库引擎并连接数据库，然后执行SQL（获取orderlines表中nodeid为$id$、totalprice为$price$和YEAR为$year$时，numunits列的数量）并获取所有数据，再关闭连接，最后返回查询语句,"Use $pg_connstring$ to get the database engine and connect the database, then execute SQL (get the number of numunits column in the orderlines table where nodeid is $id$, totalprice is $price$ and YEAR is $year$), get all the data, then close the connection, and finally return the query statement."
11397,"from sqlalchemy.sql import select
def list_associations(conn,user_table,user):
	if user:
		sql = select(user_table).where(user_table.c.user == user)
		results = conn.execute(sql).fetchall()
		toReturn=[]
		for row in results:
			usr,snsr = row[0], row[1]
			toReturn.append({""user"":usr, ""sensor"":snsr }) 
		return toReturn","如果$user$不为空，根据python表达式设置SQL：（根据$user$查询$user_table$表中所有列）。通过$conn$执行SQL获取所有查询结果，并使用for循环遍历每一项查询结果，将第0个元素赋值为字典""user""键的值，将第1个元素赋值为""sensor""键的值，将包含两个键值的字典逐条插入一个list中，并返回这个list。","If $user$ is not empty, set SQL based on the python expression: (query all columns in the $user_table$ table based on $user$). Execute SQL through $conn$ to get all the query results, and use for loop to traverse the query results, assign the 0th element to the value of the dictionary ""user"" key, assign the first element to the value of the ""sensor"" key, insert the dictionary containing the two key values into a list one by one, and return the list."
14031,"import sqlalchemy
def get_query(db_url, blog_id):
	engine = sqlalchemy.create_engine(db_url)
	conn = engine.connect()
	items = conn.execute(""select blog_content from BLOG where blog_id =: blog_id"",{""blog_id"":blog_id}).fetchall()
	conn.close()
	return items",通过$db_url$获取数据库引擎并建立连接。执行SQL语句（根据$blog_id$查询BLOG表中的所有blog_content数据），确保数据库连接关闭，返回查询结果。,Get the database engine and establish a connection through $db_url$. Execute the SQL statement (query all the blog_content data in the BLOG table according to $blog_id$) and ensure that the database connection is closed and return the query result.
11553,"from flask import request,render_template
def review(conn):
	book_id = request.form.get(""book_id"")
	book = conn.execute(""SELECT * FROM books WHERE id = :id"", {""id"": book_id}).fetchall()
	return render_template(""review.html"", book_id=book_id, book=book)","获取表单中名为book_id的参数值。使用$conn$查询books表中id为$id$的所有列，并获取所有数据，渲染并返回""review.html""，其中book_id参数为获取的book_id值，book参数为查询结果。","Get the value of the parameter named book_id in the form. Use $conn$ to query all the columns in the books table with id as $id$ and get all the data, render and return ""review.html"", where the book_id parameter is the obtained book_id value and the book parameter is the query result."
13389,"from flask import render_template
def flights_func(conn,sunny):
	sunny_val=conn.execute(""SELECT * FROM flights WHERE sunny=:sunny"",{""sunny"":sunny}).fetchall()
	print(sunny_val)
	return render_template(""flights.html"", sunny_val=sunny_val)","使用$conn$执行SQL（根据$sunny$查询flights表中所有列），并获取所有查询结果，将查询结果输出，返回渲染后的""flights.html""页面，其中参数sunny_val设定为查询结果。","Use $conn$ to execute SQL (query all columns in the flights table according to $sunny$), get all the query results, output the query results, and return the rendered ""flights.html"" page, where the parameter sunny_val is set to the query results."
13883,"def group_show(conn, username, domain):
	res = conn.execute(""SELECT name FROM grp WHERE username = :username AND domain = :domain"", {""username"": username, ""domain"": domain}).fetchall()
	res_list = []
	for row in res:
		res_list.append(row)
	return res_list",使用$conn$执行SQL语句，其内容为：根据$username$和$domain$查询grp中的所有name信息。使用for循环将查询结果中的每一项元素都存储到list中，并将list内容返回。,Execute the SQL statement using $conn$ with the following contents: Query all name information in grp based on $username$ and $domain$. Use for loop to store each element of the query result in the list and return the contents of the list.
11370,"def get_nearest_5_zones(conn,orig_zone):
	qry = ""select * from zones_all_distances_in_order where orig_zone = :orig_zone""
	result = conn.execute(qry,{""orig_zone"":orig_zone}).fetchall()
	lst = []
	for i in result:
		lst.append(i)
	return lst",使用$conn$执行SQL（根据$orig_zone$查询zones_all_distances_in_order表中所有列）并获取所有数据，并将查询数据使用for循环逐条插入一个list中，返回这个list。,"Use $conn$ to execute SQL (query all the columns in the zones_all_distances_in_order table based on $orig_zone$), get all the data, use for loop to insert the query data one by one into a list and return this list."
13154,"def put(db_connect,firstName,lastName,company,country,email):
	conn = db_connect.connect()
	sql = ""select * from customers where firstName=:firstName and lastName=:lastName and company=:company and country=:country and email=:email""
	res=conn.execute(sql, {""firstName"":firstName, ""lastName"":lastName, ""company"":company, ""country"":country, ""email"":email}).fetchone()
	return res",使用$db_connect$连接数据库并执行SQL（根据$firstName$、$lastName$、$company$、$country$和$email$获取customers表中的所有列）并获取第一条数据，最后返回查询结果,"Connect to the database using $db_connect$, execute the SQL (get all the columns in the customers where firstName is $firstName$, lastName is $lastName$, company is $company$, country is $country$, and email is $email$) , get the first data, and return the query result."
13863,"def query_name(conn, uid):
	userres = conn.execute(""SELECT * FROM users WHERE id = :id"", {""id"": uid}).fetchone()
	return userres",使用$conn$连接执行SQL语句，其内容为：通过$uid$查询users中的列，并获取第一条数据，返回查询结果。,Use the $conn$ connection to execute the SQL statement with the following contents: Query the column in users through $uid$ and get the first piece of data. Return the query result.
13888,"import sqlalchemy
def select_test_db(DB_DOMAIN, new_db_name):
	create_db_engine = sqlalchemy.create_engine(DB_DOMAIN)
	conn = create_db_engine.connect()
	out = conn.execute(""SELECT * FROM database WHERE new_db_name = :new_db_name"", {""new_db_name"": new_db_name}).fetchall()
	conn.close()
	return out",通过$DB_DOMAIN$获取数据库引擎并建立连接。执行SQL语句（根据$new_db_name$获取database中的所有列）并获取全部数据，确保数据库关闭，并返回获取到的所有数据。,Get the database engine through $DB_DOMAIN$ and establish the connection. Execute SQL statement (get all columns in database based on $new_db_name$) and fetch all data. Make sure database is closed and return all fetched data.
14141,"from sqlalchemy.sql import select
def make_query_ordering(conn, cookies):
	res = conn.execute(select([cookies.c.cookie_name])).fetchone()
	print(res)
	return res",使用Python表达式的方式，通过$conn$执行SQL语句，其内容为：查询$cookies$表中的cookie_name，并获取第一条数据，将获取的数据打印并返回,"Use the Python expression to execute the SQL statement via $conn$: Query the cookie_name in the $cookies$ table and get the first piece of data, print the obtained data and return."
11626,"from flask import request,render_template
def index(conn,title):
	if request.method == ""POST"":
		query = ""select * from books where title = :title""
		result = conn.execute(query,{""title"":title}).fetchall()
		answer = []
		for row in result:
			row_as_dict = dict(row)
			answer.append(row_as_dict)
		if not answer:
			return render_template(""alert.html"")
		return render_template(""book.html"", answers=answer)
	else:
		return render_template(""index.html"")","如果请求的方法为""POST""，则使用$conn$执行SQL（根据$title$获取books表中的所有列）并获取所有数据，使用for循环对查询结果的每一项转化为字典类型之后存储为list类型，如果不是list类型，则返回渲染后的""alert.html""，最后返回渲染后的""book.html""，其中answer为list内容，否则返回渲染后的""index.html""","If the request method is ""POST"", use $conn$ to execute SQL (get all the columns in the books table based on $title$) and get all the data. Use for loop to convert each item of the query result to a dictionary type and store it as a list type. If it is not a list type, return the rendered ""alert.html"", and finally return the rendered ""book.html"", where answer is the list content; otherwise, return the rendered ""index.html""."
13251,"from sqlalchemy.sql import select
def select_value(conn, modification, experiment_id, cols):
	if experiment_id == None:
		return False
	else:
		results = conn.execute(select(cols).where(modification.c.experiment_id == experiment_id)).fetchall()
		return results",如果$experiment_id$为None则返回False，反之则使用$conn$执行SQL语句（根据$experiment_id$选取$modification$表中的$cols$列），并在获取所有数据后返回,"If $experiment_id$ is None, return False, otherwise use $conn$ to execute the SQL statement (select the $cols$ column in the $modification$ where the id of experiment is  $experiment_id$) and return after getting all the data."
14184,"def query(conn):
	data = conn.execute(""SELECT * FROM sci_mod"").fetchall()
	for row in data:
		print(row[0])
	return data[0]",通过$conn$执行SQL：查询sci_mod表中的所有列，并获取全部数据。for循环遍历所有查询结果并按行打印第0个元素，返回所有查询结果的第0个元素。,"Execute SQL via $conn$: Query all columns in the sci_mod table and get all the data. For loop iterates through all query results, prints the 0th element by row and returns the 0th element of all query results."
13981,"def api(conn, signup_id):
	sql = ""SELECT * FROM reviews WHERE signup_id =: signup_id""
	res = conn.execute(sql,{""signup_id"":signup_id}).fetchall()
	return [dict(row) for row in res]",设置SQL语句为：查询reviews表中的signup_id为$signup_id$的所有列。使用$conn$执行SQL语句获取所有数据。将查询结果每一项转化为dict存储为list并返回。,Set the SQL statement: Query all columns in the reviews table with signup_id of $signup_id$. Execute the SQL statement with $conn$ to get all the data. Convert each item of the query result into dict and store as list and return.
13774,"from flask import render_template
def books_with_id(conn,book_id,rating):
	reviews = conn.execute(""SELECT reviewtext FROM reviews WHERE book_id = :book_id and rating = :rating"", {""book_id"": book_id,""rating"":rating}).fetchall()
	return render_template(""book.html"", reviews=reviews)","使用$conn$执行SQL（根据$book_id$和$rating$查询reviews表中的reviewtext列），并获取所有查询结果，返回渲染后的""book.html""页面并设定参数reviews为查询结果。","Use $conn$ to execute SQL (query the reviewtext column in the reviews table based on $book_id$ and $rating$), get all the query results, return the rendered ""book.html"" page, and set the parameter reviews as the query result."
13324,"from flask import request, redirect, url_for
def query_login(conn,user):
	if request.method == ""POST"":
		user_inf = conn.execute(""SELECT information FROM users WHERE username = :user"", {""user"": user}).fetchone()
		return user_inf
	else:
		return redirect(url_for('index'))","如果请求方式为""POST"",使用$conn$执行SQL（根据username为$user$查询users表中information列），并获取第一行数据，将查询结果返回，否则，重定向到'index'页面。","If the request method is ""POST"", use $conn$ to execute SQL (query the information column in the users table based on the condition that username is $user$), get the first row of data, and return the query results; otherwise, redirect to the 'index' page."
13847,"def find_beer(engine, type):
	with engine.connect() as con:
		result = con.execute(""SELECT name FROM t1 WHERE type = :type"", {""type"": type}).fetchone()
		if result is None:
			return None
		return dict(result)",使用with语句根据$engine$连接数据库。执行SQL语句，其内容为：根据$type$查询t1表中的第一条name。如果查询结果为空，返回None；否则以字典形式返回查询结果。,"Use the with statement to connect to the database based on $engine$. Execute the SQL statement with the following contents: Query the first piece of name in the t1 table based on $type$. If the query result is empty, return None; otherwise return the query results in the form of the dictionary."
14029,"from sqlalchemy.sql import select
def func3(conn, Model, ticker_id):
	query = select(Model).where(Model.ticker_id==ticker_id)
	res = conn.execute(query).fetchall()
	return res",使用Python表达式的方式设置SQL语句（根据$ticker_id$查询$Model$表中的所有数据），使用$conn$执行SQL获取全部数据并返回。,"Use the Python expression to set the SQL statement (query all the data in the $Model$ table based on $ticker_id$), and use $conn$ to execute SQL to get all the data and return."
14091,"from flask import jsonify
def api_book_info(conn, isbn):
	book = conn.execute(""SELECT * from books where isbn = :isbn"", { ""isbn"": isbn }).fetchone()
	if book is None:
		return jsonify({""error"": ""Invalid isbn""})
	return jsonify(book)","通过$conn$查询books表中isbn为$isbn$的所有列，并获取第一条数据，如果查询结果为空，通过jsonify返回""error""，其内容为""Invalid isbn""；否则通过jsonify返回查询结果。","Query all the columns in the books table where the isbn is $isbn$ through $conn$, and get the first piece of data. If the query result is empty, return ""error"" through jsonify, and its content is ""Invalid isbn""; otherwise, return the query result through jsonify."
14293,"def book_api(conn,isbn):
	book=conn.execute(""SELECT review_count FROM books WHERE isbn=:isbn"", {""isbn"":isbn}).fetchone()
	if not(book):
		return ""error""
	return book","使用$conn$查询books表中isbn为$isbn$的第一条review_count。如果没有查询结果，则返回""error""；否则返回查询结果。","Use $conn$ to query the first review_count in the books table whose isbn is $isbn$. Return ""error"" if there is no query result; otherwise, return the query result."
11507,"def getReview(conn, user_id,isbn):
	reviews = conn.execute(""SELECT * FROM reviews WHERE user_id = :user_id and isbn = :isbn"", {""user_id"": user_id, ""isbn"": isbn}).fetchall()
	return reviews",使用$conn$连接执行SQL（通过$user_id$和$isbn$查询reviews中的所有列）并获取全部数据，返回所有的查询结果。,"Use $conn$ connection to execute SQL (query all columns in reviews by $user_id$ and $isbn$) and get all data, return all query results."
13829,"def user(conn, username,password):
	result = conn.execute(""SELECT * FROM user WHERE username = :username AND password = :password"", {""username"": username,""password"": password}).fetchone()
	if not result:
		raise (""Error"")
	return result",通过$conn$连接执行SQL：使用$username$和$password$查询user表中的所有列，并获取第一条数据。如果没有查询结果，则使用raise抛出异常并附带“Error”信息；否则返回查询结果。,"Execute SQL through $conn$ connection: Query all columns in the user table with $username$ and $password$ and get the first piece of data. If there is no query result, use raise to throw the exception with ""Error"" message; otherwise return the query result."
11061,"def bind_table(conn,devid):
	try:
		pwds =conn.execute(""SELECT pwd FROM bt WHERE devid=:devid"",{""devid"":devid})
		return pwds
	except Exception:
		pass
	conn.close()",尝试性使用$conn$执行SQL（根据$devid$查询bt表中的pwd信息），并返回执行结果。如果出现异常，则直接pass。最后关闭连接。,"Try to use $conn$ to execute SQL (query the pwd information in the bt table based on $devid$) and return the execution result. If an exception occurs, pass directly. Finally, close the connection."
11412,"import csv
def main(conn):
	f = open(""flights.csv"")
	reader = csv.reader(f)
	for origin, destination in reader:
		time = conn.execute(""SELECT duration FROM flights WHERE origin = :origin and destination = :destination"",{""origin"": origin, ""destination"": destination}).fetchall()
		print(time)","打开并读取文件""flights.csv""，循环文件中的origin, destination，利用$conn$执行SQL（根据每条origin,destination查询flights表中duration列），获取所有查询结果并打印。","Open and read the file ""flights.csv"", loop the 'origin' and 'destination' in the file, use $conn$ to execute the SQL (query the duration column in the flights table based on 'origin' and 'destination' of  each piece), get all the query results and print."
14033,"from flask import jsonify
def names(conn):
	new_name_list = []
	name_list = conn.execute(""SELECT sampleid FROM Samples_metadata"").fetchall()
	if len(name_list)==1:
		return name_list
	else:
		for name in name_list:
			new_name_list.append(name)
		return jsonify(new_name_list)",使用$conn$执行SQL语句：查询Samples_metadata表中的所有sampleid数据。如果list中的查询结果长度为1，则将查询结果返回；否则使用for循环将查询结果中的每一项元素都存储到list中，并将list内容使用jsonify处理后返回。,"Use $conn$ to execute the SQL statement: Query all sampleid data in the Samples_metadata table. If the query result length in list is 1, return the query result; otherwise, use for loop to store every element in the query result intolist, use jsonify to process list content and return."
13196,"from sqlalchemy import create_engine
def create_database(admin_uri,owner='transit', database='transit'):
	conn = create_engine(admin_uri).connect()
	res=conn.execute(""select * from database where database=:database and owner=: owner"",{""database"":database,""owner"":owner}).fetchall()
	return res",使用$admin_uri$获取数据库引擎并连接数据库，然后执行SQL(根据$database='transit'$和$owner='transit'$获取database表中的所有列)并获取所有数据，最后返回查询结果,"Use $admin_uri$ to get the database engine and connect to the database, then execute the SQL (get all the columns in the database table where $database='transit'$ is $database='transit'$ and $owner='transit'$ is $owner='transit'$) and get all the data, and finally return the query results."
13347,"def get_bars(engine,bar_id):
	with engine.connect() as con:
		rs = con.execute(""SELECT * FROM Bars WHERE bar_id=:bar_id"",{""bar_id"":bar_id}).fetchall()
		return [dict(row) for row in rs]","使用with语句根据$engine$连接数据库。执行SQL语句（根据$bar_id$查询Bars表中所有列），并获取所有数据，使用for循环将查询结果的每一条转化为dict,以list存储并返回","Use the with statement to connect the database according to $engine$. Execute the SQL statement (query all the columns in the Bars table according to $bar_id$), get all the data, use for loop to convert each item of the query results to dict, store it in list and return."
14238,"from sqlalchemy import create_engine
def get_data(databaseUrl,name ):
	engine = create_engine(databaseUrl, echo=False)
	conn = engine.connect()
	res = conn.execute(""select location from earthquake where name=:name"",{""name"":name}).fetchall()
	return res",通过$databaseUrl$获取数据库引擎（echo参数为False）并建立连接。执行SQL语句（根据$name$查询earthquake表中的所有location数据），返回查询结果。,Get the database engine (the echo parameter is False) through $databaseUrl$ and establish a connection. Execute the SQL statement (query all the location data in the earthquake table based on $name$) and return the query results.
13985,"def select_origin(conn, des):
	origin_sql = ""SELECT origin FROM flights WHERE destination =: des""
	res = conn.execute(origin_sql,{""des"":des}).fetchall()
	for r in res:
		print(r)",设置SQL语句：查询flights表中destination为$des$的origin数据，使用$conn$执行SQL语句获取所有数据。for循环遍历执行结果并打印。,"Set the SQL statement: Query the origin data in the flights table with 'destination': $des$, and use $conn$ to execute the SQL statement to get all the data. For loop iterates through the execution result and prints."
13783,"from flask import request
def books(conn,avg_rating, message):
	if request.method == ""POST"":
		check = conn.execute(""SELECT * FROM reviewbooks WHERE avg_rating=:avg_rating AND message=:message"", {""avg_rating"": avg_rating, ""message"": message}).fetchall()
		if check:
			return check
		else:
			return False","如果请求方式为""POST""，利用$conn$执行SQL（根据$avg_rating$和$message$查询reviewbooks表中所有列），并获取所有查询结果，如果有查询数据，则返回查询结果。否则返回False。","If the request method is ""POST"", use $conn$ to execute SQL (query all columns in the reviewbooks table based on $avg_rating$ and $message$), get all the query results. Return the query results if there is query data; otherwise, return False."
13164,"from sqlalchemy import create_engine
def select(databasePath, id):
	engine = create_engine(databasePath, echo=True)
	connection = engine.connect()
	stmt = ""select week from tableh where id =:id ""
	results = connection.execute(stmt,{""id"":id}).fetchone()
	return results",使用$databasePath$获取数据库引擎并连接数据库，其中echo参数为True，执行SQL（根据$id$获取tableh表中的week列）并获取第一条数据，最后返回查询结果,"Use $databasePath$ to get the database engine and connect to the database, where the echo parameter is True, execute SQL (get the week column intableh where id is $id$) , get the first data, and return the query result."
13820,"def select_signin(engine, email):
	with engine.connect() as con:
		im = con.execute(""SELECT * FROM users WHERE email =: email"", {""email"": email}).fetchall()
		l = [item for item in im]
		if (len(l)==0):
			return False
		else:
			return l",通过with语句根据$engine$连接数据库，根据$email$查询users表中的所有列，并获取全部数据，将查询结果存储为list。如果list的长度为0，则返回False；否则返回list。,"Use the with statement connect to the database based on $engine$, query all columns in the users table based on $email$ and get all the data. Store the query results as list. If the length of list is 0, then return False; otherwise return the list."
13707,"from sqlalchemy.sql import select
def dns_edit(engine, parameters, id):
	conn = engine.connect()
	sql = select(parameters).where(parameters.c.id == id)
	result = conn.execute(sql).fetchall()
	return result",使用$engine$获取连接，使用python表达式设置SQL（根据$id$查询$parameters$中的所有列）。使用获取到的连接执行SQL并获取所有数据。最后返回查询结果。,"Use $engine$ to get the connection and set the SQL with the python expression (query all columns in $parameters$ table based on $id$). Use the acquired connection to execute the SQL and get all the data. Finally, return the query result."
14171,"from flask import jsonify
def healthcareCost(engine):
	healthcareData = engine.execute(""select * from us_healthcare"").fetchall()
	returnData = []
	for row in healthcareData:
		returnData.append({'year_cost': row[0], 'per_cap_cost': row[1]})
	return(jsonify(list(returnData)))",通过$engine$执行SQL语句（查询us_healthcare表中的所有列）获取全部数据。使用for循环遍历查询结果，将查询结果中每一项的第0个和第1个元素分别赋值给'year_cost'和'per_cap_cost'，并存储到list中。使用jsonify处理list内容并返回。,"Execute the SQL statement via with $engine$ (query all columns in the us_healthcare table) to get all the data. Use for loop to iterate through the query results. Assign the 0th and 1st element of each item in the query to 'year_cost' and 'per_cap_cost' respectively, and store them in 'list'. Use jsonify to process the list content and return it."
11235,"from sqlalchemy import create_engine
def teardown_module(host, dirk_gently):
	engine = create_engine(host)
	res=engine.execute(""select * from ROLE where dirk_gently=:dirk_gently"",{""dirk_gently"":dirk_gently}).fetchall()
	return res",通过$host$获取数据库引擎，执行SQL语句（根据$dirk_gently$获取ROLE中的所有列）并获取所有数据，最后返回获取的结果,"Get the database engine via $host$, execute the SQL statement (get all the columns in the ROLE based on $dirk_gently$), get all the data, and finally return the obtained result."
13146,"def main(conn, username):
	query = ""select date from books where username =: username""
	res = conn.execute(query,{""username"":username}).fetchall()
	if res:
		return res",使用$conn$执行SQL（根据$username$获取books表中的date列）并获取所有数据，如果查询结果为真，则返回查询结果,"Execute the SQL (get the date column in the books where the name of user is $username$) with $conn$ and get all the data, return the query results if they are true."
14039,"from flask import render_template
def transaction(conn):
	result = conn.execute(""SELECT * FROM messfee"").fetchall()
	return render_template('transaction.html', result = result)","使用$conn$执行SQL语句：从messfee表中获取所有列，并获取全部数据，渲染并返回'transaction.html', 其中result参数为查询结果。","Use $conn$ to execute the SQL statement: get all the columns from the messfee table, get all the data, render and return 'transaction.html', where the result parameter is the query result."
11536,"from sqlalchemy.sql import select
def get_info(conn,meta,key):
	try:
		s = select(meta.c.value).where(meta.c.key == key)
		result = conn.execute(s).fetchall()
		return result
	except ValueError as e:
		print(e)",尝试性使用Python表达式的方式设置SQL：查询$meta$表中key为$key$的所有value，使用$conn$连接执行SQL语句获取数据并返回查询结果。如果出现ValueError异常，则打印异常信息。,"Try to use the Python expression to Set up SQL: Query all value in the $meta$ table with key as $key$, use $conn$ connection to execute SQL statement to get data and return query results. If ValueError exception occurs, print the exception message."
13717,"from sqlalchemy import create_engine
def make_dbtable(url,critter,count,damages):
	engine = create_engine(url, echo=True)
	sql = ""SELECT values FROM zoo WHERE critter = :critter and count = :count and damages = :damages""
	res = engine.execute(sql, {""critter"": critter,""count"":count,""damages"":damages}).fetchone()
	return res","通过$url$获取数据库引擎，设置echo参数为True。设置sql（根据$critter$，$count$和$damages$查询zoo表中values列）,执行SQL并获取第一条数据，并返回查询结果。","Get the database engine through $url$ and set the echo parameter to True. Set sql (query the values column in the zoo table based on $critter$, $count$ and $damages$), execute SQL, get the first piece of data, and return the query results."
13205,"def select_value(conn, value):
	sql = ""SELECT * from TABLE WHERE value =: value""
	try:
		results = conn.execute(sql,{""value"":value}).fetchall()
		return results
	except Exception as e:
		pass",尝试使用$conn$执行SQL（根据$value$获取TABLE中的所有列）获取所有数据并返回。如果执行时出现Exception异常则直接pass。,"Try to use $conn$ to execute SQL (get all the columns in the TABLE where value is $value$) to get all the data and return. If Exception Exception Exception occurs during execution, pass directly."
13553,"from flask import render_template
def login(conn,user_log):
	school = conn.execute(""SELECT * FROM school WHERE username=:username"",{""username"": user_log}).fetchone()
	if school is None:
		return render_template(""error.html"")
	return render_template(""flight.html"", flight=school)","利用$conn$执行SQL（根据username为$user_log$查询school表中所有列），并获取第一行数据，如果查询结果为空，返回渲染后的""error.html""页面，否则返回渲染后的""flight.html""页面,其中参数flight为查询结果返回。","Execute SQL with $conn$ (query all columns in the school table where username is $user_log$) and get the first row of data. If the query result is empty, return the rendered ""error.html"" page; otherwise, return the rendered ""flight.html"" page, where the parameter flight is the query result that returns."
13643,"from flask import render_template
def login(db,username):
	if username:
		sql = ""SELECT password FROM User WHERE Username=:username""
		valid = db.execute(sql,{""username"":username}).fetchone()
		if valid is None:
			return render_template(""error.html"")
		else:
			return render_template(""success.html"")","如果username存在，则执行后续代码。设置SQL（查询当Username为$username$时，User表中的password信息），使用$db$执行SQL并获取第一条数据。如果查询结果为None，则返回渲染后的""error.html""。否则返回渲染后的""success.html""。","If the username exists, the subsequent code is executed. Set the SQL (query for password information in the User table when the Username is $username$) , execute the SQL using $db$ and get the first data. If the result of the query is None, the rendered 'error.html' is returned. Otherwise, return the rendered ""success.html""."
11248,"def get_points_id_in_idr(conn, idr):
	query = ""SELECT geoguide_id FROM dataset WHERE idr =: idr""
	cursor = conn.execute(query,{""idr"":idr}).fetchall()
	return [r[0] for r in cursor]",使用$conn$执行SQL（根据$idr$获取dataset中的geoguide_id列）并获取所有数据，最后将查询结果每一项的第0个元素存储为list并返回。,"Use $conn$ to execute SQL (get geoguide_id column in dataset based on $idr$) and get all the data, finally store the 0th element of each item of query result as list and return."
14282,"import pandas as pd
def loadData(sqlEngine,username):
	con = sqlEngine.connect()
	sqlResult=con.execute(""SELECT title from redditWeightTable where username=:username"",{""username"":username})
	df = pd.DataFrame(sqlResult.fetchall())
	return df",使用$sqlEngine$连接数据库，执行SQL语句：根据$username$查询redditWeightTable表中的title数据，将获取的所有数据转化为DataFrame类型并将其返回。,"Use $sqlEngine$ to connect to the database and execute the SQL statement: Query the title data in the redditWeightTable table based on $username$, convert all acquired data to DataFrame type and return it."
13371,"def admin_account(connection,username,phone):
	cur = connection.cursor()
	account=cur.execute(""SELECT password FROM users WHERE username=:username AND phone=:phone"",{""username"":username,""phone"":phone}).fetchall()
	cur.close()
	return account",使用$connection$获取游标，执行SQL（根据$username$和$phone$查询users表中password列），并获取所有查询结果，关闭连接，将查询结果返回。,"Use $connection$ to get a cursor, execute SQL (query the password column in the users table based on $username$ and $phone$), get all the query results, close the connection, and return the query results."
11352,"from flask import render_template
def review(db,isbn, review_user):
	book = db.execute('select * from books where isbn=:isbn',{""isbn"": isbn}).fetchone()
	exist_review = db.execute('select * from reviews where isbn=:isbn AND review_user=:review_user', {""isbn"": isbn, ""review_user"": review_user}).fetchone()
	return render_template('result.html',book=book,exist_review=exist_review)",使用$db$执行SQL（根据$isbn$查询books表中全部信息的第一条数据），作为参数book的值；使用$db$执行SQL（根据$isbn$和$review_user$查询reviews表中的第一行数据），作为参数exist_review的值，返回渲染后'result.html'页面，其中参数为book与exist_review。,"Use $db$ to execute SQL (query the first piece of data of all the information in the books table based on $isbn$) as the value of the parameter book; use $db$ to execute SQL (query the first row of data in the reviews table based on $isbn$ and $review_user$) as the value of the parameter exist_review, and return the rendered 'result.html' page, where the parameters are book and exist_review."
13096,"from sqlalchemy.sql import select
def test_computed(conn,test,id):
	s = select(test.c.bar).where(test.c.id ==id)
	bars = conn.execute(s).fetchall()
	return bars",在python表达式方式下设置SQL：根据$id$查询$test$表中的bar。使用$conn$执行SQL并获取所有数据。最后返回查询结果。,Set SQL in python expressions: Query bar in $test$ table based on $id$. Use $conn$ to execute SQL and get all data. Finally return the query results.
14267,"def insertWebsite(connection):
	query = ""select webpage from Website""
	res = connection.execute(query).fetchall()
	return res",设置SQL（查询Website表中的webpage数据），通过$connection$连接执行SQL获取所有数据，返回所获取的数据。,"Set up SQL (query the webpage data in the Website table), execute SQL to get all the data through the $connection$ connection, and return the obtained data."
11480,"from flask import request, render_template
def select_value(conn, username):
	if request.method == ""POST"":
		select_users = ""SELECT * FROM users WHERE username =: username""
		user = conn.execute(select_users,{""username"":username}).fetchone()
		return user
	else:
		return render_template(""register.html"")","如果请求方式为""POST""，设置sql（根据$username$查询users表中全部信息）,使用$conn$执行SQL并获取第一条数据，返回查询结果。否则，返回渲染后的""register.html""页面。","If the request method is ""POST"", set SQL (query all the information in the users table based on $username$). Use $conn$ to execute SQL, get the first piece of data, and return the query result. Otherwise, return the rendered ""register.html"" page."
13421,"from sqlalchemy.sql import select ,func
def get_count(engine, table):
	with engine.connect() as con:
		stm = select([func.count('*')]).select_from(table)
		r = con.execute(stm).fetchall() 
		return r",使用with语句利用$engine$连接数据库，再使用ORM方式获取$table$表中的所有列的计数并获取所有数据，最后返回SQL语句获取的结果,"Use the with statement to connect to the database through $engine$, then use the ORM method to get the counts of all the columns in the $table$ table and get all the data. Finally return the result obtained by the SQL statement."
11400,"from flask import render_template
def index(conn,nation):
	results = conn.execute(""select pearlin from flights where nation =:nation"", {""nation"": nation}).fetchone()
	print(results)
	return render_template('index.html', flights=results)","使用$conn$执行SQL（根据$nation$查询flights表中的pearlin列），并获取第一条查询结果，输出数据，返回渲染后的'index.html'页面,其中参数flights为查询结果","Use $conn$ to execute SQL (query the pearlin column in the flights table according to $nation$), get the first query result, output the data, and return the rendered 'index.html' page, where the parameter flights is the query result."
13215,"from flask import request,render_template
def select_value(conn, isbn, title):
	if request.method == ""GET"":
		return render_template(""index.html"")
	if request.method == ""POST"":
		sql = ""SELECT * FROM books WHERE isbn =: isbn AND title := title""
		results = conn.execute(sql,{""isbn"":isbn, ""title"":title}).fetchall()
		return render_template(""search.html"",rows=results)","如果request请求的方法为'GET'，则渲染并返回""index.html""。如果request请求的方法为""POST""，则使用$conn$执行SQL语句（根据$isbn$和$title$查询books表中的所有列），并获取所有数据，渲染并返回""search.html""，其中rows参数为查询结果。","If the request method is 'GET', render and return ""index.html"". If the request method is ""POST"", then use $conn$ to execute the SQL statement (query all the columns in the books where isbn is $isbn$ and title is $title$) , get all the data, render and return ""search.html"" with the rows parameter as the result of the query."
13577,"def get(e,user):
	conn = e.connect()
	query = conn.execute(""select date from JPY where user=:user"",{""user"":user}).fetchall()
	query=[dict(i) for i in query]
	return query","通过$e$建立连接。执行SQL语句（根据$user$查询JPY表中date列），并获取所有数据，使用for循环将查询结果的每一条转化为dict,并以list存储，返回这个list.","Establish a connection through $e$. Execute the SQL statement (query the date column in the JPY table according to $user$) and get all the data. Use for loop to convert each item of the query result into dict, and store it in list, and return the list."
11112,"from sqlalchemy import create_engine
def get_player_image(address,name):
	engine = create_engine(address)
	with engine.begin() as conn:
		headshot = conn.execute(""SELECT player_headshot FROM players WHERE name=:name"",{""name"":name}).fetchall()
	for row in headshot:
		print(row)",使用$address$获取数据库引擎。在with语句中根据获取的数据库引擎开始一次连接。然后查询players表中name为$name$的所有player_headshot，并通过for循环按行打印所有查询结果。,"Get the database engine using $address$. Start a connection in the with statement based on the database engine obtained. Then query all player_headshot in the players table where name is $name$, and print all query results row by row through the for loop."
13875,"import logging
def select_value(conn, id):
	try:
		allRows = conn.execute(""SELECT * FROM meishi_collection WHERE id = :id"", {""id"": id}).fetchall()
		logging.info(allRows)
		return [item[0] for item in allRows]
	except Exception as e:
		logging.error(e)",尝试性使用$conn$连接执行SQL语句：通过$id$查询meishi_collection表中的全部列，并获取全部数据。使用logging.info（）输出查询结果，将查询结果每一项的第0个元素存储为list并返回。。如果出现Exception，则通过logging.error()输出异常信息。,"Try to use $conn$ connection to execute SQL statement: Query all columns in the meishi_collection table through $id$ and get all the data. Output the query results using logging.info(), store the 0th element of each item of the query results as list and return it. If Exception occurs, output the exception message through logging.error()."
11532,"from sqlalchemy.sql import select
def get_user(connection,users_table,name):
	s = select(users_table.c.id).where(users_table.c.name == name)
	found = connection.execute(s).fetchall()
	connection.close()
	if not found:
		return None
	return dict(found)",使用Python表达式的方式设置SQL语句为根据$name$获取$users_table$中的所有id，使用$connection$连接执行SQL并获取数据，确保数据库连接关闭。如果没有获取到数据，返回None；否则以dict形式返回所有结果。,"Use the Python expression to set the SQL statement to get all the id in $users_table$ based on $name$ , execute the SQL and get the data through $connection$ connection, and make sure the database connection is closed. If no data is fetched, return None; otherwise return all results in dict form."
13703,"def test(conn,name):
	yang = conn.execute(""SELECT crows FROM series where name = :name"", {""name"":name}).fetchall()
	print(yang)",使用$conn$执行SQL（根据$name$查询series表中的crows信息）并获取所有数据。打印查询结果。,"Use $conn$ to execute SQL (query the crows information in the series table based on $name$), get all the data and print the query results."
14051,"def getCustomer(db_engine, username, password):
	db_conn = db_engine.connect()
	query=""select * from customers where username=:username and password=: password""
	res=db_conn.execute(query, {""username"":username,""password"":password}).fetchone()
	if res is None:
		return None
	else:
		return res",通过$db_engine$连接数据库，设置SQL语句：根据$username$和$password$查询customers表中的所有列，执行SQL语句获取第一条数据。如果查询结果为空，则返回None；否则返回查询结果。,"Connect to the database through $db_engine$, set the SQL statement: Query all the columns in the customers table based on $username$ and $password$, and execute the SQL statement to get the first piece of data. If the query result is empty, return None; otherwise return the query result."
11413,"def save_forecast(conn, future_date):
	sql = ""SELECT ticker_name FROM forecast WHERE future_date =: future_date""
	names = []
	results = conn.execute(sql,{""future_date"":future_date}).fetchall()
	for i in results:
		names.append(i)
	return names","设置SQL（根据$future_date$查询forecast表中ticker_name列），根据$conn$执行SQL并获取所有查询结果，用for循环遍历获取的所有查询结果，将每条数据插入一个list中,并将这个list返回。","Set up the SQL (query the ticker_name column in the forecast table based on $future_date$), execute the SQL based on $conn$ and get all the query results. Use for loop to iterate through all the obtained query results, insert each piece of data into a list, and return the list."
11025,"def execute_simple(engine,status):
	with engine.connect() as conn:
		result_dict={}
		try:
			texts = conn.execute(""SELECT result FROM result_dict WHERE status=:status"",{""status"":status}).fetchall()
			result_dict['status']=""SUCCESS""
			results=[]
			for i in texts:
				results.append(i[0])
		except Exception as ex:
			print(str(ex))
			result_dict['status']=""FAIL""
			results = []
	return result_dict, results","使用with语句根据$engine$创建数据库连接。尝试执行如下代码：使用连接执行SQL（根据$status$查询result_dict表中的result数据）并获取所有数据。设置一个新字典，""SUCCESS""存储到字典的status对应的值中。将所有查询结果的第0号元素存储到list中。如果出现异常，则打印异常信息，将""FAIL""存储到字典的status对应的值中。最后返回新字典和生成的list数据。","Use the with statement to create a database connection based on $engine$. Try to execute the following code: Use, connect and execute SQL (query the result data in the result_dict table based on $status$) and get all the data. Set up a new dictionary, and store ""SUCCESS"" in the corresponding value of status in the dictionary. Store the 0th element of all query results in list. If an exception occurs, the exception information should be printed and the ""FAIL"" should be stored in the corresponding value of status in the dictionary. Finally, return the new dictionary and the generated list data."
13671,"from sqlalchemy import create_engine
from flask import render_template
def listplayer(DATABASEURI, ssn):
	engine = create_engine(DATABASEURI)
	conn = engine.connect()
	player = conn.execute(""select * from players where ssn = :ssn"",{""ssn"":ssn}).fetchall()
	return render_template(""listplayer.html"",rows = player)","根据$DATABASEURI$创建数据库引擎并获取链接。根据$conn$执行SQL（根据$ssn$查询players表中的所有列）并获取所有数据。返回渲染后的""listplayer.html""并给rows参数传入查询结果。","Create the database engine from the $DATABASEURI$ and get the connection.Execute the SQL (query all columns in the players table where ssn is $ssn$) according to $conn$ and get all the data. Return the rendered ""listplayer.html"" and passe query result to the rows parameter."
13927,"def process_item(session, company):
	sql = ""SELECT job FROM zhilian WHERE company =: company""
	results = session.execute(sql,{""company"":company}).fetchall()
	print(results)",设置SQL语句，其内容为：查询zhilian表中company为$company$的job数据，使用$session$连接执行SQL语句获取全部数据，打印所有获取到的数据。,"Set the SQL statement, which contains the following contents: Query the job data in the zhilian table whose company is $company$, use the $session$ connection to execute the SQL statement,get all the data, and print all the obtained data."
13119,"def test_soft(conn,id):
	results = conn.execute(""select * from secrets where id=:id"",{""id"":id}).fetchall()
	secret_list=[]
	for row in results:
		secret_list.append(str(row[0]))
	return secret_list",使用$conn$执行SQL（根据$id$获取secrets表中的所有列）并获取所有数据，然后使用for循环对查询结果的每一项的第0个元素转化为字符串类型再存储为list，最后返回list内容,"Use $conn$ to execute SQL (get all the columns in the secrets where id is $id$) and get all the data, then use the for loop to convert the tenth element of each item in the query result into a string type to be stored as a list, and then return the list content."
13133,"def add_column_if_not_exist(conn,name1):
	res= conn.execute(""select column_name, column_type from table_name where name=:name1"",{""name1"":name1}).fetchall()
	if res:
		return res",使用$conn$执行SQL（根据name为$name1$获取table_name表中的column_name和column_type两列）并获取所有数据，如果查询结果为真，则返回查询结果,"Execute the SQL (get the column_name and column_type in the table_name where name is $name1$) with $conn$ and get all the data, and return the query results if they are true."
14218,"def get_user_id_from_email(con, email):
	query = 'SELECT unique_id from ic_user WHERE email = :email'
	res = con.execute(query, {""email"":email}).fetchall()
	if not res:
		return None
	return res[0]","设置SQL语句（根据$email$获取ic_user表中的unique_id数据），通过$con$连接执行SQL语句获取所有数据,如果没有执行结果，返回None；否则返回执行结果的第0个元素。","Set the SQL statement (get the unique_id data in the ic_user table according to $email$), execute the SQL statement to get all the data through the $con$ connection, and return None iif there is no execution result. Otherwise, return the 0th element of the execution result."
11649,"from sqlalchemy import create_engine
def get_postid(DB_CONNECT_STRING,url,uname,word):
	engine = create_engine(DB_CONNECT_STRING, max_overflow=5)
	sql = ""select id from jam_post where url=:url and username=:uname and keyword=:word""
	pid = engine.execute(sql,{""url"":url,""uname"":uname,""word"":word}).fetchall()
	return pid",使用$DB_CONNECT_STRING$获取数据库引擎，其中max_overflow参数为5，执行SQL（获取jam_post表中url为$url$、username为$uname$和keyword为$word$的id列）并获取所有数据，最后返回查询结果,"Use $DB_CONNECT_STRING$ to get the database engine, where the max_overflow parameter is 5, execute SQL (get the id column in the jam_post table where url is $url$, username is $uname$, and keyword is $word$), get all the data, and finally return the query result."
14198,"from flask import request
def register(conn, username):
	if request.method == ""POST"":
		u = conn.execute(""SELECT email FROM users WHERE username = :username"",{""username"": username}).fetchone()
		if u is not None:
			return u",如果request模块发送请求的方式为post，则通过$conn$执行SQL（通过$username$查询users中的第一条email）。如果查询结果不为空，返回查询结果。,"If the request module sends the request as 'post', the SQL is executed via $conn$ (query the first email in users via $username$). If the query result is not empty, return the query result."
13821,"def tearDown(connection, Backends):
	res = connection.execute(""SELECT * FROM TABLE WHERE Backends =: Backends"", {""Backends"": Backends}).fetchall()
	connection.close()
	return [item for item in res]",使用$connection$执行SQL语句（根据$Backends$查询TABLE表中的所有列）并获取全部数据，确保$connection$关闭，将查询结果存储为list并返回。,"Use $connection$ to execute the SQL statement (query all columns in the TABLE table based on $Backends$) and get all the data. Make sure $connection$ is closed, store the query results as list and return it."
13368,"def getMergedTable(conn,table_schema):
	cur = conn.cursor()
	query = ""SELECT table_name FROM infor_tables WHERE table_schema=%s""%table_schema
	rows=cur.execute(query).fetchall()
	table_list = []
	for row in rows:
		table_list.append(row)
	return table_list","使用字符串匹配方法设置sql（根据$table_schema$查询infor_tables表中table_name列）,使用$conn$执行SQL并获取所有查询结果，用for循环遍历获取的所有查询结果，并插入一个list中，返回这个list。","Set sql with the string matching method (query the table_name column in the infor_tables table based on $table_schema$), execute SQL with $conn$, get all the query results, use for loop to traverse all the query results, insert them into a list and return the list."
14145,"import logging
def get_query(conn,ID):
	sql = ""select name from crawl_files where id=:ID""
	results = conn.execute(sql,{""ID"":ID}).fetchall()
	logging.debug(results)
	return results",设置SQL语句：查询crawl_files表中id为$ID$的所有name，通过$conn$执行SQL获取所有数据，使用logging.debug（）方法处理执行语句的结果，返回执行语句的结果。,"Set up SQL statement: Query all 'name' with 'id': $ID$ in crawl_files table, execute SQL by $conn$ to get all the data, use logging.debug() method to process the result of execution statement and return the result of execution statement."
14149,"from flask import render_template
def index(conn):
	rt = conn.execute(""SELECT * FROM reviews"").fetchone()
	return render_template(""index.html"", res=rt)","通过$conn$执行SQL（从reviews表中查询所有列）获取第一条数据，渲染并返回""index.html"", 其中res参数为获取到的第一条数据。","Execute SQL via $conn$ (query all columns from the reviews table) to get the first data, render and return ""index.html"", where the res parameter is the first obtained data."
13228,"from sqlalchemy import create_engine
def searchDATABASE(db_conn):
	engine = create_engine(db_conn)
	try:
		with engine.connect() as conn:
			DATABASEresults = conn.execute(""SELECT * FROM DATABASE"").fetchall()
			return DATABASEresults
	finally:
		engine.dispose()",使用$db_conn$获取数据库引擎。尝试在with语句连接数据库，并使用连接执行SQL语句（查询DATABASE中的所有列），获取所有数据并返回。最后使用dispose方法断开数据库连接。,"Get the database engine using $db_conn$. Try to connect to the DATABASE in the with statement and use the connection to execute the SQL statement (query all columns in the DATABASE) to get all the data and return it. Finally, use the dispose method to disconnect the database."
11079,"def query_page(conn,StuName):
	resID=conn.execute(""SELECT ID FROM Students WHERE StuName=:StuName"",{""StuName"":StuName}).fetchall()
	conn.close()
	return [dict(row) for row in resID]",使用$conn$执行SQL（根据$StuName$查询Students表中的ID）并获取所有数据。关闭数据连接并将查询结果中的每一项转化为dict返回。,Use $conn$ to execute SQL (query the ID in the Students table based on $StuName$) and get all the data. Close the data connection and convert each item in the query result to a dict and return.
11431,"from sqlalchemy.sql import select
def get_source(conn, wigle, ssid):
	sub_q = select([wigle.c.country]).where(wigle.c.ssid == ssid)
	countries = conn.execute(sub_q).fetchall()
	for res in countries:
		print(res)",根据python表达式设置SQL：（根据$ssid$查询$wigle$表中country列）。通过$conn$执行SQL并获取所有数据，使用for循环遍历并打印每一项查询结果。,"Set up SQL based on the Python expression: (query country column in $wigle$ table based on $ssid$). Execute the SQL with $conn$ and get all the data, use for loop to iterate through and print the results of each query result."
14105,"def print_all_data(db_engine,table):
	query = ""SELECT * FROM '{}';"".format(table)
	with db_engine.connect() as connection:
		try:
			result = connection.execute(query)
		except Exception as ex:
			print(ex)
		else:
			for row in result:
				print(row)
			result.close()","设置SQL语句（使用format()函数格式化输出字符串,查询字符串$table$中的所有列）。在with语句中使用$db_engine$连接数据库，尝试性执行SQL语句，如果出现Exception，打印异常信息；否则for循环遍历查询结果，打印查询结果，关闭查询结果。","Set up the SQL statement (use the format () function to output string in a format way and query all columns in the string $table$). Use $db_engine$ to connect the database in the with statement and try to execute the SQL statement, if Exception, print the abnormal information; otherwise, use for loop traversal to query the results, print the query results, and close them."
14055,"from sqlalchemy.sql import select
def display_articles_by_author(connection, articles_table, author_snippet):
	try:
		stmt = select([articles_table]).where(articles_table.c.author==author_snippet)
		rp = connection.execute(stmt).fetchall()
		return rp
	except Exception as e:
		print(e)
		return",尝试使用Python表达式的方式设置SQL：通过$author_snippet$查询$articles_table$中的数据，使用$connection$执行SQL并获取全部数据，返回所获取的数据。如果出现Exception，打印异常信息并返回。,"Try to use the Python expression to set up SQL: To query the data in $articles_table$ through $author_snippet$, use $connection$ to execute SQL, get all the data, and return the obtained data. If Exception occurs, prints the exception message and return."
13864,"def hello(conn, id):
	result = conn.execute(""SELECT * FROM noodles WHERE id =: id"", {""id"": id}).fetchall()
	return_value = ''
	for row in result:
		return_value += row['stuff']
		return_value += '\n'
	return return_value",使用$conn$执行SQL（根据$id$获取noodles表中的所有列）并获取全部数据。for循环遍历所有的查询结果，将每行中的stuff对应的值加入到字符串中，并且以换行符作为间隔。最后返回处理后的结果。,"Use $conn$ to execute SQL (get all columns in the noodles table based on $id$) and get all the data. Use for loop iterate through all query results, add the value corresponding to the stuff in each row to the string, and space it with newlines. Finally return the processed results."
14056,"import sqlalchemy
def view_my_events(url, email):
	db = sqlalchemy.create_engine(url)
	with db.connect() as conn:
		sql_query = ""SELECT * FROM event_details WHERE email = :email""
		events = conn.execute(sql_query,{""email"":email}).fetchall()
	events_json = []
	for event in events:
		events_json.append(event)
	return events_json",使用$url$获取数据库引擎。通过with语句获取连接。然后设置SQL：查询event_details表中email为$email$的所有列，执行SQL获取所有数据。使用for循环将查询结果中的每一项元素都存储到list中并将list内容返回。,"Use $url$ to get the database engine. Get the connection through the with statement. Then set SQL: To query all columns in the event_details table that the 'email' is $email$, and execute SQL to get all the data. Use for loop to store each element in the query result into list and return the list content."
11013,"from flask import redirect
def get(conn,name):
	price = conn.execute(""SELECT price FROM test WHERE name=:name"",{""name"":name}).fetchall()
	if price:
		return redirect('/')",使用$conn$执行SQL（根据$name$查询test表中的price）并获取所有查询结果。如果查询数据存在，则使用redirect重定向到'/'页面。,"Execute SQL with $conn$ (query price in test table based on $name$) and get all query results. If the query data exists, use redirect to redirect to the '/' page."
13952,"def table_names(conn, TABLE_SCHEMA):
	sql = ""SELECT TABLE_NAME FROM TABLES WHERE TABLE_SCHEMA =: TABLE_SCHEMA""
	tables = conn.execute(sql,{""TABLE_SCHEMA"":TABLE_SCHEMA}).fetchall()
	names=[]
	for table in tables:
		names.append(table['TABLE_NAME'].lower())
	return names",设置SQL语句为：查询TABLES表中TABLE_SCHEMA为$TABLE_SCHEMA$的TABLE_NAME，通过$conn$执行SQL获取所有数据。,"Set the SQL statement: Query the TABLE_NAME column in the TABLES table where TABLE_SCHEMA is $TABLE_SCHEMA$, execute SQL through $conn$ and get all the data."
13213,"from flask import request,render_template
def index(conn, input):
	if request.method == 'GET':
		return render_template('main.html')
	else:
		statement = ""SELECT * FROM books WHERE type =: input""
		results = conn.execute(statement, {""input"": input}).fetchall()
		return render_template('main.html', results=results)",如果request请求的方法为'GET'，则渲染并返回'main.html'。否则使用$conn$执行SQL语句（查询当type等于$input$时books表中的所有列），并获取所有数据。渲染并返回'main.html'，其中results参数为查询结果。,"If the request method is 'GET', render and return 'main.html'. Otherwise execute the SQL statement (query all columns in the books table when type equals $input$) using $conn$ and get all the data. Render and return 'main.html', where the results parameter is the result of the query."
13906,"def get_list_option(conn, type_id):
	if type_id is not None:
		sql = ""SELECT id FROM options WHERE type_id =: type_id""
		entries = conn.execute(sql,{""type_id"":type_id}).fetchall()
		json_row=[]
		for en in entries:
			json_row.append(dict(en))
		return json_row",如果$type_id$不为空，则设置SQL语句：根据$type_id$查询options表中的id，通过$conn$执行SQL语句获取所有数据，使用for循环将查询结果中每一项元素转化为dict并存储到list中，并将list内容返回。,"If $type_id$ is not empty, set the SQL statement: Query the id column in the options table according to $type_id$, use $conn$ to execute SQL statement, get all data, use for loop to convert each element in the query result to dict, store it in list, and return the list content."
11627,"from sqlalchemy import create_engine
def upgrade(db_string,artist_id):
	db = create_engine(db_string) 
	query = ""select venue_id from Show where artist_id=:artist_id""
	ids = db.execute(query,{""artist_id"":artist_id}).fetchall()
	return ids",使用$db_string$获取数据库引擎，执行SQL（根据$artist_id$获取Show表中的venue_id列）并获取所有数据，最后返回查询结果,"Use $db_string$ to get the database engine, execute SQL (get the venue_id column in the Show table according to $artist_id$), get all the data, and finally return the query result."
13555,"from sqlalchemy.sql import select
def insert_status(session,status_of_table,status):
	selecter = select([status_of_table.c.id]).where(status_of_table.c.status == status)
	result = session.execute(selecter).fetchone()
	print(result)
	return result[0]",根据python表达式设置SQL：（根据$status$查询$status_of_table$表中id列）。通过$session$执行SQL并获取第一条数据，打印查询结果，返回查询结果的第0个元素。,"Set SQL based on the python expression (query the id column in the $status_of_table$ table based on $status$). Execute SQL through $session$ and get the first piece of data, print the query result, and return the 0th element of the query result."
13056,"from flask import jsonify
def model(conn,gen_age_features,test_score):
	query_text = ""SELECT * FROM model_eval WHERE features = :gen_age_features AND test_score =:test_score""
	texts = conn.execute(query_text, {""gen_age_features"": gen_age_features,""test_score"":test_score}).fetchall()
	return jsonify(texts)",设置SQL（查询当features等于$gen_age_features$，test_score等于$test_score$时model_eval表中的所有列）。使用$conn$执行SQL并获取所有数据。最后使用jsonify返回处理后的结果。,"Set SQL (query all columns in the model_evaltable when features equals $gen_age_features$,test_score equals $test_score$). Use $conn$ to execute SQL and get all the data. Finally, return the results after being processed by jsonify."
13105,"def get_bar(conn, b, casino):
	rs=conn.execute(""select * from Bars where Bar=:b and casino=:casino"",{""b"":b,""casino"":casino}).fetchall()
	return rs",使用$conn$执行SQL（根据Bar为$b$和casino为$casino$获取Bars表中的全部信息）并获取所有数据，最后返回查询结果,"Execute the SQL using $conn$ (get all the information in the table from Bars where b is $b$ and casino is $casino$) and grab all the data, then return the query results."
11320,"def sqlalchemy_mysql_query(conn,result_set):
	try:
		query = ""SELECT * from mysql where result_set = {}"".format(result_set)
		msg = conn.execute(query, {""result_set"": result_set}).fetchone()
		return msg
	except Exception:
		msg = ""Query failed.""
		return msg","尝试使用format字符串匹配方法设置SQL（根据$result_set$查询mysql表中所有列），使用$conn$执行SQL查询第一条数据，并返回查询结果，如果执行时出现异常，则返回""Query failed.""","Try to use the format string matching method to set SQL (query all columns in the mysql table according to $result_set$), use $conn$ to execute the SQL to query for the first piece of data, and return the query result. If an exception occurs during execution, return ""Query failed""."
11371,"def test_inserted_primary_key(conn,engine,testtable):
	qry = ""select * from MetaData where engine = :engine and testtable = :testtable""
	le = conn.execute(qry, {""engine"": engine,""testtable"":testtable}).fetchall()
	return [l for l in le ]","设置sql（根据$engine$和$testtable$查询MetaData表中所有列）,使用$conn$执行SQL并获取所有数据，并将数据使用for循环转化为list返回。","Set up sql (query all columns in the MetaData table based on $engine$ and $testtable$), execute SQL with $conn$ and get all the data, use for loop to convert the data into list and return."
13957,"def test_core_fetchall(engine, id):
	with engine.connect() as conn:
		sql = ""SELECT description FROM Customer WHERE id =: id""
		result = conn.execute(sql,{""id"":id}).fetchall()
		for row in result:
			print(row[0])",使用with语句通过$engine$连接数据库。设置SQL（根据$id$获取Customer表中的description数据）。执行SQL获取所有数据。for循环遍历执行结果，并打印执行结果的第0个元素,"Use the with statement to connect the database through $engine$. Set SQL (get the description data in the Customer table based on $id$). Execute SQL, get all the data, use for loop to traverse the execution result, and print the 0th element of the execution result."
13925,"from flask import request
def json_api(conn, author):
	if request.method == 'GET':
		sql = ""SELECT average_score FROM books WHERE author =: author""
		average_scores = conn.execute(sql,{""author"":author}).fetchall()
		return average_scores",如果request模块发送请求的方式为GET，设置SQL语句为：查询books表中author为$author$的average_score数据，使用$conn$连接执行SQL获取所有数据，返回获取的所有数据。,"If the request module sends the request in a GET method, set the statement to: Query the average_score data in the books table where author is $author$, use the $conn$ connection to execute SQL, get all the data and return all the obtained data."
13229,"def select_data(conn, id):
	try:
		data_sql = ""SELECT * FROM TABLE WHERE id =: id""
		data_results = conn.execute(data_sql,{""id"":id}).fetchall()
		return data_results
	except Exception as e:
		return False",尝试设置SQL（根据$id$查询TABLE的所有列），使用$conn$执行SQL语句，获取所有数据并返回。如果出现Exception异常，则返回False。,"Try to set up SQL (query all columns of TABLE where id is $id$) , execute the SQL statement with $conn$, obtain all the data and return. If an Exception occurs, return False."
11674,"def find_totalvotes(db,id):
	cursor = db.cursor()
	ts = cursor.execute(""select totalvotes from cars where id=:id"",{""id"":id}).fetchone()
	return ts",利用$db$的游标方法执行SQL（根据$id$获取cars表中的totalvotes列）并获取第一条数据，最后返回查询结果,"Use the cursor method of $db$ to execute SQL (get the totalvotes column in the cars table according to $id$), get the first piece of data, and finally return the query result."
